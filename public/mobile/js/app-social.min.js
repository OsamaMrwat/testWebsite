const appSocial = angular.module('social', ['custom-select', 'echarts']);

appSocial
    .config(['$stateProvider', '$httpProvider', function ($stateProvider, $httpProvider) {

        const initResolver = ['SocialInitService', '$ionicLoading', '$timeout', '$state',
            /**
             * @param {SocialInitService} SocialInitService
             * @param $ionicLoading
             * @param $timeout
             * @param $state
             * @return {Promise<any>}
             */
            function (SocialInitService, $ionicLoading, $timeout, $state) {
                $ionicLoading.show({noBackdrop: true});
                return SocialInitService.init()
                    .then(() => $ionicLoading.hide())
                    .catch((error) => {
                        $ionicLoading.hide();
                        $timeout(() => $state.go('root.app.socialCrash'));
                        throw error;
                    })
            }];

        const traderResolver = [
            '$stateParams', '$ionicLoading', 'SocialAPIService', 'Trader', 'SocialFavoriteService', 'SocialPortfolioService',
            /**
             * @param $stateParams
             * @param $ionicLoading
             * @param {SocialAPIService} SocialAPIService
             * @param {Trader} Trader
             * @param {SocialFavoriteService} SocialFavoriteService
             * @return {Promise<Trader>}
             */
            function ($stateParams, $ionicLoading, SocialAPIService, Trader, SocialFavoriteService, SocialPortfolioService) {
                $ionicLoading.show({noBackdrop: true});
                return SocialAPIService.request.getPortfolio('/' + $stateParams.id)
                    .then((response) => {
                        $ionicLoading.hide();
                        const trader = new Trader(response.trader);
                        trader.isFavorite = SocialFavoriteService.isFavorite(trader.id);
                        SocialPortfolioService.initLeader(trader);
                        return trader;
                    })
            }]


        $stateProvider
            /**
             * Something went wrong page
             */
            .state('root.app.socialCrash', {
                url: '/social/error/:err',
                views: {
                    'tab-social': {
                        template:'<ion-view id="error-page"><ion-nav-bar class="bar-stable"><ion-nav-buttons side="left"><div class="display-flex back-button" on-tap="$ctrl.utils.navigate(\'root.app.assets\')"><i class="icon ion-android-arrow-back align-self padding-left font-22"></i></div></ion-nav-buttons><ion-nav-title></ion-nav-title></ion-nav-bar><ion-content scrollbar-y="true" overflow-scroll="true" class="roboto"></ion-content><modal data="$ctrl.modal" template="templates/directives/popup-message.html"></modal></ion-view>',
                        controller: 'errorPage',
                        controllerAs: '$ctrl'
                    }
                },
                // cache: false,
                data: {
                    footer: true
                }
            })
            /**
             * Main feed
             */
            .state('root.app.social', {
                url: '/social/feed/:category/:nonce',
                views: {
                    'tab-social': {
                        template:'<ion-view id="leaders-page"><ion-nav-bar class="bar-stable"><ion-nav-buttons side="right"><div class="button-bar"><button class="display-flex pl-15 padding-right fake-button" on-tap="$ctrl.utils.navigate(\'root.app.socialPortfolio\', {category: \'current\'})"><i class="social-add-icon-my-activity align-self font-size-24"></i></button> <button class="display-flex pl-15 padding-right fake-button" on-tap="$ctrl.openLeadersSearch()"><i class="icon ion-android-funnel align-self font-17"></i></button></div></ion-nav-buttons><ion-nav-title><span class="nav-title roboto-light font-14">{{::$ctrl.translation.socialTrade}}</span></ion-nav-title><category class="bar bar-subheader text-center subheader-color" categories="$ctrl.categories" active-category="$ctrl.activeCategory" on-select="$ctrl.utils.navigate(\'root.app.social\',{category:value.id}, true)"></category><compare-indicator class="layout-column full-width"></compare-indicator></ion-nav-bar><ion-content scrollbar="true" overflow-scroll="true" class="roboto" ng-class="{\'comparing\':$ctrl.compareService.isComparing}"><div class="layout-column full-width" ng-if="$ctrl.activeCategory.id === \'all\'"><div class="layout-row category-title align-center sticky-item"><div class="layout-column font-size-11 roboto-bold">Most copied</div></div><leaders-feed class="layout-row full-width" category="$ctrl.getCategoryById(\'most-copied\')" limit="10"></leaders-feed><div class="layout-row align-center margin-top-30 margin-bottom-30 just-center"><div class="layout-column font-size-13 roboto-bold" on-tap="$ctrl.utils.navigate(\'root.app.social\',{category:\'most-copied\'}, true)">{{$ctrl.translation.showAllMostCopied}}</div></div><div class="layout-row category-title align-center sticky-item"><div class="layout-column font-size-11 roboto-bold">Editor\'s choice</div></div><leaders-feed class="layout-row full-width" category="$ctrl.getCategoryById(\'editors-choice\')" limit="10"></leaders-feed><div class="layout-row align-center margin-top-30 margin-bottom-30 just-center"><div class="layout-column font-size-13 roboto-bold" on-tap="$ctrl.utils.navigate(\'root.app.social\',{category:\'editors-choice\'}, true)">{{$ctrl.translation.showAllEditorsChoice}}</div></div><div class="layout-row category-title align-center sticky-item"><div class="layout-column font-size-11 roboto-bold">Most Profitable</div></div><leaders-feed class="layout-row full-width" category="$ctrl.getCategoryById(\'profitable\')" limit="10"></leaders-feed><div class="layout-row align-center margin-top-30 margin-bottom-30 just-center"><div class="layout-column font-size-13 roboto-bold" on-tap="$ctrl.utils.navigate(\'root.app.social\',{category:\'profitable\'}, true)">{{$ctrl.translation.showAllMostProfitable}}</div></div><div class="layout-row category-title align-center sticky-item"><div class="layout-column font-size-11 roboto-bold">Trending</div></div><leaders-feed class="layout-row full-width" category="$ctrl.getCategoryById(\'trending\')" limit="10"></leaders-feed><div class="layout-row align-center margin-top-30 margin-bottom-30 just-center"><div class="layout-column font-size-13 roboto-bold" on-tap="$ctrl.utils.navigate(\'root.app.social\',{category:\'trending\'}, true)">{{$ctrl.translation.showAllTrending}}</div></div><div class="layout-row category-title align-center sticky-item"><div class="layout-column font-size-11 roboto-bold">Top investors</div></div><leaders-feed class="layout-row full-width" category="$ctrl.getCategoryById(\'top\')" limit="10"></leaders-feed><div class="layout-row align-center margin-top-30 pad-bottom-30 just-center"><div class="layout-column font-size-13 roboto-bold" on-tap="$ctrl.utils.navigate(\'root.app.social\',{category:\'top\'}, true)">{{$ctrl.translation.showAllTopInvestors}}</div></div></div><div class="layout-column full-width" ng-if="$ctrl.activeCategory.id !== \'all\'"><leaders-feed class="layout-row full-width" category="$ctrl.activeCategory" limit="$ctrl.limit" infinite-scroll="true"></leaders-feed></div></ion-content></ion-view>',
                        controller: 'leadersPage',
                        controllerAs: '$ctrl',
                    }
                },
                // cache: false,
                resolve: {
                    init: initResolver
                },
                data: {
                    footer: true
                }
            })
            /**
             * Leader details
             */
            .state('root.app.socialLeader', {
                url: '/social/leader/:id',
                views: {
                    'tab-social': {
                        template:'<ion-view id="leader-details-page"><ion-nav-bar class="bar-stable"><ion-nav-buttons side="left"><div class="display-flex back-button" on-tap="$ctrl.utils.navigate(\'back\')"><i class="icon ion-android-arrow-back align-self padding-left font-size-24"></i></div></ion-nav-buttons><ion-nav-buttons side="right"><div class="button-bar"><button class="display-flex pl-15 padding-right fake-button" on-tap="$ctrl.toggleFavorite()"><i class="align-self font-size-24" ng-class="{\'social-add-icon-star-outline\': !$ctrl.trader.isFavorite, \'social-add-icon-star\': $ctrl.trader.isFavorite}"></i></button> <button class="display-flex pl-15 padding-right fake-button" on-tap="$ctrl.compare()"><i class="social-add-icon-compare align-self font-size-24"></i></button> <button class="display-flex pl-15 padding-right fake-button" ng-if="$ctrl.trader.isFollowed" context-menu context-menu-config="$ctrl.contextMenuConfig"><i class="icon ion-android-more-vertical align-self font-22"></i><ul class="layout-column dropdown-menu"><li on-tap="$ctrl.callAction($ctrl.action.RemoveFunds)" class="layout-column just-center align-start">{{$ctrl.translation.removeFunds}}</li><li on-tap="$ctrl.callAction($ctrl.action.SetStopLoss)" class="layout-column just-center align-start">{{$ctrl.translation.setStopLoss}}</li><li on-tap="$ctrl.callAction($ctrl.action.Resume)" ng-if="!$ctrl.trader.followState" class="layout-column just-center align-start">{{$ctrl.translation.resumeCopy}}</li><li on-tap="$ctrl.callAction($ctrl.action.Pause)" ng-if="$ctrl.trader.followState" class="layout-column just-center align-start">{{$ctrl.translation.pauseCopy}}</li><li on-tap="$ctrl.callAction($ctrl.action.StopCopy)" class="layout-column just-center align-start">{{$ctrl.translation.stopCopy}}</li></ul></button></div></ion-nav-buttons><ion-nav-title><span class="nav-title roboto-light font-14">{{$ctrl.translation.leaderDetails}}</span></ion-nav-title></ion-nav-bar><ion-content scrollbar-y="true" overflow-scroll="true" class="roboto"><div class="layout-column full-width content-gap36"><leader-info trader="$ctrl.trader" class="layout-row"></leader-info><leader-performance trader="$ctrl.trader" class="layout-row"></leader-performance><leader-stat trader="$ctrl.trader" class="layout-row pad-top-16"></leader-stat><leader-portfolio trader="$ctrl.trader" class="layout-row pad-top-16"></leader-portfolio><traded-assets trader="$ctrl.trader" class="layout-row pad-top-16"></traded-assets><div class="layout-row powered-by"><div class="layout-column full-width just-center flex-row align-base">Powered by <img src="img/social/cooma-logo-no-title.svg"></div></div></div></ion-content><ion-footer-bar class="social-footer"><div class="layout-column full-width full-height pad-left-15 pad-right-15 margin-bottom-24"><div class="layout-row full-height"><button class="button-social accent blue shadowless wide text-transform-capitalize full-width" on-tap="$ctrl.copy($ctrl.trader)" ng-if="!$ctrl.trader.isFollowed"><span class="font-size-17">{{$ctrl.translation.copyLeader}}</span></button> <button class="button-social accent green shadowless wide text-transform-capitalize full-width" on-tap="$ctrl.callAction($ctrl.action.AddFunds)" ng-if="$ctrl.trader.isFollowed && $ctrl.trader.followState"><span class="font-size-17">{{$ctrl.translation.addFunds}}</span></button> <button class="button-social accent blue shadowless wide text-transform-capitalize full-width" on-tap="$ctrl.callAction($ctrl.action.Resume)" ng-if="$ctrl.trader.isFollowed && !$ctrl.trader.followState"><span class="font-size-17">{{$ctrl.translation.resumeCopy}}</span></button></div></div></ion-footer-bar></ion-view>',
                        controller: 'leaderDetailsPage',
                        controllerAs: '$ctrl'
                    }
                },
                // cache: false,
                resolve: {
                    trader: traderResolver
                },
                data: {
                    footer: false
                }
            })
            /**
             * Social signup page
             */
            .state('root.app.socialRegistration', {
                url: '/social/registration',
                views: {
                    'tab-social': {
                        template:'<ion-view id="registration-page"><ion-nav-bar class="bar-stable"><ion-nav-buttons side="left"><div class="display-flex back-button" on-tap="$ctrl.utils.navigate(\'back\')"><i class="icon ion-android-arrow-back align-self padding-left font-22"></i></div></ion-nav-buttons><ion-nav-title></ion-nav-title></ion-nav-bar><ion-content scrollbar-y="false" overflow-scroll="false" class="roboto has-footer has-footer-social"><div class="layout-column full-width pad-left-15 pad-right-15 content-gap35"><div class="layout-row margin-top-35"><img src="img/social/cooma-logo.svg"></div><div class="layout-row"><div class="layout-column full-width content-gap16"><div class="layout-row font-size-20 text-transform-capitalize roboto-bold">{{$ctrl.translation.allowCopyTrading}}</div><div class="layout-row font-size-13 trading-content margin-bottom-20" ng-bind-html="$ctrl.translation.registration.step01.text01"></div></div></div><div class="layout-row font-size-13 trading-content content-gap10"><div class="layout-column just-center"><input type="checkbox" class="checkbox-social" id="terms" ng-model="$ctrl.terms"></div><div class="layout-column"><label for="terms" class="font-size-13" ng-bind-html="$ctrl.translation.registration.step01.text02"></label></div></div></div></ion-content><ion-footer-bar class="social-footer"><div class="layout-column full-width full-height pad-left-15 pad-right-15 margin-bottom-24"><div class="layout-row full-height"><button class="button-social accent blue shadowless wide text-transform-capitalize full-width" ng-class="{\'readonly\': !$ctrl.terms}" ng-disabled="!$ctrl.terms" on-tap="$ctrl.register()"><span class="font-size-17">{{$ctrl.translation.getStarted}}</span></button></div></div></ion-footer-bar></ion-view>',
                        controller: 'registrationPage',
                        controllerAs: '$ctrl'
                    }
                },
                // cache: false,
                data: {
                    footer: false
                }
            })
            /**
             * Start/Stop copy
             */
            .state('root.app.socialCopy', {
                url: '/social/copy/:id/:action',
                views: {
                    'tab-social': {
                        template:'<ion-view id="leader-copy-page"><ion-nav-bar class="bar-stable"><ion-nav-buttons side="left"><div class="display-flex back-button" on-tap="$ctrl.utils.navigate(\'back\')"><i class="icon ion-android-arrow-back align-self padding-left font-22"></i></div></ion-nav-buttons><ion-nav-title>{{$ctrl.translation[$ctrl.action]}}</ion-nav-title></ion-nav-bar><ion-content scrollbar-y="true" overflow-scroll="true" class="roboto has-footer has-footer-social"><leader-copy trader="$ctrl.trader" action="$ctrl.action" on-success="$ctrl.onSuccess(amount)" on-fail="$ctrl.onFail(error)" on-start="$ctrl.onActionStart()" on-validation="$ctrl.onValidation(error)" class="layout-row"></leader-copy></ion-content><ion-footer-bar class="social-footer"><div class="layout-column full-width full-height pad-left-15 pad-right-15 margin-bottom-24"><div class="layout-row full-height"><button class="button-social accent shadowless wide text-transform-capitalize full-width" ng-if="!$ctrl.validationError || $ctrl.validationError !== \'balance\'" on-tap="$ctrl.callAction()" ng-disabled="$ctrl.validationError" ng-class="{ \'readonly\': $ctrl.validationError, \'blue\': $ctrl.action === $ctrl.actions.StartCopy, \'red\': $ctrl.action === $ctrl.actions.StopCopy, }"><span class="font-size-17">{{$ctrl.translation[$ctrl.action]}}</span></button> <button class="button-social accent shadowless wide blue text-transform-capitalize full-width" ng-if="$ctrl.validationError === \'balance\'" on-tap="$ctrl.deposit()"><span class="font-size-17">{{$ctrl.translation.deposit}}</span></button></div></div></ion-footer-bar><modal data="$ctrl.modal" template="templates/directives/popup.html"></modal></ion-view>',
                        controller: 'leaderCopyPage',
                        controllerAs: '$ctrl'
                    }
                },
                // cache: false,
                resolve: {
                    trader: traderResolver
                },
                data: {
                    footer: false
                }
            })
            /**
             * Add/Remove funds, set stop loss
             */
            .state('root.app.socialFunds', {
                url: '/social/funds/:id/:action',
                views: {
                    'tab-social': {
                        template:'<ion-view id="leader-funds-page"><ion-nav-bar class="bar-stable"><ion-nav-buttons side="left"><div class="display-flex back-button" on-tap="$ctrl.utils.navigate(\'back\')"><i class="icon ion-android-arrow-back align-self padding-left font-22"></i></div></ion-nav-buttons><ion-nav-title>{{$ctrl.translation[$ctrl.action]}}</ion-nav-title></ion-nav-bar><ion-content scrollbar-y="true" overflow-scroll="true" class="roboto has-footer has-footer-social"><leader-funds trader="$ctrl.trader" action="$ctrl.action" on-success="$ctrl.onSuccess(amount)" on-fail="$ctrl.onFail(error)" on-start="$ctrl.onActionStart()" on-validation="$ctrl.onValidation(error)" class="layout-row"></leader-funds></ion-content><ion-footer-bar class="social-footer"><div class="layout-column full-width full-height pad-left-15 pad-right-15 margin-bottom-24"><div class="layout-row full-height"><button class="button-social accent shadowless wide text-transform-capitalize full-width" ng-if="!$ctrl.validationError || $ctrl.validationError !== \'balance\'" ng-disabled="$ctrl.validationError" on-tap="$ctrl.callAction()" ng-class="{ \'readonly\': $ctrl.validationError, \'blue\': $ctrl.action === \'setStopLoss\', \'green\': $ctrl.action === \'addFunds\' || $ctrl.action === \'removeFunds\' }"><span class="font-size-17">{{$ctrl.translation[$ctrl.action]}}</span></button> <button class="button-social accent shadowless wide blue text-transform-capitalize full-width" ng-if="$ctrl.validationError === \'balance\'" on-tap="$ctrl.deposit()"><span class="font-size-17">{{$ctrl.translation.deposit}}</span></button></div></div></ion-footer-bar><modal data="$ctrl.modal" template="templates/directives/popup.html"></modal></ion-view>',
                        controller: 'leaderFundsPage',
                        controllerAs: '$ctrl'
                    }
                },
                // cache: false,
                resolve: {
                    trader: traderResolver
                },
                data: {
                    footer: false
                }
            })
            /**
             * Pause/Resume copy
             */
            .state('root.app.socialPause', {
                url: '/social/pause/:id/:action',
                views: {
                    'tab-social': {
                        template:'<ion-view id="leader-funds-page"><ion-nav-bar class="bar-stable"><ion-nav-buttons side="left"><div class="display-flex back-button" on-tap="$ctrl.utils.navigate(\'back\')"><i class="icon ion-android-arrow-back align-self padding-left font-22"></i></div></ion-nav-buttons><ion-nav-title>{{$ctrl.translation[$ctrl.action]}}</ion-nav-title></ion-nav-bar><ion-content scrollbar-y="true" overflow-scroll="true" class="roboto has-footer has-footer-social"><leader-pause trader="$ctrl.trader" action="$ctrl.action" on-success="$ctrl.onSuccess(amount)" on-fail="$ctrl.onFail(error)" on-start="$ctrl.onActionStart()" class="layout-row"></leader-pause></ion-content><ion-footer-bar class="social-footer"><div class="layout-column full-width full-height pad-left-15 pad-right-15 margin-bottom-24"><div class="layout-row full-height"><button class="button-social accent blue shadowless wide text-transform-capitalize full-width" on-tap="$ctrl.callAction()"><span class="font-size-17">{{$ctrl.translation[$ctrl.action]}}</span></button></div></div></ion-footer-bar><modal data="$ctrl.modal" template="templates/directives/popup.html"></modal></ion-view>',
                        controller: 'leaderPausePage',
                        controllerAs: '$ctrl'
                    }
                },
                // cache: false,
                resolve: {
                    trader: traderResolver
                },
                data: {
                    footer: false
                }
            })
            /**
             * My activity (potfolio)
             */
            .state('root.app.socialPortfolio', {
                url: '/social/portfolio/:category/:id',
                views: {
                    'tab-social': {
                        template:'<ion-view id="portfolio-page"><ion-nav-bar class="bar-stable"><ion-nav-buttons side="left"><div class="display-flex back-button" on-tap="$ctrl.utils.navigate(\'back\')"><i class="icon ion-android-arrow-back align-self padding-left font-22"></i></div></ion-nav-buttons><ion-nav-title>{{$ctrl.translation.mySocialActivity}}</ion-nav-title><category class="bar bar-subheader text-center subheader-color" categories="$ctrl.categories" active-category="$ctrl.activeCategory" on-select="$ctrl.utils.navigate(\'root.app.socialPortfolio\',{category:value.id, direction: value.id===\'favorites\' ? \'back\': \'left\'})"></category></ion-nav-bar><ion-content scrollbar-y="true" overflow-scroll="true" class="roboto"><div class="layout-column full-width"><portfolio-list class="layout-row" ng-if="$ctrl.activeCategory.id === \'current\'"></portfolio-list><favorites-list class="layout-row" ng-if="$ctrl.activeCategory.id === \'favorites\'"></favorites-list></div></ion-content><modal data="$ctrl.modal" template="templates/directives/popup.html"></modal></ion-view>',
                        controller: 'portfolioPage',
                        controllerAs: '$ctrl'
                    }
                },
                // cache: false,
                data: {
                    footer: false
                }
            })
            .state('root.app.socialCompare', {
                url: '/social/compare',
                views: {
                    'tab-social': {
                        template:'<ion-view id="leaders-page"><ion-nav-bar class="bar-stable"><ion-nav-buttons side="left"><div class="display-flex back-button" on-tap="$ctrl.utils.navigate(\'back\')"><i class="icon ion-android-arrow-back align-self padding-left font-22"></i></div></ion-nav-buttons><ion-nav-title>{{$ctrl.translation.compareLeaders}}</ion-nav-title></ion-nav-bar><ion-content scrollbar="true" overflow-scroll="true" class="roboto"><compare-couple class="layout-row"></compare-couple><div class="layout-row category-title align-center"><div class="layout-column font-size-11 roboto-bold">{{$ctrl.translation.similarLeaders}}</div></div><leaders-feed class="layout-row full-width" category="$ctrl.category" mode="\'compare\'" limit="10"></leaders-feed><div class="layout-row powered-by align-center"><div class="layout-column full-width just-center flex-row align-base">Powered by <img src="img/social/cooma-logo-no-title.svg"></div></div></ion-content></ion-view>',
                        controller: 'leadersComparePage',
                        controllerAs: '$ctrl'
                    }
                },
                // cache: false,
                data: {
                    footer: false
                }
            })
            .state('root.app.socialGlossary', {
                url: '/social/glossary',
                views: {
                    'tab-social': {
                        template:'<ion-view id="glossary-page"><ion-nav-bar class="bar-stable"><ion-nav-buttons side="left"><div class="display-flex back-button" on-tap="$ctrl.utils.navigate(\'back\')"><i class="icon ion-android-arrow-back align-self padding-left font-22"></i></div></ion-nav-buttons><ion-nav-title>{{$ctrl.translation.glossary}}</ion-nav-title></ion-nav-bar><ion-content scrollbar-y="true" overflow-scroll="true" class="roboto"><div class="layout-column full-width"><div class="layout-row category-title align-center text-transform-uppercase roboto-bold social-color-accented">{{$ctrl.translation.general}}</div><div class="layout-row align-center"><div class="layout-column full-width content-gap10"><div class="layout-row align-center"><div class="layout-column social-color-accented">{{$ctrl.translation.absoluteGain}}</div><div class="layout-column social-color-positive roboto-bold display-block"><span class="font-size-17">31.35</span> <span class="font-size-13">%</span></div></div><div class="layout-row align-center">{{$ctrl.translation.absoluteGainDescription}}</div></div></div><div class="layout-row align-center"><div class="layout-column full-width content-gap10"><div class="layout-row align-center social-color-accented">{{$ctrl.translation.averageTradeTime}}</div><div class="layout-row align-center">{{$ctrl.translation.openTradesDescription}}</div></div></div><div class="layout-row align-center"><div class="layout-column full-width content-gap10"><div class="layout-row align-center"><div class="layout-column social-color-accented">{{$ctrl.translation.riskLevel}}</div><div class="layout-column"><div class="layout-row content-gap12"><div class="layout-column"><div class="risk-indicator circled font-size-13 low">0</div></div><div class="layout-column"><div class="risk-indicator circled font-size-13 medium">5</div></div><div class="layout-column"><div class="risk-indicator circled font-size-13 high">8</div></div></div></div></div><div class="layout-row align-center">{{$ctrl.translation.riskDescription}}</div></div></div><div class="layout-row align-center"><div class="layout-column full-width content-gap10"><div class="layout-row align-center"><div class="layout-column social-color-accented">{{$ctrl.translation.investedCapital}}</div><div class="layout-column invested-capital-graph width-23"></div></div><div class="layout-row align-center">{{$ctrl.translation.investedCapitalDescription}}</div></div></div><div class="layout-row align-center"><div class="layout-column full-width content-gap10"><div class="layout-row align-center"><div class="layout-column social-color-accented">{{$ctrl.translation.numberOfCopiers}}</div><div class="layout-column copiers-graph width-23"></div></div><div class="layout-row align-center">{{$ctrl.translation.copiersDescription}}</div></div></div><div class="layout-row align-center"><div class="layout-column full-width content-gap10"><div class="layout-row align-center social-color-accented">{{$ctrl.translation.followers}}</div><div class="layout-row align-center">{{$ctrl.translation.favoritesDescription}}</div></div></div></div></ion-content></ion-view>',
                        controller: 'glossaryPage',
                        controllerAs: '$ctrl'
                    }
                },
                // cache: false,
                data: {
                    footer: false
                }
            })
        $httpProvider.interceptors.push('TokenInterceptor');
    }]);


appSocial.constant('en_Locale', {
    'fontPreloaderText': 'Social Trading App PandaTs',
    'leaders': 'Leaders',
    'collections': 'Collections',
    'myActivity': 'My activity',

    'all': 'All',
    'allCountries': 'All Countries',
    'searchCountry': 'Search Country...',
    'from': 'From',
    'to': 'To',
    'market': 'Market',
    'allMarkets': 'All Markets',
    'minGainOf': 'Min. Gain of',
    'enterGain': 'Enter Gain',
    'risk': 'Risk',
    'duringThe': 'During The',
    'totalTrades': 'Total Trades',
    'avgTradeSize': 'Avg. Trade Size',

    'myPortfolio': 'My Portfolio',
    'myFavorites': 'My Favorites',

    'forex': 'Forex',
    'crypto': 'Crypto',
    'spot': 'Spot',
    'commodities': 'Commodities',
    'stocks': 'Stocks',
    'indices': 'Indices',
    'currencies': 'Currencies',
    'etfs': 'ETFS',
    'shares': 'Shares',

    'low': 'Low',
    'medium': 'Medium',
    'high': 'High',

    'currentMonth': 'Current Month',
    'lastMonth': 'Last Month',
    'lastTwoMonth': 'Last 2 Months',
    'currentQuarter': 'Current Quarter',
    'lastThreeMonth': 'Last 3 Months',
    'lastSixMonth': 'Last 6 Months',
    'thisYear': 'This Year',
    'thisTwoYears': 'These 2 Years',

    'gain': 'Gain',
    'trades': 'Trades',
    'invCapital': 'Inv. Capital',
    'copiers': 'Copiers',
    'copy': 'Copy',
    'resume': 'Resume',

    'orderBy': 'Order By',

    'registration': {
        'step01': {
            'title': 'Easy, simple, profitable',
            'text01': `Online trading has never been easier.<br/>Meet our new social trading platform - Cooma.</br>Today more than ever, it is easy to keep track of the successful traders and copy their trades.`,
            'text02': 'Check here to indicate that you have read and agree to the Social Trading Terms and Conditions',
        }
    },

    'leadersWidget': {
        'most-copied': 'Most Copied',
        'editors-choice': 'Editors` Choice',
        'profitable': 'Most Profitable',
        'trending': 'Trending',
        'top': 'Top Investors',
        'similar': 'Similar leaders',
    },

    'mostCopied': 'Most Copied',
    'absGain': 'Abs. Gain',
    'avgTradeTime': 'Avg. Trade Time',
    'followers': 'Followers',
    'back': 'Back',
    'backToTop': 'Back to top',
    'verifiedUser': 'Verified User',
    'activeSince': 'Active Since',
    'lastActive': 'Last Active',
    'lastTradingActivity': 'Last Trading Activity',
    'unknownCountry': 'Country is unknown',

    'startCopyTradesFromProfitableTraders': 'Start copy trades from profitable traders',
    'statistics': 'Statistics',

    'month': 'month',
    'months': 'months',
    'week': 'week',
    'weeks': 'weeks',
    'day': 'day',
    'days': 'days',
    'hour': 'hour',
    'hours': 'hours',
    'minute': 'minute',
    'minutes': 'minutes',
    'second': 'second',
    'seconds': 'seconds',

    'leaderName': 'Leader Name',
    'country': 'Country',
    'riskLevel': 'Risk Level',
    'favorite': 'Favorite',

    'compare': 'Compare',
    'close': 'Close',

    'profitable': 'Profitable',
    'assets': 'Assets',
    'investedCapital': 'Invested Capital',
    'copiersNumber': 'Copiers Number',
    'popularity': 'Popularity',
    'drawdown': 'Drawdown',
    'numberOfTrades': 'Number of trades',
    'tradesCount': 'Total Trades',
    'currentCopiers': 'Current Copiers',
    'winningTrades': 'Winning Trades',
    'maxDrawdown': 'Max. Drawdown',
    'noOfViews': 'No. of views',
    'compareLeaders': 'Compare Leaders',
    'viewMoreParams': 'View more parameters',
    'minimizeParameters': 'Minimize parameters',
    'remove': 'Remove',
    'comparisonCategories': 'Comparison Categories',
    'followersCount': 'Followers Count',
    'copyFrom': 'Copy From',
    'leaderPerformance': 'Leader performance',
    'oneYearGain': '1 Year Gain',
    'lastSevenDays': 'Last 7d',
    'performance': 'Performance',
    'highest': 'Highest',
    'lowest': 'Lowest',
    'avgProfit': 'Avg. profit',
    'avgLoss': 'Avg. loss',
    'profitFactor': 'Profit factor',
    'addOrDragLeader': 'Add or drag a leader to compare from the list below',
    'profit': 'Profit',
    'portfolio': 'Portfolio',
    'currentPortfolio': 'Current Portfolio',
    'history': 'History',
    'perCentOfPort': '% of Port.',
    'initial': 'Initial',
    'inOut': 'moneyInOut',
    'pl_s': 'P/L (s)',
    'pl_percent': 'P/L %',
    'startCopy': 'Start copy',
    'currentValue': 'Current value',
    'portfolioSummary': 'Portfolio summary',
    'socialAllocation': 'Social Allocation',
    'invested': 'Invested',
    'openTime': 'Open time',
    'closeTime': 'Close time',
    'endValue': 'End value',
    'historySummary': 'History summary',
    'initialAmount': 'Initial amount',
    'endAmount': 'End amount',
    'buy': 'Buy',
    'sell': 'Sell',
    'buy_limit': 'Buy Limit',
    'buy_stop': 'Buy Stop',
    'sell_limit': 'Sell Limit',
    'sell_stop': 'Sell Stop',
    'openTrades': 'Open Trades',
    'closedTrades': 'Closed Trades',
    'tradesNotFound': 'There is no trading activity for the selected period',
    'resetFilter': 'Reset filter',
    'dataRefers': '* The following data refer to Social Trade only (Copied trades) and not to manual open trades',
    'exposure': 'Exposure',
    'allocation': 'Allocation',
    'others': 'Others',
    'youHaveNoLeaders': 'You have no active copied leaders in your social portfolio at this time',
    'discoverLeaders': 'Discover leaders',
    'favorites': 'Favorites',
    'favoritesList': 'Favorites list',
    'recentlyInvested': 'Recently invested',
    'recentlyViewed': 'Recently viewed',
    'myInvest': 'My invest',
    'leaderRate': 'Leader rate',
    'avgRisk': 'Avg. risk',
    'numOfCopiers': '# copiers',
    'copiersValue': 'Copiers value',
    'copyLeader': 'Copy Leader',
    'amount': 'Amount',
    'setBalanceDrop': 'Set Balance drops below',
    'stopCopyingIfCopyDrops': 'Stop copying if copy amount drops below',
    'stopCopyingIfAmountDrops': 'Stop copying if amount drops below',
    'copyOpenTrades': 'Copy open trades',
    'amountEqual1': 'The amount is equal to',
    'amountEqual2': 'which is your base currency',
    'minAmount': 'Minimum amount is',
    'maxAmount': 'Maximum amount is',
    'deposit': 'Deposit',
    'inOrderToOpen': 'in order to open this copy',
    'edit': 'Edit',
    'setBalanceDropsBelow': 'Set balance drops below',
    'leaderCopyFooter': 'Risk Warning: Contracts For Difference (CFD) are complex instruments and come with a high risk of losing money rapidly due to leverage. Certain percentage of retail investor accounts lose money when trading CFDs with this provider. You should consider whether you understand how CFDs work and whether you can afford to take the high risk of losing your money. Please read the full Risk Disclosure Statement.',
    'clearFilter': 'Clear Filter',
    'customSearch': 'Custom search',
    'loadMore': 'Load more',
    'loading': 'Loading',
    'seeAll': 'See all',
    'sinceTheBeginning': 'Since the beginning of activity',
    'addFunds': 'Add funds',
    'removeFunds': 'Remove funds',
    'setStopLoss': 'Set Stop Loss',
    'amountInvested': 'Amount Invested',
    'amountToAdd': 'Amount to add',
    'amountToRemove': 'Amount to remove',
    'stopLossRemains': 'Copy stop loss value remains',
    'pauseCopy': 'Pause Copy',
    'resumeCopy': 'Resume Copy',
    'continueCopy': 'Continue Copy',
    'stopCopy': 'Stop Copy',
    'pnl': 'P/L (%)',
    'addToFavorites': 'Add to favorites',
    'removeFromFavorites': 'Remove from favorites',
    'removeFundsText': '* Removing funds may affect your copy and trading results',
    'continue': 'Continue',
    'pauseCopyText': 'Once you pause copying, new trades will not be opened.',
    'profitAndLoss': 'Profit & Loss',
    'totalCurrentAmount': 'Total current amount',
    'copyActionSuccessfullyPerformed': 'copy action successfully performed',
    'theLeader': 'The leader',
    'leader': 'Leader',
    'nowAdded': 'is now added to your portfolio',
    'success': 'Success',
    'error': 'Error',
    'actionCouldnotBePerformed': 'The action could not be completed due to an error.',
    'tryAgainLater': 'Please try again later.',
    'successfully': 'successfully',
    'toTheLeader': 'to the leader',
    'fromTheLeader': 'from the leader',
    'added': 'added',
    'removed': 'removed',
    'actionPaused': 'Copy action paused',
    'actionResumed': 'Copy action resumed',
    'temporarilyPaused': 'is temporarily paused',
    'returnedToCopy': 'returned to be copied',
    'stopCopyText': 'Once you stop copying this investor all copied positions will be closed',
    'actionStopped': 'Copy action stopped',
    'noCopied': 'is no longer copied',
    'positionsClosed': 'All copied positions are now closed',
    'updatedSuccessfully': 'Updated successfully',
    'currentInvestmentPL': 'Current investment P/L',
    'lifetime': 'Lifetime',
    'gainLastMonth': 'Gain (last month)',
    'absoluteGain': 'Absolute Gain',
    'numberOfViews': 'Number of views',
    'waitingForRival': 'Waiting for a rival...',
    'detach': 'Detach',
    'only5CanCompare': 'Only 5 leaders can be compared at a time',
    'removeFromComparing': 'Remove from comparing',
    'addToCompare': 'Add to compare',

    'messages': {
        'ERR_APP': 'Something went wrong. Please try again later',
        'ERR_UNKNOWN': 'Unknown error. Please try again later',
        'ERR_SYSTEM': 'System error. Please try again later',

        'INVALID_RESPONSE': 'Invalid server response',
        'REQUEST_TIMEOUT': 'Server response is timed out',

        'ERR_AUTH': 'Invalid authorization credentials',
        'ERR_AUTH_SESSION': 'Invalid authorization credentials',
        'ERR_AUTH_TOKEN': 'Invalid authorization credentials',
        'ERR_AUTH_IP': 'Authorization failed. Your IP is not whitelisted',
        'ERR_AUTH_EXPIRED': 'Authorization failed. Your token is expired',

        'ERR_PERMISSIONS': 'Your have no permissions to perform this action',

        'ERR_VALIDATION': 'One or more parameters are not correct',
        'ERR_VALIDATION_NOT_OWNED_BY_BRAND': 'This trader is not owned by your brand',
        'ERR_VALIDATION_SAME': 'Operation can not be performed on the same trader you`re logged in',

        'ERR_EXISTS': 'Record already exists',
        'ERR_EXISTS_TRADER': 'Trader or leader is already exist',
        'ERR_EXISTS_FOLLOW': 'This leader is already copied by',

        'ERR_NOT_FOUND': 'Record is not found',
        'ERR_NOT_FOUND_TRADER': 'Trader or leader is not found',
        'ERR_NOT_FOUND_TRADING_ACCOUNT': 'Trading account is not found'
    },
    'hints': {
        'verifiedUser': 'Hint for verified user',
        'mostCopied': 'Hint for most copied',
        'absGain': 'Absolute gain (Abs. Gain) displays the percentage of gains or losses against all deposits. Thus, each new deposit will affect the absolute gain.<br /><br />Abs.Gain = (Total PnL / Total Deposits) * 100',
        'avgTradeLength': 'Open trades duration - the average time that the trader\'s position is held open.',
        'risk': 'Trade risk evaluation ranked with 1-10 scale, 10 representing the highest risk score.',
        'riskScore': 'Trade risk evaluation ranked with 1-10 scale, 10 representing the highest risk score.',
        'gain': 'Gain is a time-frame-based trading performance indicator that does not affect by balance changes outside of the trading activity.<br /><br />Gain = Time-frame sum (Trade closed PnL / Initial deposit * 100)',
        'statistic': 'Leader\'s trading statistics for the entire period of trading activity:<br />' +
            '- Trades: total number of executed trades<br />' +
            '- Profitable: percent of profitable trades<br />' +
            '- Average profit and loss<br />' +
            '- Profit factor: total profit divided by the total loss (commissions included)<br />' +
            '- Assets: percentage of trading activities by market type',
        'assets': 'Trading activity segmentation by markets - both open and closed orders.',
        'investedCapital': 'Daily summary of all funds allocated to this Leader by users that copied his trading activity (in USD).',
        'followersCount': 'A total of all traders that are actively copying this Leader\'s trading activity.',
        'popularity': 'Leader\'s personal profile views count.',
        'tradedAssets': 'Leader\'s closed orders aggregated by market assets.',
        'favored': 'All traders that marked this Leader as a Favorite.',
        'drawdown': 'Drawdown is the balance highest drop from a peak (highest point - HP) to a valley (lowest point - LP) in percentage.<br /><br />Drawdown = (Highest Point - Lowest point) / Highest point',
        'copyOpenTrades': 'The Leader\'s open positions will be opened at the current market rates in your account, if the market is closed, at the rate once the market opens.',
        'lifetime': 'Lifetime is a time period that a trading account exists.',
        'tradesCount': 'Total Trades',
        'avgWin': 'Winning Trades is a trader\'s number of money-making trades.',
        'registrationDate': 'Active Since is a starting date for the trader\'s trading activity.',
        'lastTradeDate': 'Last Active is a time period from the trader\'s last trading activity.',
    },
    'stopLossHasBeenReached': 'Stop-loss has been reached on this copy and it automatically paused',
    'stopLossReached': 'Stop-loss has been reached',
    'howToProceed': 'Please choose how to proceed',
    'editStopLoss': 'Edit Stop loss',

    'noResults': 'No results found for the selected filters',
    'tryToChangeFilter': 'Try to change your filter restriction or clear your filter settings',
    'clearFilterSettings': 'Clear filter settings',
    'openTradesWillBeCopied': 'Open trades will be copied from the Leader under the current market conditions and rates of the assets.',
    'poweredBy': 'Powered by',
    'recentlyClosedAssets': 'Recently Closed Traded Assets',
    'allAssets': 'All assets',
    'theLeaderHasNoOpenTrades': 'The leader has no open trades at the moment',
    'noTradingActivity': 'There is no trading activity to display for the selected asset/period',
    'errorWhileLoading': 'An error has occurred while loading this data',
    'current': 'Current',
    'depositToContinue': 'Deposit %value% in order to continue',
    'minimumStopLoss': 'The minimum value for stop-loss is 10% of the amount',
    'maximumStopLoss': 'The maximum value for stop-loss is 90% of the amount',

    // mobile message only
    'allCategories': 'All Categories',
    'editorsChoice': 'Editor\'s choice',
    'mostProfitable': 'Most Profitable',
    'trending': 'Trending',
    'topInvestors': 'Top Investors',
    'socialTrade': 'Social Trade',
    'glossary': 'Glossary',
    'noSufficientFunds': 'There are no sufficient funds in your account for order execution.',
    'stopLossUpdated': 'Stop loss updated',
    'stopLossUpdatedSuccessfully': 'Stop loss updated successfully',
    'fundsAdded': 'Funds are added',
    'fundsRemoved': 'Funds are removed',
    'successfullyAdded': `%amount% successfully added. <br/> to the leader %fullName%.`,
    'successfullyRemoved': `%amount% successfully removed. <br/> from the leader %fullName%.`,
    'stopLossFailed': 'Failed to update stop loss',
    'failedAddFunds': 'Failed to add funds',
    'failedRemoveFunds': 'Fail to remove funds',
    'stopLossProcessing': 'Setting stop loss is processing',
    'addingFundsProcessing': 'Adding funds is processing',
    'removingFundsProcessing': 'Removing funds is processing',
    'leaderIsCopied': 'Leader is copied',
    'copyActionStopped': 'Copy action stopped',
    'failedCopy': 'Failed to copy leader',
    'failedStop': 'Failed to stop copy',
    'copyProcessing': 'Copy is processing',
    'stopCopyProcessing': 'Stop copy is processing',
    'minStopLoss': 'Minimum stop loss is',
    'leaderDetails': 'Leader Details',
    'year': 'Year',
    'symbol': 'Symbol',
    'direction': 'Direction',
    'volume': 'Volume',
    'open': 'Open',
    'summary': 'Summary',
    'allowCopyTrading': 'Allow Copy Trading',
    'getStarted': 'Let\'s Get Started',
    'swipeToCompare': 'Swipe to compare',
    'change': 'Change %',
    'vs': 'VS',
    'numOfTrades': '# Trades',
    'numOfViews': '# Views',
    'selected': 'of %num% selected',
    'sortBy': 'Sort By',
    'newestFirst': 'Newest First',
    'oldestFirst': 'Oldest First',
    'filterBy': 'Filter By',
    'location': 'Location',
    'markets': 'Markets',
    'minimalGain': 'Minimal Gain',
    'clearAll': 'Clear All',
    'apply': 'Apply',

    'general': 'General',
    'absoluteGainDescription': `Absolute Gain (Abs. Gain) displays the percentage of gains or losses against all deposits. Thus,
                        each new deposit will affect the absolute gain.
                        Abs. Gain = (Total PnL / Total Deposits) * 100`,
    'averageTradeTime': 'Average Trade Time',
    'openTradesDescription': `Open trades duration - the average time that the trader’s position is held open.`,
    'riskDescription': `Trade risk evaluation ranked with 1-10 scale, 10 representing the highest risk score`,
    'investedCapitalDescription': `Daily summary of all funds allocated to this Leader by users that copied his trading activity
                        (in USD).`,
    'numberOfCopiers': 'Number of Copiers',
    'copiersDescription': `A total of all traders that are actively copying this Leader’s trading activity.`,
    'favoritesDescription': `All traders that marked this Leader as a Favorite.`,

    'showAllMostCopied': 'Show All Most Copied',
    'showAllEditorsChoice': 'Show All Editor\'s choice',
    'showAllMostProfitable': 'Show All Most Profitable',
    'showAllTrending': 'Show All Trending',
    'showAllTopInvestors': 'Show All Top Investors',
    'similarLeaders': 'Similar Leaders',
    'mySocialActivity': 'My Social Trading Activity'
})

appSocial.constant('SocialConfig', {
    api: {
        hosts: {
            dev: {
                url: {
                    http: 'https://social.pandats-api.com',
                    ws: 'wss://social.pandats-api.com/ws'
                }
            }
        }
    },
    defaultLang: 'en',
    fakeAvatars: true
})

appSocial.constant('SocialConstants', {
    countries: [
        {'country': 'Afghanistan', 'nationality': 'Afghan', 'code': 'AF'},
        {'country': 'Aland Islands', 'nationality': 'of the land Islands', 'code': 'AX'},
        {'country': 'Albania', 'nationality': 'Albanian', 'code': 'AL'},
        {'country': 'Algeria', 'nationality': 'Algerian', 'code': 'DZ'},
        {'country': 'American Samoa', 'nationality': 'American', 'code': 'AS'},
        {'country': 'Andorra', 'nationality': 'Andorran', 'code': 'AD'},
        {'country': 'Angola', 'nationality': 'Angolan', 'code': 'AO'},
        {'country': 'Anguilla', 'nationality': 'Anguillan', 'code': 'AI'},
        {'country': 'Antarctica', 'nationality': 'Antarctic', 'code': 'AQ'},
        {'country': 'Antigua and Barbuda', 'nationality': 'of Antigua and Barbuda', 'code': 'AG'},
        {'country': 'Argentina', 'nationality': 'Argentine', 'code': 'AR'},
        {'country': 'Armenia', 'nationality': 'Armenian', 'code': 'AM'},
        {'country': 'Aruba', 'nationality': 'Aruban', 'code': 'AW'},
        {'country': 'Australia', 'nationality': 'Australian', 'code': 'AU'},
        {'country': 'Austria', 'nationality': 'Austrian', 'code': 'AT'},
        {'country': 'Azerbaijan', 'nationality': 'Azerbaijani', 'code': 'AZ'},
        {'country': 'Bahamas', 'nationality': 'Bahamian', 'code': 'BS'},
        {'country': 'Bahrain', 'nationality': 'Bahraini', 'code': 'BH'},
        {'country': 'Bangladesh', 'nationality': 'Bangladeshi', 'code': 'BD'},
        {'country': 'Barbados', 'nationality': 'Barbadian', 'code': 'BB'},
        {'country': 'Belarus', 'nationality': 'Belarusian', 'code': 'BY'},
        {'country': 'Belgium', 'nationality': 'Belgian', 'code': 'BE'},
        {'country': 'Belize', 'nationality': 'Belizean', 'code': 'BZ'},
        {'country': 'Benin', 'nationality': 'Beninese', 'code': 'BJ'},
        {'country': 'Bermuda', 'nationality': 'Bermudian', 'code': 'BM'},
        {'country': 'Bhutan', 'nationality': 'Bhutanese', 'code': 'BT'},
        {'country': 'Bolivia', 'nationality': 'Bolivian', 'code': 'BO'},
        {'country': 'Bosnia and Herzegovina', 'nationality': 'of Bosnia and Herzegovina', 'code': 'BA'},
        {'country': 'Botswana', 'nationality': 'Botswanan', 'code': 'BW'},
        {'country': 'Bouvet Island', 'nationality': 'of Bouvet Island', 'code': 'BV'},
        {'country': 'Brazil', 'nationality': 'Brazilian', 'code': 'BR'},
        {'country': 'Brunei', 'nationality': 'Bruneian', 'code': 'BN'},
        {'country': 'Bulgaria', 'nationality': 'Bulgarian', 'code': 'BG'},
        {'country': 'Burkina Faso', 'nationality': 'Burkinabe', 'code': 'BF'},
        {'country': 'Burundi', 'nationality': 'Burundian', 'code': 'BI'},
        {'country': 'Cambodia', 'nationality': 'Cambodian', 'code': 'KH'},
        {'country': 'Cameroon', 'nationality': 'Cameroonian', 'code': 'CM'},
        {'country': 'Canada', 'nationality': 'Canadian', 'code': 'CA'},
        {'country': 'Cape Verde', 'nationality': 'Cape Verdean', 'code': 'CV'},
        {'country': 'Cayman Islands', 'nationality': 'Caymanian', 'code': 'KY'},
        {'country': 'Central African Republic', 'nationality': 'Central African', 'code': 'CF'},
        {'country': 'Chad', 'code': 'TD', 'nationality': 'Chadian'},
        {'country': 'Chile', 'nationality': 'Chilean', 'code': 'CL'},
        {'country': 'China', 'nationality': 'Chinese', 'code': 'CN'},
        {'country': 'Christmas Island', 'nationality': 'of Christmas Island', 'code': 'CX'},
        {'country': 'Cocos ', 'nationality': 'of the Cocos (Keeling) Islands', 'code': 'CC'},
        {'country': 'Colombia', 'nationality': 'Colombian', 'code': 'CO'},
        {'country': 'Comoros', 'nationality': 'Comorian', 'code': 'KM'},
        {'country': 'Congo', 'nationality': 'Congolese', 'code': 'CG'},
        {'country': 'Cook Islands', 'nationality': 'of the Cook Islands', 'code': 'CK'},
        {'country': 'Costa Rica', 'nationality': 'Costa Rican', 'code': 'CR'},
        {'country': 'Cte dIvoire', 'nationality': 'Ivorian', 'code': 'CI'},
        {'country': 'Croatia', 'nationality': 'Croatian', 'code': 'HR'},
        {'country': 'Cuba', 'nationality': 'Cuban', 'code': 'CU'},
        {'country': 'Cyprus', 'nationality': 'Cypriot', 'code': 'CY'},
        {'country': 'Czech Republic', 'nationality': 'Czech', 'code': 'CZ'},
        {'country': 'Denmark', 'nationality': 'Danish', 'code': 'DK'},
        {'country': 'Djibouti', 'nationality': 'of Djibouti', 'code': 'DJ'},
        {'country': 'Dominica', 'nationality': 'of Dominica', 'code': 'DM'},
        {'country': 'Dominican Republic', 'nationality': 'Dominican', 'code': 'DO'},
        {'country': 'Ecuador', 'nationality': 'Ecuadorian', 'code': 'EC'},
        {'country': 'Egypt', 'nationality': 'Egyptian', 'code': 'EG'},
        {'country': 'El Salvador', 'nationality': 'Salvadorian; Salvadoran', 'code': 'SV'},
        {'country': 'Equatorial Guinea', 'nationality': 'of Equatorial Guinea', 'code': 'GQ'},
        {'country': 'Eritrea', 'nationality': 'Eritrean', 'code': 'ER'},
        {'country': 'Estonia', 'nationality': 'Estonian', 'code': 'EE'},
        {'country': 'Ethiopia', 'nationality': 'Ethiopian', 'code': 'ET'},
        {'country': 'Faeroe Islands', 'nationality': 'Faeroese', 'code': 'FO'},
        {'country': 'Falkland Islands', 'nationality': 'of the Falkland Islands', 'code': 'FK'},
        {'country': 'Fiji', 'nationality': 'Fijian', 'code': 'FJ'},
        {'country': 'Finland', 'nationality': 'Finnish', 'code': 'FI'},
        {'country': 'France', 'nationality': 'French', 'code': 'FR'},
        {'country': 'French Guiana', 'nationality': 'Guianese', 'code': 'GF'},
        {'country': 'French Polynesia', 'nationality': 'Polynesian', 'code': 'PF'},
        {'country': 'Gabon', 'nationality': 'Gabonese', 'code': 'GA'},
        {'country': 'Gambia', 'nationality': 'Gambian', 'code': 'GM'},
        {'country': 'Georgia', 'nationality': 'Georgian', 'code': 'GE'},
        {'country': 'Germany', 'nationality': 'German', 'code': 'DE'},
        {'country': 'Ghana', 'nationality': 'Ghanaian', 'code': 'GH'},
        {'country': 'Gibraltar', 'nationality': 'Gibraltarian', 'code': 'GI'},
        {'country': 'Greece', 'nationality': 'Greek', 'code': 'GR'},
        {'country': 'Greenland', 'nationality': 'Greenlandic', 'code': 'GL'},
        {'country': 'Grenada', 'nationality': 'Grenadian', 'code': 'GD'},
        {'country': 'Guadeloupe', 'nationality': 'Guadeloupean', 'code': 'GP'},
        {'country': 'Guam', 'nationality': 'Guamanian', 'code': 'GU'},
        {'country': 'Guatemala', 'nationality': 'Guatemalan', 'code': 'GT'},
        {'country': 'Guernsey', 'nationality': 'Guernsey', 'code': 'GG'},
        {'country': 'Guinea', 'nationality': 'Guinean', 'code': 'GN'},
        {'country': 'Guinea-Bissau', 'nationality': 'of Guinea-Bissau', 'code': 'GW'},
        {'country': 'Guyana', 'nationality': 'Guyanese', 'code': 'GY'},
        {'country': 'Haiti', 'nationality': 'Haitian', 'code': 'HT'},
        {'country': 'Honduras', 'nationality': 'Honduran', 'code': 'HN'},
        {'country': 'Hong Kong', 'nationality': 'Hong Kong Chinese', 'code': 'HK'},
        {'country': 'Hungary', 'nationality': 'Hungarian', 'code': 'HU'},
        {'country': 'Iceland', 'nationality': 'Icelandic', 'code': 'IS'},
        {'country': 'India', 'nationality': 'Indian', 'code': 'IN'},
        {'country': 'Indonesia', 'nationality': 'Indonesian', 'code': 'ID'},
        {'country': 'Iran', 'nationality': 'Iranian', 'code': 'IR'},
        {'country': 'Iraq', 'nationality': 'Iraqi', 'code': 'IQ'},
        {'country': 'Ireland', 'nationality': 'Irish', 'code': 'IE'},
        {'country': 'Isle of Man', 'nationality': 'Manx', 'code': 'IM'},
        {'country': 'Israel', 'nationality': 'Israeli', 'code': 'IL'},
        {'country': 'Italy', 'nationality': 'Italian', 'code': 'IT'},
        {'country': 'Jamaica', 'nationality': 'Jamaican', 'code': 'JM'},
        {'country': 'Japan', 'nationality': 'Japanese', 'code': 'JP'},
        {'country': 'Jersey', 'nationality': 'Jersey', 'code': 'JE'},
        {'country': 'Jordan', 'nationality': 'Jordanian', 'code': 'JO'},
        {'country': 'Kazakhstan', 'nationality': 'Kazakh', 'code': 'KZ'},
        {'country': 'Kenya', 'nationality': 'Kenyan', 'code': 'KE'},
        {'country': 'Kiribati', 'nationality': 'Kiribatian', 'code': 'KI'},
        {'country': 'Kuwait', 'nationality': 'Kuwaiti', 'code': 'KW'},
        {'country': 'Kyrgyzstan', 'nationality': 'Kyrgyz', 'code': 'KG'},
        {'country': 'Laos', 'nationality': 'Lao; Laotian', 'code': 'LA'},
        {'country': 'Latvia', 'nationality': 'Latvian', 'code': 'LV'},
        {'country': 'Lebanon', 'nationality': 'Lebanese', 'code': 'LB'},
        {'country': 'Lesotho', 'nationality': 'of Lesotho', 'code': 'LS'},
        {'country': 'Liberia', 'nationality': 'Liberian', 'code': 'LR'},
        {'country': 'Libya', 'nationality': 'Libyan', 'code': 'LY'},
        {'country': 'Liechtenstein', 'nationality': 'of Liechtenstein', 'code': 'LI'},
        {'country': 'Lithuania', 'nationality': 'Lithuanian', 'code': 'LT'},
        {'country': 'Luxembourg', 'nationality': 'Luxembourgish', 'code': 'LU'},
        {'country': 'Madagascar', 'nationality': 'Malagasy', 'code': 'MG'},
        {'country': 'Malawi', 'nationality': 'Malawian', 'code': 'MW'},
        {'country': 'Malaysia', 'nationality': 'Malaysian', 'code': 'MY'},
        {'country': 'Maldives', 'nationality': 'Maldivian', 'code': 'MV'},
        {'country': 'Mali', 'nationality': 'Malian', 'code': 'ML'},
        {'country': 'Malta', 'nationality': 'Maltese', 'code': 'MT'},
        {'country': 'Marshall Islands', 'nationality': 'Marshallese', 'code': 'MH'},
        {'country': 'Martinique', 'nationality': 'Martinican', 'code': 'MQ'},
        {'country': 'Mauritania', 'nationality': 'Mauritanian', 'code': 'MR'},
        {'country': 'Mauritius', 'nationality': 'Mauritian', 'code': 'MU'},
        {'country': 'Mayotte', 'nationality': 'Mahoran', 'code': 'YT'},
        {'country': 'Mexico', 'nationality': 'Mexican', 'code': 'MX'},
        {'country': 'Micronesia', 'nationality': 'of Micronesia', 'code': 'FM'},
        {'country': 'Moldova', 'nationality': 'Moldovan', 'code': 'MD'},
        {'country': 'Monaco', 'nationality': 'Monegasque', 'code': 'MC'},
        {'country': 'Mongolia', 'nationality': 'Mongolian', 'code': 'MN'},
        {'country': 'Montenegro', 'nationality': 'Montenegrin', 'code': 'ME'},
        {'country': 'Montserrat', 'nationality': 'Montserratian', 'code': 'MS'},
        {'country': 'Morocco', 'nationality': 'Moroccan', 'code': 'MA'},
        {'country': 'Mozambique', 'nationality': 'Mozambican', 'code': 'MZ'},
        {'country': 'Namibia', 'nationality': 'Namibian', 'code': 'NA'},
        {'country': 'Nauru', 'nationality': 'Nauruan', 'code': 'NR'},
        {'country': 'Nepal', 'nationality': 'Nepalese', 'code': 'NP'},
        {'country': 'Netherlands', 'nationality': 'Dutch', 'code': 'NL'},
        {'country': 'New Caledonia', 'nationality': 'New Caledonian', 'code': 'NC'},
        {'country': 'New Zealand', 'nationality': 'of New Zealand', 'code': 'NZ'},
        {'country': 'Nicaragua', 'nationality': 'Nicaraguan', 'code': 'NI'},
        {'country': 'Niger', 'nationality': 'Nigerien', 'code': 'NE'},
        {'country': 'Nigeria', 'nationality': 'Nigerian', 'code': 'NG'},
        {'country': 'Niue', 'nationality': 'Niuean', 'code': 'NU'},
        {'country': 'Norfolk Island', 'nationality': 'of Norfolk Island', 'code': 'NF'},
        {'country': 'Norway', 'nationality': 'Norwegian', 'code': 'NO'},
        {'country': 'Oman', 'nationality': 'Omani', 'code': 'OM'},
        {'country': 'Pakistan', 'nationality': 'Pakistani', 'code': 'PK'},
        {'country': 'Palau', 'nationality': 'Palauan', 'code': 'PW'},
        {'country': 'Panama', 'nationality': 'Panamanian', 'code': 'PA'},
        {'country': 'Paraguay', 'nationality': 'Paraguayan', 'code': 'PY'},
        {'country': 'Peru', 'nationality': 'Peruvian', 'code': 'PE'},
        {'country': 'Philippines', 'nationality': 'Philippine', 'code': 'PH'},
        {'country': 'Pitcairn Islands', 'nationality': 'Pitcairner', 'code': 'PN'},
        {'country': 'Poland', 'nationality': 'Polish', 'code': 'PL'},
        {'country': 'Portugal', 'nationality': 'Portuguese', 'code': 'PT'},
        {'country': 'Puerto Rico', 'nationality': 'Puerto Rican', 'code': 'PR'},
        {'country': 'Qatar', 'nationality': 'Qatari', 'code': 'QA'},
        {'country': 'Runion', 'nationality': 'Reunionese', 'code': 'RE'},
        {'country': 'Romania', 'nationality': 'Romanian', 'code': 'RO'},
        {'country': 'Russia', 'nationality': 'Russian', 'code': 'RU'},
        {'country': 'Rwanda', 'nationality': 'Rwandan; Rwandese', 'code': 'RW'},
        {'country': 'Saint Barthlemy', 'nationality': 'of Saint Barthlemy', 'code': 'BL'},
        {'country': 'Saint Lucia', 'nationality': 'Saint Lucian', 'code': 'LC'},
        {'country': 'Saint Martin', 'nationality': 'of Saint Martin', 'code': 'MF'},
        {'country': 'Samoa', 'nationality': 'Samoan', 'code': 'WS'},
        {'country': 'San Marino', 'nationality': 'of San Marino', 'code': 'SM'},
        {'country': 'Saudi Arabia', 'nationality': 'Saudi Arabian', 'code': 'SA'},
        {'country': 'Senegal', 'nationality': 'Senegalese', 'code': 'SN'},
        {'country': 'Serbia', 'nationality': 'Serbian', 'code': 'RS'},
        {'country': 'Seychelles', 'nationality': 'of Seychelles', 'code': 'SC'},
        {'country': 'Sierra Leone', 'nationality': 'Sierra Leonean', 'code': 'SL'},
        {'country': 'Singapore', 'nationality': 'Singaporean', 'code': 'SG'},
        {'country': 'Slovakia', 'nationality': 'Slovak; Slovakian', 'code': 'SK'},
        {'country': 'Slovenia', 'nationality': 'Slovenian', 'code': 'SL'},
        {'country': 'Solomon Islands', 'nationality': 'of the Solomon Islands', 'code': 'SB'},
        {'country': 'Somalia', 'nationality': 'Somali; Somalian', 'code': 'SO'},
        {'country': 'South Africa', 'nationality': 'South African', 'code': 'ZA'},
        {'country': 'South Korea', 'nationality': 'South Korean', 'code': 'SK'},
        {'country': 'South Sudan', 'nationality': 'South Sudanese', 'code': 'SS'},
        {'country': 'Spain', 'nationality': 'Spanish', 'code': 'ES'},
        {'country': 'Sri Lanka', 'nationality': 'Sri Lankan', 'code': 'LK'},
        {'country': 'Sudan', 'nationality': 'Sudanese', 'code': 'SD'},
        {'country': 'Suriname', 'nationality': 'Surinamese', 'code': 'SR'},
        {'country': 'Swaziland', 'nationality': 'Swazi', 'code': 'CH'},
        {'country': 'Sweden', 'nationality': 'Swedish', 'code': 'SE'},
        {'country': 'Switzerland', 'nationality': 'Swiss', 'code': 'CH'},
        {'country': 'Syria', 'nationality': 'Syrian', 'code': 'SY'},
        {'country': 'Taiwan', 'nationality': 'Taiwanese', 'code': 'TW'},
        {'country': 'Tajikistan', 'nationality': 'Tajik', 'code': 'TJ'},
        {'country': 'Tanzania', 'nationality': 'Tanzanian', 'code': 'TZ'},
        {'country': 'Thailand', 'nationality': 'Thai', 'code': 'BI'},
        {'country': 'Timor-Leste', 'nationality': 'East Timorese', 'code': 'TL'},
        {'country': 'Togo', 'nationality': 'Togolese', 'code': 'TG'},
        {'country': 'Tokelau', 'nationality': 'Tokelauan', 'code': 'TK'},
        {'country': 'Tonga', 'nationality': 'Tongan', 'code': 'TO'},
        {'country': 'Trinidad and Tobago', 'nationality': 'of Trinidad andTobago', 'code': 'TT'},
        {'country': 'Tunisia', 'nationality': 'Tunisian', 'code': 'TN'},
        {'country': 'Turkey', 'nationality': 'Turkish', 'code': 'TR'},
        {'country': 'Turkmenistan', 'nationality': 'Turkmen', 'code': 'TM'},
        {'country': 'Tuvalu', 'nationality': 'Tuvaluan', 'code': 'TV'},
        {'country': 'Uganda', 'nationality': 'Ugandan', 'code': 'UG'},
        {'country': 'Ukraine', 'nationality': 'Ukrainian', 'code': 'UA'},
        {'country': 'United Arab Emirates', 'nationality': 'Emirian', 'code': 'AE'},
        {'country': 'United Kingdom', 'nationality': 'British', 'code': 'GB'},
        {'country': 'United States', 'nationality': 'American', 'code': 'US'},
        {'country': 'Uruguay', 'nationality': 'Uruguayan', 'code': 'UY'},
        {'country': 'Uzbekistan', 'nationality': 'Uzbek', 'code': 'UZ'},
        {'country': 'Vanuatu', 'nationality': 'Vanuatuan', 'code': 'VU'},
        {'country': 'Venezuela', 'nationality': 'Venezuelan', 'code': 'VE'},
        {'country': 'Vietnam', 'nationality': 'Vietnamese', 'code': 'VN'},
        {'country': 'Western Sahara', 'nationality': 'Sahrawi', 'code': 'EH'},
        {'country': 'Yemen', 'nationality': 'Yemeni', 'code': 'YE'},
        {'country': 'Zambia', 'nationality': 'Zambian', 'code': 'ZM'},
        {'country': 'Zimbabwe', 'nationality': 'Zimbabwean', 'code': 'ZW'}
    ],
    symbols: {
        currencySymbols: {
            USD: '$',
            EUR: '€',
            GBP: '£',
            AUD: 'A$',
            CAD: 'CA$',
            NZD: 'NZ$',
            SGD: '$',
            JPY: '¥',
            RUB: '₽',
            TRY: '₺',
            CNY: '¥',
            BRL: 'R$',
            CHF: 'CHF',
            BTC: 'Ƀ',
            LTC: 'Ł',
            XRP: 'XRP',
            BCH: 'BCH',
            ETH: 'ETH'
        },
        symbolSubst: {
            hkd: 'hk',
            afn: 'af',
            all: 'al',
            dzd: 'dz',
            xcd: 'ai',
            ars: 'ar',
            amd: 'am',
            ang: 'aw',
            azn: 'az',
            bsd: 'bs',
            bhd: 'bh',
            bdt: 'bd',
            bbd: 'bb',
            byr: 'by',
            bzd: 'bz',
            xof: 'bj',
            bmd: 'bm',
            inr: 'in',
            bob: 'bo',
            bwp: 'bw',
            nok: 'bv',
            brl: 'br',
            bnd: 'bn',
            bgn: 'bg',
            bif: 'bi',
            khr: 'kh',
            xaf: 'cm',
            cve: 'cv',
            kyd: 'ky',
            clp: 'cl',
            cny: 'cn',
            cop: 'co',
            kmf: 'km',
            cdf: 'cd',
            crc: 'cr',
            hrk: 'hr',
            cup: 'cu',
            cyp: 'cy',
            czk: 'cz',
            dkk: 'dk',
            djf: 'dj',
            dop: 'do',
            idr: 'tp',
            ecs: 'ec',
            egp: 'eg',
            svc: 'sv',
            etb: 'er',
            eek: 'ee',
            fkp: 'fk',
            fjd: 'fj',
            xpf: 'pf',
            gmd: 'gm',
            gel: 'ge',
            gip: 'gi',
            gtq: 'gt',
            gnf: 'gn',
            gyd: 'gy',
            htg: 'ht',
            hnl: 'hn',
            huf: 'hu',
            isk: 'is',
            irr: 'ir',
            iqd: 'iq',
            ils: 'il',
            jmd: 'jm',
            jod: 'jo',
            kzt: 'kz',
            kes: 'ke',
            kpw: 'kp',
            krw: 'kr',
            kwd: 'kw',
            kgs: 'kg',
            lak: 'la',
            lvl: 'lv',
            lbp: 'lb',
            lsl: 'ls',
            lrd: 'lr',
            lyd: 'ly',
            ltl: 'lt',
            mop: 'mo',
            mkd: 'mk',
            mga: 'mg',
            mwk: 'mw',
            myr: 'my',
            mvr: 'mv',
            mtl: 'mt',
            mro: 'mr',
            mur: 'mu',
            mxn: 'mx',
            mdl: 'md',
            mnt: 'mn',
            mad: 'ma',
            mzn: 'mz',
            mmk: 'mm',
            nad: 'na',
            npr: 'np',
            nio: 'ni',
            ngn: 'ng',
            omr: 'om',
            pkr: 'pk',
            pab: 'pa',
            pgk: 'pg',
            pyg: 'py',
            pen: 'pe',
            php: 'ph',
            pln: 'pl',
            qar: 'qa',
            ron: 'ro',
            rub: 'ru',
            rwf: 'rw',
            std: 'st',
            sar: 'sa',
            scr: 'sc',
            sll: 'sl',
            sgd: 'sg',
            skk: 'sk',
            sbd: 'sb',
            sos: 'so',
            zar: 'za',
            lkr: 'lk',
            sdg: 'sd',
            srd: 'sr',
            szl: 'sz',
            sek: 'se',
            syp: 'sy',
            twd: 'tw',
            tjs: 'tj',
            tzs: 'tz',
            thb: 'th',
            top: 'to',
            ttd: 'tt',
            tnd: 'tn',
            try: 'try',
            tmt: 'tm',
            ugx: 'ug',
            uah: 'ua',
            aed: 'ae',
            uyu: 'uy',
            uzs: 'uz',
            vuv: 'vu',
            vef: 've',
            vnd: 'vn',
            yer: 'ye',
            zmk: 'zm',
            zwd: 'zw',
            aoa: 'ao',
            aqd: 'aq',
            bam: 'ba',
            ghs: 'gh',
            ggp: 'gg',
            rsd: 'rs'
        },
    },
    orderVolumes: [
        .001,
        .002,
        .003,
        .004,
        .005,
        .006,
        .007,
        .008,
        .009,
        .01,
        .02,
        .03,
        .04,
        .05,
        .06,
        .07,
        .08,
        .09,
        .1,
        .2,
        .3,
        .4,
        .5,
        .6,
        .7,
        .8,
        .9,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
    ],
    markets: [
        {id: 'Currencies', label: 'forex'},
        {id: 'Crypto', label: 'crypto'},
        {id: 'ETFs', label: 'etfs'},
        {id: 'Commodities', label: 'commodities'},
        {id: 'Stocks', label: 'stocks'},
        {id: 'Indices', label: 'indices'}
    ],
    risks: [
        {id: '0', label: 'low', range: [1, 3]},
        {id: '1', label: 'medium', range: [4, 6]},
        {id: '2', label: 'high', range: [7, 10]},
    ],
    dateRanges: [
        {id: 'currentMonth', label: 'currentMonth'},
        {id: 'lastMonth', label: 'lastMonth'},
        {id: 'lastTwoMonth', label: 'lastTwoMonth'},
        // {id: 'currentQuarter', label: 'currentQuarter'},
        {id: 'lastThreeMonth', label: 'lastThreeMonth'},
        {id: 'lastSixMonth', label: 'lastSixMonth'},
        {id: 'thisYear', label: 'thisYear'},
        {id: 'thisTwoYears', label: 'thisTwoYears'}
    ],
    trades: [
        {id: '0', label: '0 - 10', range: [0, 10]},
        {id: '1', label: '10 - 50', range: [10, 50]},
        {id: '2', label: '50+', range: [50, 1000000]},
    ],
    tradeSizes: [
        {id: '0', label: '0% - 3%', range: [0, 3]},
        {id: '1', label: '3% - 10%', range: [3, 10]},
        {id: '2', label: '10% - 20%', range: [10, 20]},
        {id: '3', label: '30%+', range: [30, 10000]},
    ],
    actionsId: {
        0: 'buy',
        1: 'sell',
        2: 'buy_limit',
        3: 'sell_limit',
        4: 'buy_stop',
        5: 'sell_stop',
        6: 'balance',
        7: 'credit',
        8: 'pamm',
        9: 'correction',
        10: 'charge',
        11: 'commission',
        12: 'commission_daily',
        13: 'commission_monthly',
        14: 'agent_daily',
        15: 'agent_monthly',
        16: 'interestrate',
        17: 'buy_canceled',
        18: 'sell_canceled',
        19: 'dividend',
        20: 'dividend_franked',
        21: 'tax',
        22: 'agent',
        23: 'so_compensation',
        24: 'bonus'
    },
});

appSocial.service('SocialTypes', function () {
    /**
     * @enum {string}
     */
    const ApiRequestAction = {
        Login: 'trader/login',
        GetPortfolio: 'trader/portfolio',
        GetFeed: 'trader/feed',
        GetLeaders: 'trader/leaders',
        FollowByLeader: 'trader/follow',
        UpdateFollowState: 'trader/follow',
        UpdateFollowDeposit: 'trader/follow/deposit',
        UnfollowLeader: 'trader/follow',
        GetFavorites: 'trader/favorites',
        AddFavorite: 'trader/favorites',
        DeleteFavorite: 'trader/favorites',
        GetTrades: 'trader/trades',
        GetAggregatedTrades: 'trader/trades/aggregated',
        GetTradesByMarkets: 'trader/trades/markets',
        GetGainHistory: 'trader/history/gain',
        GetRiskHistory: 'trader/history/risk',
        GetDailyData: 'trader/history/daily',
        UpdateVisitCounter: 'trader/visit',
        GetConversionRates: 'trader/configuration/rates',
        GetMarkets: 'trader/configuration/markets',
        GetExposure: 'trader/trades/exposure',

        //WS
        WsLogin: 'post.login',
    }

    /**
     * @enum {string}
     */
    const ApiMethod = {
        Post: 'POST',
        Get: 'GET',
        Put: 'PUT',
        Delete: 'DELETE',
        WS: 'ws'
    }

    /**
     * @enum {string}
     */
    const HistoryGranularity = {
        Daily: 'day',
        Monthly: 'month',
    }

    /**
     * @enum {string}
     */
    const FieldOperation = {
        Match: 'match',
        NotMatch: 'notmatch',
        Contain: 'contain',
        NotContain: 'notcontain',
        GreaterThan: 'gt',
        GreaterEqual: 'ge',
        LessThan: 'lt',
        LessEqual: 'le'
    }

    /**
     * @enum {string}
     */
    const Op = {
        And: 'and',
        Or: 'or'
    }

    /**
     * @enum {string}
     */
    const Dir = {
        Desc: 'desc',
        Asc: 'asc'
    }

    /**
     * @enum {string}
     */
    const FilterTag = {
        All: 'all',
        MostCopied: 'most-copied',
        EditorsChoice: 'editors-choice',
        Profitable: 'profitable',
        Trending: 'trending',
        Top: 'top',
        Similar: 'similar'
    }

    /**
     * @enum {string}
     */
    const FeedView = {
        Grid: 'grid',
        List: 'list'
    }

    /**
     * @enum {string}
     */
    const DateRange = {
        CurrentMonth: 'currentMonth',
        LastMonth: 'lastMonth',
        LastTwoMonths: 'lastTwoMonth',
        LastThreeMonths: 'lastThreeMonth',
        LastSixMonths: 'lastSixMonth',
        ThisYear: 'thisYear',
        TheseTwoYears: 'thisTwoYears',
        All: 'all'
    }

    /**
     * @enum {string}
     */
    const CopyAction = {
        StartCopy: 'startCopy',
        StopCopy: 'stopCopy',
        AddFunds: 'addFunds',
        RemoveFunds: 'removeFunds',
        Pause: 'pauseCopy',
        Resume: 'resumeCopy',
        SetStopLoss: 'setStopLoss',
        SetReachedStopLoss: 'setReachedStopLoss'
    }

    /**
     * @enum {string}
     */
    const AccountType = {
        NotAllowed: 'notAllowed',
        Allowed: 'Allowed',
        Limited: 'Limited'
    }

    /**
     * @enum {string}
     */
    const ChartType = {
        InvestedCapital: 'investedCapital',
        Copiers: 'copiers',
        Views: 'views'
    }

    /**
     * @enum {string}
     */
    const WidgetMode = {
        Open: 'open',
        Closed: 'closed'
    }

    /**
     * @enum {string}
     */
    const WidgetView = {
        Grid: 'grid',
        Chart: 'chart'
    }

    /**
     * @enum {string}
     */
    const WidgetStatus = {
        Success: 'success',
        Fail: 'fail',
        Empty: 'empty',
        Unknown: 'unknown',
        Loading: 'loading',
    }

    /**
     * @enum {string}
     */
    const CardMode = {
        Compare: 'compare'
    }

    /**
     * @enum {string}
     */
    const ValidationTypes = {
        MinAmount: 'minAmount',
        MaxAmount: 'maxAmount',
        Balance: 'balance'
    }

    /**
     * @name SocialTypes
     * @class
     */
    return {
        ApiRequestAction,
        ApiMethod,
        HistoryGranularity,
        FieldOperation,
        Op,
        Dir,
        FilterTag,
        FeedView,
        DateRange,
        CopyAction,
        AccountType,
        ChartType,
        WidgetMode,
        WidgetView,
        WidgetStatus,
        CardMode,
        ValidationTypes
    }
})

appSocial.controller('leaderDetailsPage', [
    '$scope', '$state', '$ionicModal', 'SocialLocaleService', 'SocialUtils', 'trader', 'SocialActionService',
    'SocialTypes', 'SocialFavoriteService', 'LeadersCompareService',
    function ($scope, $state, $ionicModal, SocialLocaleService, SocialUtils, trader, SocialActionService,
              SocialTypes, SocialFavoriteService, LeadersCompareService) {

        const {CopyAction} = SocialTypes;

        class LeaderDetailsPage {
            constructor() {
                this.translation = SocialLocaleService.translation;
                this.$scope = $scope;

                /**
                 * @type {SocialUtils}
                 */
                this.utils = SocialUtils;

                /**
                 * @type {SocialActionService}
                 */
                this.actionService = SocialActionService;

                /**
                 * @type {Trader}
                 */
                this.trader = trader;

                /**
                 * @type {SocialFavoriteService}
                 */
                this.favoriteService = SocialFavoriteService;

                /**
                 * @type {LeadersCompareService}
                 */
                this.compareService = LeadersCompareService;

                this.types = SocialTypes;
                this.action = CopyAction;

                this.contextMenuConfig = {
                    top: (menu) => {
                        return '35px';
                    },
                }
            }

            /**
             * @param {Trader} trader
             * @return {*}
             */
            copy(trader) {
                const {CopyAction} = this.types;
                if (trader.isFollowed) {
                    return this.utils.navigate('root.app.socialFunds', {id: trader.id, action: CopyAction.AddFunds})
                }

                this.actionService.stateCheck({trader, action: CopyAction.StartCopy})
            }

            toggleFavorite() {
                this.favoriteService.toggleFavorite(this.trader);
            }

            /**
             * @param {CopyAction} action
             */
            callAction(action) {
                return this.actionService.callAction(action, this.trader);
            }

            compare() {
                if (!this.compareService.isTraderComparing(this.trader) && !this.compareService.limitReached) {
                    if (!this.compareService.isComparing) {
                        this.compareService.enableSelection();
                    }
                    this.compareService.add(this.trader);
                }
                this.utils.navigate('root.app.socialCompare');
            }
        }

        return new LeaderDetailsPage()
    }]);


appSocial.controller('errorPage', [
    '$scope', '$state', '$stateParams', '$timeout', 'SocialLocaleService',
    function ($scope, $state, $stateParams, $timeout, SocialLocaleService) {

        class ErrorPage {
            constructor() {
                this.translation = SocialLocaleService.translation;
                this.$scope = $scope;

                this.modal = {
                    isError: true,
                    textTitle: 'Something went wrong',
                    textContent: 'Please contact support',
                    actionText: 'Back',
                    back: 'root.app.assets',
                    state: false
                }

                $timeout(() => {
                    this.modal.state = true;
                })

                const error = this.parseError($stateParams);
                if (error) {
                    this.modal = _.merge(this.modal, error);
                }
            }

            parseError(param) {
                let error;
                try {
                    error = JSON.parse(param.err);
                } catch (e) {
                    console.log('Failed to parse state params: ', param)
                }
                return error;
            }
        }

        return new ErrorPage()
    }]);


appSocial.controller('leaderCopyPage', [
    '$scope', '$state', '$ionicModal', 'SocialLocaleService', 'SocialUtils', 'trader', 'SocialActionService', 'SocialTypes',
    function ($scope, $state, $ionicModal, SocialLocaleService, SocialUtils, trader, SocialActionService, SocialTypes) {
        class LeaderCopyPage {
            constructor() {
                this.translation = SocialLocaleService.translation;
                this.$scope = $scope;
                this.$state = $state;

                /**
                 * @type {SocialUtils}
                 */
                this.utils = SocialUtils;

                /**
                 * @type {SocialActionService}
                 */
                this.actionService = SocialActionService;

                this.actions = SocialTypes.CopyAction;

                this.trader = trader;
                this.action = $state.params.action || this.actions.StartCopy;

                this.modal = {
                    isError: false,
                    textTitle: '',
                    textContent: '',
                    state: false,
                    isProcess: false
                }

                this.validationError = null;
            }

            callAction() {
                // send to children component 'copy' event
                this.$scope.$broadcast(this.action);
            }

            onSuccess(amount) {
                this.modal.isProcess = false;

                this.modal.textTitle = (this.action === this.actions.StartCopy)
                    ? this.translation.leaderIsCopied
                    : this.translation.copyActionStopped;

                this.modal.textContent = (this.action === this.actions.StartCopy)
                    ? `$${amount} copy action successfully performed. <br/> 
                        The leader ${this.trader.fullname} is now added to your portfolio.`
                    : `The leader ${this.trader.fullname} is no longer copied. <br/>
                       All copied positions are now closed`;

                this.modal.actionText = this.translation.continue;

                this.modal.back = (this.action === this.actions.StartCopy)
                    ? {
                        state: 'root.app.socialLeader',
                        params: {id: this.trader.id}
                    }
                    : {
                        state: 'root.app.social'
                    }
            }

            onFail(error) {
                this.modal.isError = true;
                this.modal.state = true;
                this.modal.isProcess = false;
                this.modal.textTitle = (this.action === this.actions.StartCopy)
                    ? this.translation.failedCopy
                    : this.translation.failedStop;
                this.modal.textContent = this.translation.messages[error.data.type] || 'Something went wrong';
                this.modal.actionText = this.translation.continue;
            }

            onActionStart() {
                this.modal.isError = false;
                this.modal.state = true;
                this.modal.isProcess = true;
                this.modal.textTitle = (this.action === this.actions.StartCopy)
                    ? this.translation.copyProcessing
                    : this.translation.stopCopyProcessing;
            }

            onValidation(error) {
                this.validationError = error;
                console.log('validation', this.validationError)
            }

            deposit() {
                return this.utils.navigate('root.app.wallet');
            }
        }

        return new LeaderCopyPage()
    }]);


appSocial.controller('glossaryPage', [
    '$scope', '$state', '$ionicModal', 'SocialLocaleService', 'SocialUtils',
    function ($scope, $state, $ionicModal, SocialLocaleService, SocialUtils) {
        class GlossaryPage {
            constructor() {
                this.translation = SocialLocaleService.translation;
                this.$scope = $scope;
                this.$state = $state;

                /**
                 * @type {SocialUtils}
                 */
                this.utils = SocialUtils;

            }
        }

        return new GlossaryPage()
    }]);


appSocial.controller('leaderFundsPage', [
    '$scope', '$state', '$ionicModal', '$filter', 'SocialLocaleService', 'SocialUtils', 'trader', 'SocialActionService', 'SocialTypes',
    function ($scope, $state, $ionicModal, $filter, SocialLocaleService, SocialUtils, trader, SocialActionService, SocialTypes) {
        class LeaderFundsPage {
            constructor() {
                this.translation = SocialLocaleService.translation;
                this.$scope = $scope;
                this.$state = $state;

                /**
                 * @type {SocialUtils}
                 */
                this.utils = SocialUtils;

                /**
                 * @type {SocialActionService}
                 */
                this.actionService = SocialActionService;

                this.actions = SocialTypes.CopyAction;

                this.trader = trader;
                this.action = $state.params.action;

                this.currencyPipe = $filter('cryptoCurrency');

                this.modal = {
                    isError: false,
                    textTitle: '',
                    textContent: '',
                    state: false,
                    isProcess: false
                }

                this.validationError = null;
            }

            callAction() {
                // send to children component event
                this.$scope.$broadcast(this.action);
            }

            onSuccess(amount) {
                this.modal.isProcess = false;

                this.modal.textTitle = (this.action === this.actions.SetStopLoss)
                    ? this.translation.stopLossUpdated
                    : ((this.action === this.actions.AddFunds)
                        ? this.translation.fundsAdded
                        : this.translation.fundsRemoved);

                this.modal.textContent = (this.action === this.actions.SetStopLoss)
                    ? this.translation.stopLossUpdatedSuccessfully
                    : ((this.action === this.actions.AddFunds)
                        ? this.utils.renderTranslation(this.translation.successfullyAdded, {
                            amount: this.currencyPipe(amount, 'USD'),
                            fullName: this.trader.fullname
                        })
                        : this.utils.renderTranslation(this.translation.successfullyRemoved, {
                            amount: this.currencyPipe(amount, 'USD'),
                            fullName: this.trader.fullname
                        }))

                this.modal.actionText = this.translation.continue;

                this.modal.back = {
                    state: 'root.app.socialPortfolio',
                    params: {category: 'current', id: this.trader.id}
                }
            }

            onFail(error) {
                this.modal.isError = true;
                this.modal.state = true;
                this.modal.isProcess = false;
                this.modal.textTitle = (this.action === this.actions.SetStopLoss)
                    ? this.translation.stopLossFailed
                    : ((this.action === this.actions.AddFunds)
                        ? this.translation.failedAddFunds
                        : this.translation.failedRemoveFunds);

                this.modal.textContent = this.translation.messages[error.data.type] || 'Something went wrong';

                this.modal.actionText = this.translation.continue;
            }

            onActionStart() {
                this.modal.isError = false;
                this.modal.state = true;
                this.modal.isProcess = true;
                this.modal.textTitle =
                    (this.action === this.actions.SetStopLoss)
                        ? this.translation.stopLossProcessing
                        : ((this.action === this.actions.AddFunds)
                            ? this.translation.addingFundsProcessing
                            : this.translation.removingFundsProcessing);
            }

            onValidation(error) {
                this.validationError = error;
            }

            deposit() {
                return this.utils.navigate('root.app.wallet');
            }
        }

        return new LeaderFundsPage()
    }]);


appSocial.controller('leaderPausePage', [
    '$scope', '$state', '$ionicModal', 'SocialLocaleService', 'SocialUtils', 'trader', 'SocialActionService', 'SocialTypes',
    function ($scope, $state, $ionicModal, SocialLocaleService, SocialUtils, trader, SocialActionService, SocialTypes) {
        class LeaderPausePage {
            constructor() {
                this.translation = SocialLocaleService.translation;
                this.$scope = $scope;
                this.$state = $state;

                /**
                 * @type {SocialUtils}
                 */
                this.utils = SocialUtils;

                /**
                 * @type {SocialActionService}
                 */
                this.actionService = SocialActionService;

                this.actions = SocialTypes.CopyAction;

                this.trader = trader;
                this.action = $state.params.action;

                this.modal = {
                    isError: false,
                    textTitle: '',
                    textContent: '',
                    state: false,
                    isProcess: false
                }
            }

            callAction() {
                // send to children component event
                this.$scope.$broadcast(this.action);
            }

            onSuccess() {
                this.modal.isProcess = false;

                this.modal.textTitle = (this.action === this.actions.Pause)
                    ? 'Copy action paused'
                    : 'Copy action resumed';

                this.modal.textContent = (this.action === this.actions.Pause)
                    ? `The leader ${this.trader.fullname} <br/> is temporarily paused.`
                    : `The leader ${this.trader.fullname} <br/> returned to be copied.`

                this.modal.actionText = 'Continue';

                this.modal.back = {
                    state: 'root.app.socialPortfolio',
                    params: {category: 'current', id: this.trader.id}
                }
            }

            onFail(error) {
                this.modal.isError = true;
                this.modal.state = true;
                this.modal.isProcess = false;
                this.modal.textTitle = (this.action === this.actions.Pause)
                    ? 'Failed to pause'
                    : 'Failed to resume';
                this.modal.textContent = this.translation.messages[error.data.type] || 'Something went wrong';
                this.modal.actionText = 'Continue';
            }

            onActionStart() {
                this.modal.isError = false;
                this.modal.state = true;
                this.modal.isProcess = true;
                this.modal.textTitle =
                    (this.action === this.actions.Pause)
                        ? 'Pause copy is processing'
                        : 'Resume copy is processing';
            }
        }

        return new LeaderPausePage()
    }]);


appSocial.controller('leadersPage', ['$scope', '$state', '$ionicModal', 'SocialLocaleService', 'SocialUtils', 'LeadersCompareService',
    function ($scope, $state, $ionicModal, SocialLocaleService, SocialUtils, LeadersCompareService) {
        class LeadersPage {
            constructor() {
                this.translation = SocialLocaleService.translation;
                this.$scope = $scope;
                this.$state = $state;
                this.utils = SocialUtils;
                this.compareService = LeadersCompareService;

                this.categories = [
                    {
                        id: 'all',
                        title: 'allCategories',
                        active: true,
                        show: true
                    },
                    {
                        id: 'editors-choice',
                        title: 'editorsChoice',
                        active: false,
                        show: true
                    },
                    {
                        id: 'most-copied',
                        title: 'mostCopied',
                        active: false,
                        show: true
                    },
                    {
                        id: 'profitable',
                        title: 'mostProfitable',
                        active: false,
                        show: true
                    },
                    {
                        id: 'trending',
                        title: 'trending',
                        active: false,
                        show: true
                    },
                    {
                        id: 'top',
                        title: 'topInvestors',
                        active: false,
                        show: true
                    },
                    {
                        id: 'custom-search',
                        title: 'customSearch',
                        active: false,
                        show: false
                    }
                ];

                this.modal = null;

                const initialCategory = _.find(this.categories, {id: $state.params.category})
                if (initialCategory) {
                    this.toggleCategory(initialCategory)
                } else {
                    this.updateActiveCategory();
                }

                this.limit = 28;

                $scope.$on('$ionicView.beforeLeave', () => {
                    this.modal && this.modal.remove();
                })

                // $scope.$on('scroll.start', () => {
                //     console.log('start scroll');
                // });
                //
                // $scope.$on('scroll.stop', () => {
                //     console.log('stop scroll');
                // });

                this.isComparing = false;
            }

            initSearchModal() {
                const modal = $ionicModal.fromTemplate(`<leaders-search on-close="$ctrl.modal.hide()"></leaders-search>`, {
                    scope: this.$scope,
                    animation: 'slide-in-up'
                });
                modal.el.classList.add('search-modal-backdrop');
                modal.el.querySelector('.modal-wrapper').classList.add('search-modal');
                return modal;
            }

            toggleCategory(category) {
                console.log('Toggle category', category);
                this.categories.forEach(item => item.active = false);
                category.active = true;
                this.updateActiveCategory();
            }

            updateActiveCategory() {
                this.activeCategory = _.find(this.categories, {active: true});
            }

            openLeadersSearch() {
                if (!this.modal) {
                    this.modal = this.initSearchModal();
                }
                this.modal.show();
            }

            getCategoryById(id) {
                return _.find(this.categories, {id});
            }
        }

        return new LeadersPage()
    }]);


appSocial.controller('leadersComparePage', ['$scope', '$state', 'SocialLocaleService', 'SocialUtils', 'LeadersCompareService',
    function ($scope, $state, SocialLocaleService, SocialUtils, LeadersCompareService) {
        class LeadersComparePage {
            constructor() {
                this.translation = SocialLocaleService.translation;
                this.$scope = $scope;
                this.$state = $state;
                this.utils = SocialUtils;
                /**
                 * @type {LeadersCompareService}
                 */
                this.compareService = LeadersCompareService;

                this.category = {
                    id: 'custom-search',
                    title: 'customSearch',
                    active: false,
                    show: false
                }
            }
        }

        return new LeadersComparePage()
    }]);

appSocial.controller('portfolioPage', [
    '$scope', '$state', '$ionicModal', 'SocialLocaleService', 'SocialUtils', 'SocialActionService',
    function ($scope, $state, $ionicModal, SocialLocaleService, SocialUtils, SocialActionService) {
        class PortfolioPage {
            constructor() {
                this.translation = SocialLocaleService.translation;
                this.$scope = $scope;
                this.$state = $state;

                /**
                 * @type {SocialUtils}
                 */
                this.utils = SocialUtils;

                /**
                 * @type {SocialActionService}
                 */
                this.actionService = SocialActionService;

                this.modal = {
                    isError: false,
                    textTitle: '',
                    textContent: '',
                    state: false,
                    isProcess: false
                }

                this.categories = [
                    {
                        id: 'current',
                        title: 'Current Portfolio',
                        active: true,
                        show: true

                    },
                    {
                        id: 'favorites',
                        title: 'Favorites',
                        active: false,
                        show: true
                    },
                ];

                const initialCategory = _.find(this.categories, {id: $state.params.category})
                if (initialCategory) {
                    this.toggleCategory(initialCategory)
                } else {
                    this.updateActiveCategory();
                }

                // console.log('STATE:::', this.$state);
                // console.log('HISTORY:::', $ionicHistory);
            }

            toggleCategory(category) {
                this.categories.forEach(item => item.active = false);
                category.active = true;
                this.updateActiveCategory();
            }

            updateActiveCategory() {
                this.activeCategory = _.find(this.categories, {active: true});
            }


        }

        return new PortfolioPage()
    }]);


appSocial.controller('registrationPage', [
    '$scope', '$state', '$ionicModal', 'SocialLocaleService', 'SocialUtils', 'SocialActionService',
    function ($scope, $state, $ionicModal, SocialLocaleService, SocialUtils, SocialActionService) {
        class RegistrationPage {
            constructor() {
                this.translation = SocialLocaleService.translation;
                this.$scope = $scope;
                this.$state = $state;

                /**
                 * @type {SocialUtils}
                 */
                this.utils = SocialUtils;

                /**
                 * @type {SocialActionService}
                 */
                this.actionService = SocialActionService;

                this.terms = false;
            }

            register() {
                this.actionService.register();
            }
        }

        return new RegistrationPage()
    }]);


appSocial.filter('currencyConvert', ['SocialConfigurationService',
    function (SocialConfigurationService) {

        class CurrencyConvertPipe {
            constructor() {
                /**
                 * @type SocialConfigurationService
                 */
                this.configurationService = SocialConfigurationService;
            }

            convert(fromCurrency, toCurrency, amount) {
                let conversion;
                if (fromCurrency === toCurrency) {
                    return amount;
                }

                const rates = this.configurationService.get('conversionRates') || [];

                //nonUSD -> USD
                if (fromCurrency !== 'USD' && toCurrency === 'USD') {
                    conversion = _.find(rates, {currency: fromCurrency});
                    if (!conversion) {
                        console.warn(`Conversion currency not found. [${fromCurrency}] -> [${toCurrency}]`);
                        return amount;
                    }
                    return amount * conversion.rate;
                }

                //USD -> nonUSD
                if (fromCurrency === 'USD' && toCurrency !== 'USD') {
                    conversion = _.find(rates, {currency: toCurrency});
                    if (!conversion) {
                        console.warn(`Conversion currency not found. [${fromCurrency}] -> [${toCurrency}]`);
                        return amount;
                    }
                    return amount / conversion.rate;
                }


                //nonUSD -> nonUSD (conversion via USD rate)
                if (fromCurrency !== 'USD' && toCurrency !== 'USD') {
                    //convert src currency to USD
                    conversion = _.find(rates, {currency: fromCurrency});
                    if (!conversion) {
                        console.warn(`Conversion currency not found. [${fromCurrency}] -> [${toCurrency}]`);
                        return amount;
                    }
                    amount = amount * conversion.rate;

                    //convert USD to dst currency
                    conversion = _.find(rates, {currency: toCurrency});
                    if (!conversion) {
                        console.warn(`Conversion currency not found. [${fromCurrency}] -> [${toCurrency}]`);
                        return amount;
                    }
                    amount = amount / conversion.rate;

                    return amount;
                }

                console.warn(`Unpredictable state while converting currency [${fromCurrency}] -> [${toCurrency}]`);
            }
        }
        const pipeInstance = new CurrencyConvertPipe();

        return function (amount, from, to) {
            return pipeInstance.convert(from, to, amount);
        }
    }
])

appSocial.filter('duration', ['SocialLocaleService', 'moment',
    function (SocialLocaleService, moment) {
        const translation = SocialLocaleService.translation;
        return function (sec, format) {
            const duration = moment.duration(sec, 'seconds');
            const n = 24 * 60 * 60 * 1000;
            const days = Math.floor(duration.asDays());
            const hours = Math.floor(duration.asHours());
            const weeks = Math.floor(duration.asWeeks());
            const months = Math.floor(duration.asMonths());
            const minutes = Math.floor(duration.asMinutes());
            const seconds = Math.floor(duration.asSeconds());

            let str = '';

            if (format === 'exact') {
                str = moment.duration(sec, "seconds")
                    .format("d [days] hh:mm:ss")
                return str;
            }

            if (months > 0) {
                return `${months} ${months == 1 ? translation.month : translation.months}`;
            }

            if (weeks > 0) {
                return `${weeks} ${weeks == 1 ? translation.week : translation.weeks}`;
            }

            if (days > 0) {
                return `${days} ${days == 1 ? translation.day : translation.days}`;
            }

            if (hours > 0) {
                return `${hours} ${hours == 1 ? translation.hour : translation.hours}`;
            }

            if (minutes > 0) {
                return `${minutes} ${minutes == 1 ? translation.minute : translation.minutes}`;
            }

            if (seconds > 0) {
                return `${seconds} ${seconds == 1 ? translation.second : translation.seconds}`;
            }

            return str;
        }
    }]);

appSocial.filter('momentPipe', ['moment',
    function (moment) {

        return function (value, format, tz, param) {
            if (!value) {
                return '';
            }
            const _value = value.toString().length === 10 ? Number(value) * 1000 : value;
            const tzMoment = moment(_value);

            if (param && param === true) {
                return tzMoment.subtract(1, 'days').add(1, 'seconds').format(format);
            }
            return tzMoment.format(format);
        }
    }]);

appSocial.service('Trade', ['SocialConstants', function (SocialConstants) {
    /**
     * @name Trade
     * @class
     */
    class Trade {
        constructor(data = {}) {

            this.constants = SocialConstants;

            this.symbol = data.symbol;
            this.digits = data.digits;
            // this.digitsFormat = `1.${this.digits}-${this.digits}`;
            this.cmd = data.cmd;
            this.action = SocialConstants.actionsId[data.cmd];
            this.volume = data.volume;
            this.openTime = data.open_time;
            this.openPrice = data.open_price;
            this.stopLoss = data.sl;
            this.takeProfit = data.tp;
            this.closeTime = data.close_time;
            this.closePrice = data.close_price;
            this.profit = data.profit;
            this.userCurrency = data.user_currency;
            this.conversionRate = data.usd_converter; //to USD
            this.market = data.market;
            this.risk = data.risk;
            this.commissions = data.commissions;
            this.openVolume = data.open_volume;
            this.closeVolume = data.close_volume;
            this.spreadMoney = data.spread_money; //???
            this.markup = data.markup;
            this.taxes = data.taxes;
            this.swaps = data.swaps;
            this.duration = this.closeTime
                ? this.closeTime - this.openTime
                : Math.round(Date.now() / 1000) - this.openTime;
            this.change = data.change;

            // expanded/closed trade card
            this.expanded = false;

            // flags
            if (this.market === 'Crypto' || this.market === 'Currencies') {
                this.nameLeft = data.symbol.replace('/', '').slice(0, 3).toLowerCase();
                this.nameRight = data.symbol.replace('/', '').slice(3, 6).toLowerCase();
                const flagClass = 'flag-icon-';
                this.flagLeft = flagClass + this.getAssetCountry(this.nameLeft);
                this.flagRight = flagClass + this.getAssetCountry(this.nameRight);
            } else {
                this.flagFallback = 'todo';
            }
        }


        getAssetCountry(assetName) {
            return this.constants.symbols.symbolSubst.hasOwnProperty(assetName)
                ? this.constants.symbols.symbolSubst[assetName]
                : assetName;
        }
    }
    return Trade;
}])

appSocial.service('TradeAggregated', ['SocialConstants', function (SocialConstants) {
    /**
     * @name TradeAggregated
     * @class
     */
    class TradeAggregated {
        constructor(
            /**
             * @type {Trader}
             */
            trader,
            data = {}) {

            this.constants = SocialConstants;

            this.symbol = data.symbol;
            this.count = data.count;
            this.countPercentage = trader.tradesCount === 0 ? 0 : (this.count * 100) / trader.tradesCount;
            this.avgProfit = data.avg_profit;
            this.avgWinProfit = data.avg_win_profit;
            this.avgLossProfit = data.avg_loss_profit;
            this.market = data.market;

            // flags
            if (this.market === 'Crypto' || this.market === 'Currencies') {
                this.nameLeft = data.symbol.replace('/', '').slice(0, 3).toLowerCase();
                this.nameRight = data.symbol.replace('/', '').slice(3, 6).toLowerCase();
                const flagClass = 'flag-icon-';
                this.flagLeft = flagClass + this.getAssetCountry(this.nameLeft);
                this.flagRight = flagClass + this.getAssetCountry(this.nameRight);
            } else {
                this.flagFallback = 'todo';
            }
        }


        getAssetCountry(assetName) {
            return this.constants.symbols.symbolSubst.hasOwnProperty(assetName)
                ? this.constants.symbols.symbolSubst[assetName]
                : assetName;
        }
    }
    return TradeAggregated;
}])

appSocial.service('Trader', ['moment', 'SocialUtils', function (moment, SocialUtils) {
    /**
     * @name Trader
     * @class
     */
    class Trader {
        constructor(rawTrader = {}) {
            /**
             * @type {string}
             */
            this.id = rawTrader.id;
            this.init(rawTrader);
        }

        init(rawTrader = {}) {
            this.username = rawTrader.username;
            this.fullname = rawTrader.fullname;
            this.email = rawTrader.email;
            this.registrationDate = rawTrader.registration_date;
            this.avatar = rawTrader.avatar;
            this.isLeader = rawTrader.leader;
            this.country = rawTrader.country;
            this.currency = rawTrader.currency;

            this.balance = rawTrader.balance;
            this.equity = rawTrader.equity;
            this.margin = rawTrader.margin;
            this.marginFree = rawTrader.margin_free;

            this.absGain = rawTrader.abs_gain * 100;
            this.gain = rawTrader.gain * 100;

            this.bestProfit = rawTrader.best_profit;
            this.bestProfitDate = rawTrader.best_profit_date;

            this.worstProfit = rawTrader.worst_profit;
            this.worstProfitDate = rawTrader.worst_profit_date;

            this.bestPoints = rawTrader.best_points;
            this.bestPointsDate = rawTrader.best_points_date;

            this.worstPoints = rawTrader.worst_points;
            this.worstPointsDate = rawTrader.worst_points_date;

            this.deposits = rawTrader.deposits;

            this.withdrawals = rawTrader.withdrawals;
            this.profit = rawTrader.profit;

            this.avgTradeProfit = rawTrader.avg_trade_profit;
            this.avgTradeLoss = rawTrader.avg_trade_loss;

            this.drawdown = rawTrader.drawdown;

            this.avgWin = rawTrader.avg_win;
            this.avgLoss = rawTrader.avg_loss;

            this.avgTradeLength = rawTrader.avg_trade_length;

            this.longsCount = rawTrader.longs_count;
            this.longsWin = rawTrader.longs_win;

            this.shortsCount = rawTrader.shorts_count;
            this.shortsWin = rawTrader.shorts_win;

            this.volume = rawTrader.volume;

            this.maxTradeVolume = rawTrader.max_trade_volume;
            this.minTradeVolume = rawTrader.min_trade_volume;

            this.points = rawTrader.points;

            this.profitFactor = rawTrader.profit_factor;
            this.profitability = rawTrader.profitability;

            this.commissions = rawTrader.commissions;
            this.riskScore = rawTrader.risk_score;

            this.openPnl = rawTrader.open_pnl;

            this.tradesCount = rawTrader.trades_count;
            this.followersCount = rawTrader.followers_count;
            this.popularity = rawTrader.views;

            this.investedCapital = rawTrader.invested_capital;
            this.markets = rawTrader.markets;
            this.favored = rawTrader.favored;
            this.lastTradeDate = Math.abs(moment().unix() - rawTrader.last_trade_date); //Math.abs(Math.round(Date.now() - rawTrader.last_trade_date * 1000) / 1000);

            this.lifetime = moment().unix() - this.registrationDate;

            this.id && (this.gender = rawTrader.gender === 2 ? 'f' : 'm');
            this.id && (this.avatarHash = '' + (SocialUtils.hashToNum(this.id, 3) + 1));

            // visual category
            this.category = '';

            // expanded/closed leader card
            this.expanded = false;
        }

        getAvatarHash(maxImages) {
            if (this.gender) {
                return SocialUtils.hashToNum(this.id + this.gender, maxImages);
            } else {
                return SocialUtils.hashToNum(this.id, maxImages);
            }
        }

        initLeader(rawLeader) {
            this.followId = rawLeader.follow_id;
            this.followDeposit = rawLeader.deposit;
            this.followStopLoss = rawLeader.stop_loss;
            this.followBalance = rawLeader.balance;
            this.followState = rawLeader.state;

            this.followPnl = this.followBalance - this.followDeposit;
            this.followPnlPercents = rawLeader.pnl * 100;
            this.followStart = rawLeader.follow_start;
            this.followStopped = rawLeader.stopped;
            this.isFollowed = true;
        }

        updateFollowBalance(balance) {
            this.followBalance = balance;
        }

        getRisk() {
            return SocialUtils.getRisk(this.riskScore);
        }

    }

    return Trader;
}])

appSocial.service('SocialUser', ['Trader', function (Trader) {
    /**
     * @extends {Trader}
     * @name SocialUser
     * @class
     */
    class SocialUser extends Trader {
        /**
         * @param {string} token
         * @param {string} traderId
         */
        login(token, traderId) {
            this.token = token;
            this.id = traderId;
            this.loggedIn = true;
        }

    }

    return SocialUser;
}])

appSocial.service('SocialAPIService', ['$http', 'SocialConfig', 'constants', 'md5', 'SocialTypes',
    function ($http, config, constants, md5, SocialTypes) {

        const {ApiRequestAction, ApiMethod} = SocialTypes;

        class SocialAPIService {
            constructor() {
                this.http = $http;
                this.config = config;
                this.constants = constants;

                this.currentHostName = 'dev';
                this.apiConfig = config.api;

                /**
                 * @type {{[key: string]: (params?: any, options?: any) => Promise<any>}}
                 */
                this.request = {
                    login: this.createRestMethod(ApiRequestAction.Login, ApiMethod.Post),
                    getPortfolio: this.createRestMethod(ApiRequestAction.GetPortfolio, ApiMethod.Get),
                    getFeed: this.createRestMethod(ApiRequestAction.GetFeed, ApiMethod.Get),
                    getLeaders: this.createRestMethod(ApiRequestAction.GetLeaders, ApiMethod.Get),
                    followByLeader: this.createRestMethod(ApiRequestAction.FollowByLeader, ApiMethod.Post),
                    updateFollowState: this.createRestMethod(ApiRequestAction.UpdateFollowState, ApiMethod.Put),
                    updateFollowDeposit: this.createRestMethod(ApiRequestAction.UpdateFollowDeposit, ApiMethod.Put),
                    unfollowLeader: this.createRestMethod(ApiRequestAction.UnfollowLeader, ApiMethod.Delete),
                    getFavorites: this.createRestMethod(ApiRequestAction.GetFavorites, ApiMethod.Get),
                    addFavorite: this.createRestMethod(ApiRequestAction.AddFavorite, ApiMethod.Post),
                    deleteFavorite: this.createRestMethod(ApiRequestAction.DeleteFavorite, ApiMethod.Delete),
                    getTrades: this.createRestMethod(ApiRequestAction.GetTrades, ApiMethod.Get),
                    getAggregatedTrades: this.createRestMethod(ApiRequestAction.GetAggregatedTrades, ApiMethod.Get),
                    getTradesByMarkets: this.createRestMethod(ApiRequestAction.GetTradesByMarkets, ApiMethod.Get),
                    getGainHistory: this.createRestMethod(ApiRequestAction.GetGainHistory, ApiMethod.Get),
                    getRiskHistory: this.createRestMethod(ApiRequestAction.GetRiskHistory, ApiMethod.Get),
                    getDailyData: this.createRestMethod(ApiRequestAction.GetDailyData, ApiMethod.Get),
                    updateVisitCounter: this.createRestMethod(ApiRequestAction.UpdateVisitCounter, ApiMethod.Put),
                    getExposure: this.createRestMethod(ApiRequestAction.GetExposure, ApiMethod.Get),
                    //configuration
                    getConversionRates: this.createRestMethod(ApiRequestAction.GetConversionRates, ApiMethod.Get),
                    getMarkets: this.createRestMethod(ApiRequestAction.GetMarkets, ApiMethod.Get),
                }
            }

            /**
             * @param {string} action
             * @param {string} method
             * @param cache
             * @return {()=>Promise<any>}
             */
            createRestMethod(action, method, cache = false) {
                switch (method) {
                    case ApiMethod.Get:
                        return (params = '', options = []) => this.restMethodGet(action, params, options, cache);
                    case ApiMethod.Post:
                        return (params = [], path = '') => this.restMethodPost(action, path, params);
                    case ApiMethod.Put:
                        return (params = '', payload = {}) => this.restMethodPut(action, params, payload);
                    case ApiMethod.Delete:
                        return (params = '', payload = {}) => this.restMethodDelete(action, params, payload);
                }

            }

            /**
             * @param {string} action
             * @param {string} params
             * @param {object} options
             * @param {boolean} cache
             * @return {Promise<any>}
             */
            restMethodGet(action, params, options, cache) {
                const _params = this.createParams(params);
                const url = `${this.apiConfig.hosts[this.currentHostName].url.http}/${action}${_params}`;
                return this.http.get(url)
                    .then((response) => response.data)
                    .catch(error => {
                        console.log('OOPS!', error);
                        throw error;
                    })
            }

            /**
             * @param {string} action
             * @param {string} path
             * @param {string} params
             * @return {Promise<any>}
             */
            restMethodPost(action, path, params) {
                const _path = !!path && ('/' + path) || '';
                const url = `${this.apiConfig.hosts[this.currentHostName].url.http}/${action}${_path}`;
                return this.http.post(url, params)
                    .then((response) => response.data)
                    .catch(error => {
                        console.log('OOPS!', error);
                        throw error;
                    })
            }

            restMethodPut(action, params, payload) {
                const _params = params ? '/' + params : '';
                const url = `${this.apiConfig.hosts[this.currentHostName].url.http}/${action}${_params}`;
                return this.http.put(url, payload)
                    .then((response) => response.data)
                    .catch(error => {
                        console.log('OOPS!', error);
                        throw error;
                    })
            }

            restMethodDelete(action, params, payload) {
                const _params = params ? '/' + params : '';
                const url = `${this.apiConfig.hosts[this.currentHostName].url.http}/${action}${_params}`;
                return this.http.delete(url, {
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    data: payload
                })
                    .then((response) => response.data)
                    .catch(error => {
                        console.log('OOPS!', error);
                        throw error;
                    })
            }

            /**
             * @param {any} params
             * @param {any|object} options
             * @return {string}
             */
            createParams(params, options = {}) {

                if (typeof params === 'string' || typeof params === 'number') {
                    return params.toString();
                }

                if (Object(params) === params) {
                    //extract url from params object (field name: '_url')
                    let _params = '';
                    if (params.hasOwnProperty('_url')) {
                        _params += params['_url'];
                        delete params['_url'];
                    }
                    return _params + '?' + (new URLSearchParams(params)).toString();
                }
            }
        }

        return new SocialAPIService();
    }]);

appSocial.service('SocialActionService', [
    'SocialUtils', 'SocialAPIService', 'SocialInitService', 'SocialUserService', 'SocialTypes', 'API', 'UserService', 'UserControl',
    'constants', 'ErrorService', '$ionicLoading',
    function (SocialUtils, SocialAPIService, SocialInitService, SocialUserService, SocialTypes, API, UserService, UserControl,
              Const, ErrorService, $ionicLoading) {

        const {AccountType, CopyAction} = SocialTypes;

        class SocialActionService {
            constructor() {
                /**
                 * @type {SocialAPIService}
                 */
                this.api = SocialAPIService;

                /**
                 * @type {SocialUserService}
                 */
                this.userService = SocialUserService;

                /**
                 * @type {SocialUtils}
                 */
                this.utils = SocialUtils;

                /**
                 * @type {API}
                 */
                this.newforexAPI = API;

                /**
                 * @type {UserService}
                 */
                this.newforexUserService = UserService;

                /**
                 * @type {SocialInitService}
                 */
                this.initService = SocialInitService;

                /**
                 * @type {UserControl}
                 */
                this.newforexUserControlService = UserControl;

                /**
                 * @type {CardAction}
                 */
                this.lastAction = undefined;


                this.$ionicLoading = $ionicLoading;
            }

            /**
             * @param {CardAction} cardAction
             */
            copy(cardAction) {
                const traderId = cardAction.trader.id;
                this.lastAction = undefined;
                // clear back state
                this.utils.clearHistory();
                return this.utils.navigate('root.app.socialCopy', {id: traderId});
            }

            register() {
                const user = this.newforexUserService.get();

                const request = {
                    email: user.email,
                    userName: `user.0.${user.activeTradingAccount.source}.${user.activeTradingAccount.login}`,
                    firstName: user.firstName,
                    lastName: user.lastName,
                    source: Const.platformById.web,
                    country: user.country,
                    currency: user.activeTradingAccount.currency
                }

                this.$ionicLoading.show();

                return this.newforexAPI.socialRegister(request)
                    .then(response => this.checkResponse(response))
                    .then(() => {
                        return this.initService.restart()
                    })
                    .then(() => {
                        this.$ionicLoading.hide();
                        // run saved action
                        if (this.lastAction) {
                            console.log('run saved action', this.lastAction);
                            this.copy(this.lastAction);
                        }
                    })
                    .catch(error => {
                        this.$ionicLoading.hide();
                        console.warn(error);
                        return this.utils.navigate('root.app.socialCrash');
                    })
            }

            /**
             * Entry point of all actions
             * @param {CardAction} cardAction
             * @return {void | Promise<void>}
             */
            stateCheck(cardAction) {
                // save action and trader
                this.lastAction = cardAction;

                /**
                 * @type {UserModel}
                 */
                const user = this.newforexUserService.get();
                const socialUser = this.userService.get();

                if (socialUser.id) {
                    return this.copy(cardAction);
                }

                if (!user.activeTradingAccount) {
                    // create account and go to registration
                    return this.utils.navigate(this.newforexUserControlService.getState());
                }

                if (!user.activeTradingAccount.live) {
                    // no live account or only demo account exists

                    // show popup here
                    return this.utils.navigate('root.app.socialCrash', {
                        err: JSON.stringify({
                            textTitle: 'You are currently trading on a Demo account',
                            textContent: 'Please switch to a Live account ',
                            actionText: 'Switch Account',
                            back: 'root.app.manageAccounts'
                        })
                    })
                }

                // go to registration state
                return this.utils.navigate('root.app.socialRegistration')
            }


            checkResponse(response, request) {
                console.log(response)
                if (!response.status === 0) {
                    throw new ErrorService({
                        source: 'SocialActionService',
                        type: Const.error.type.VALIDATION,
                        severity: 'warning',
                        code: response.code || 'general_error',
                        data: {
                            request: request,
                            response: response
                        }
                    })
                }
                return response;
            }


            callAction(action, trader) {
                const {StopCopy, AddFunds, RemoveFunds, Pause, Resume, SetStopLoss} = CopyAction;

                switch (action) {
                    case AddFunds:
                    case RemoveFunds:
                    case SetStopLoss:
                        return this.utils.navigate('root.app.socialFunds', {id: trader.id, action})
                    case Pause:
                    case Resume:
                        return this.utils.navigate('root.app.socialPause', {id: trader.id, action})
                    case StopCopy:
                        return this.utils.navigate('root.app.socialCopy', {id: trader.id, action})
                }
            }

        }


        return new SocialActionService()
    }])


/**
 * @typedef {Object} CardAction
 * @property {Trader} trader
 * @property {CopyAction} action
 */

appSocial.service('SocialConfigurationService', ['SocialAPIService', function (SocialAPIService) {
    class SocialConfigurationService {
        constructor() {
            /**
             * @type {SocialAPIService}
             */
            this.api = SocialAPIService;
            /**
             * @type {Map<string, any>}
             */
            this.configuration = new Map();
        }

        init() {
            return Promise.all([
                this.getConversionRates('conversionRates'),
                this.getMarkets('markets')
            ]);
        }

        /**
         * @param {string} key
         * @return {T}
         */
        get(key) {
            return this.configuration.get(key);
        }

        clear() {
            this.configuration.clear();
        }

        /**
         * @param {string} key
         * @return {void | Promise<void>}
         */
        getConversionRates(key) {
            return this.api.request.getConversionRates()
                .then((response) => this.configuration.set(key, response.conversion_rates))
                .catch(error => console.warn(`Failed to fetch configuration key [${key}]`));
        }

        /**
         * @param {string} key
         * @return {void | Promise<void>}
         */
        getMarkets(key) {
            return this.api.request.getMarkets()
                .then((response) => response.markets.map(item => item.name))
                .then((markets) => this.configuration.set(key, markets))
                .catch(error => console.warn(`Failed to fetch configuration key [${key}]`));
        }
    }

    return new SocialConfigurationService();
}]);

appSocial.service('SocialInitService', [
    'SocialAPIService', 'Trader', 'SocialUserService', 'SocialPortfolioService', 'SocialConfigurationService',
    'SocialFavoriteService', 'SocialLocaleService', 'API', 'SocialThemeService', 'UserService', '$rootScope',
    function (SocialAPIService, Trader, SocialUserService, SocialPortfolioService, SocialConfigurationService,
              SocialFavoriteService, SocialLocaleService, API, SocialThemeService, UserService, $rootScope) {

        const DEFAULT_TOKEN_EXPIRATION = 24 * 3600;

        class SocialInitService {
            constructor() {
                /**
                 * @type {SocialLocaleService}
                 */
                this.localeService = SocialLocaleService;
                /**
                 * @type {SocialAPIService}
                 */
                this.api = SocialAPIService;
                /**
                 * @type {API}
                 */
                this.newforexAPI = API;
                /**
                 * @type {SocialUserService}
                 */
                this.userService = SocialUserService;

                /**
                 * @type {UserService}
                 */
                this.newforexUserService = UserService;

                /**
                 * @type {SocialPortfolioService}
                 */
                this.portfolioService = SocialPortfolioService;

                /**
                 * @type {SocialFavoriteService}
                 */
                this.favoriteService = SocialFavoriteService;

                /**
                 * @type {SocialConfigurationService}
                 */
                this.configurationService = SocialConfigurationService;

                /**
                 * @type {SocialThemeService}
                 */
                this.themeService = SocialThemeService;

                this.$rootScope = $rootScope;

                this.listener = null;

                this.initialized = false;

                // track prev/current state change
                $rootScope.previousState = null;
                $rootScope.currentState = null;
                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams, options) {
                    $rootScope.previousState = {state: fromState, params: fromParams};
                    $rootScope.currentState = {state: toState, params: toParams};
                });
            }

            init() {
                return Promise.resolve()
                    .then(() => {
                        if (this.initialized) {
                            console.warn('Social is already initialized');
                            return this.checkTradingAccount();
                        }

                        return this.localeService.init()
                            .then(() => this.getToken())
                            .then(() => {
                                this.themeService.setThemeStyles();
                                // run change trading account listener
                                this.listener = this.initTradingAccountListener()
                            })
                    })
            }

            getToken() {
                return this.newforexAPI.socialClientToken()
                    .then((response) => this.login(response.token, response.trader_id, DEFAULT_TOKEN_EXPIRATION))
                    .then(() => {
                        this.initialized = true;

                        // save current trading account
                        const user = this.newforexUserService.get();
                        this.userService.activeTradingAccount = user.activeTradingAccount;
                    })
            }

            /**
             * @param {string} token
             * @param {string} traderId
             * @param {number} expireAfter
             * @return {Promise<any>}
             */
            login(token, traderId, expireAfter) {
                return this.api.request.login({token})
                    .then(() => this.userService.login(token, traderId, expireAfter))
                    .then(() => {
                        const user = this.userService.get();

                        if (user.loggedIn && user.id) {
                            // TODO init websocket
                            this.userService.updatePortfolio();
                        }

                        return Promise.all([
                            this.configurationService.init(),
                            this.portfolioService.init()
                        ]).then(() => this.favoriteService.init())
                    })
            }

            logout() {
                console.log('social logout')
                this.portfolioService.clear();
                this.favoriteService.clear();
                this.configurationService.clear();
                this.userService.logout();
            }

            restart() {
                return Promise.resolve()
                    .then(() => this.logout())
                    .then(() => this.getToken())
            }

            checkTradingAccount() {
                const user = this.newforexUserService.get();

                const newforexTradingAccount = user.activeTradingAccount;
                const socialTradingAccount = this.userService.activeTradingAccount;

                // nothing to do
                if (!socialTradingAccount && !newforexTradingAccount) {
                    return
                }

                if (!socialTradingAccount && newforexTradingAccount) {
                    return this.restart()
                }

                if (socialTradingAccount.id !== newforexTradingAccount.id) {
                    return this.restart()
                }
            }

            initTradingAccountListener() {
                const getAccount = () => {
                    const user = this.newforexUserService.get();
                    return user.activeTradingAccount;
                }

                /**
                 * @param newAccount {TradingAccount}
                 * @param prevAccount {TradingAccount}
                 */
                const handleChange = (newAccount, prevAccount) => {
                    console.log('[initTradingAccountListener] newAccount:', newAccount, 'prevAccount:', prevAccount);

                    // if no accounts
                    if (!newAccount && !prevAccount) {
                        return;
                    }

                    // logout
                    if (!newAccount) {
                        this.logout();
                        this.listener && this.listener();
                        this.initialized = false;
                    }
                }

                return this.$rootScope.$watch(
                    () => getAccount(),
                    /**
                     * @param newAccount {TradingAccount}
                     * @param prevAccount {TradingAccount}
                     */
                    (newAccount, prevAccount) => handleChange(newAccount, prevAccount)
                )
            }

        }


        return new SocialInitService();
    }]);

appSocial.service('SocialLocaleService', [
    '$rootScope', 'SocialConfig', 'en_Locale',
    function ($rootScope, config, en_Locale) {

        const Langs = {
            en: en_Locale
        }

        class SocialLocaleService {
            constructor() {
                this.translation = {};
            }

            init() {
                return this.loadLang(config.defaultLang);
            }

            loadLang(lang) {
                return this.loadPrimaryLang(lang)
                    .then(([lang, translation]) => {
                        this.lang = lang;
                        this.translation = translation;
                        $rootScope.$emit('SocialLocaleService.change', this.translation)
                    })
            }

            /**
             * Load language from remote source/local cache
             * @param lang
             * @returns {*}
             */
            loadPrimaryLang(lang) {
                return Promise.resolve()
                    .then(() => {
                        if (!Langs[lang]) {
                            return Promise.reject('no such locale');
                        }
                        this.translation = _.defaultsDeep({}, Langs[lang], Langs.en); //merge with english, defaultsDeep works from right to left
                        return [lang, this.translation];
                    })
                    .catch((error) => {
                        this.translation = Langs.en;
                        return [lang, this.translation];
                    });
            }

            /**
             * Translates labels for array of objects
             * @param items
             * @param labelField
             * @return {*}
             */
            translateLabels(items, labelField = 'label') {
                return items.map(item => {
                    if (item.hasOwnProperty(labelField)) {
                        item.label = this.translation[item[labelField]] || item.label;
                    }
                    return item
                })
            }
        }

        return new SocialLocaleService();
    }]);

appSocial.service('SocialThemeService', [
    function () {
        class SocialThemeService {
            constructor() {
                this.themeStyles = {};
            }

            setThemeStyles() {
                this.themeStyles = window.getComputedStyle(document.getElementsByTagName('body')[0]);
            }

            getThemeColor(component, variable) {
                /// --variable-component-guide-popup-closed-positions-path
                return this.themeStyles.getPropertyValue('--' + component + '-' + variable);
            }

            getThemeVariable(component, variable) {
                /// --variable-component-guide-popup-closed-positions-path
                return this.themeStyles.getPropertyValue('--variable-component-' + component + '-' + variable);
            }
        }

        return new SocialThemeService()
    }
])

appSocial.service('SocialUserService', ['SocialUser', 'SocialAPIService', function (SocialUser, SocialAPIService) {
    class SocialUserService {
        constructor() {
            /**
             * @type {SocialAPIService}
             */
            this.api = SocialAPIService;
            /**
             * @type {SocialUser}
             */
            this.user = undefined;

            /**
             * @type {TradingAccount}
             */
            this.activeTradingAccount = undefined;
        }

        /**
         * @return {SocialUser}
         */
        get() {
            return this.user;
        }

        login(token, traderId) {
            this.user = new SocialUser();
            this.user.login(token, traderId);
        }

        logout() {
            this.activeTradingAccount = undefined;
            this.user = new SocialUser();
        }

        updatePortfolio() {
            return this.api.request.getPortfolio('/' + this.user.id)
                .then((response) => {
                    this.user.init(response.trader);
                });
        }
    }

    return new SocialUserService();
}])

appSocial.service('SocialUtils', [
    'moment', 'md5', '$state', '$ionicHistory', '$ionicViewSwitcher',
    function (moment, md5, $state, $ionicHistory, $ionicViewSwitcher) {
        class SocialUtils {
            createQuery(filter) {
                const query = filter.fields
                    .map(field => `${field.name}[${field.op}]=${field.value}::${field.next}::`)
                    .join('')
                    .replace(/(::\w+::)$/, '');

                const order = filter.order
                    .map(field => `${field.name}=${field.dir}`)
                    .join(',');

                let params = {
                    query: query,
                    order_by: order,
                    limit: filter.limit,
                    page: filter.page,
                };

                if (filter.dateRange) {
                    params = _.merge(params, {date_range: filter.dateRange})
                }
                return params;
            };

            dateTagToRange(tag) {
                switch (tag) {
                    case 'currentMonth':
                        return [
                            moment().startOf('month').unix(),
                            moment().unix(),
                        ];
                    case 'lastMonth':
                        return [
                            moment().startOf('month').subtract(1, 'month').unix(),
                            moment().startOf('month').unix()
                        ];
                    case 'lastTwoMonth':
                        return [
                            moment().startOf('month').subtract(2, 'month').unix(),
                            moment().startOf('month').unix()
                        ];
                    case 'lastThreeMonth':
                        return [
                            moment().startOf('month').subtract(3, 'month').unix(),
                            moment().startOf('month').unix()
                        ];
                    case 'lastSixMonth':
                        return [
                            moment().startOf('month').subtract(6, 'month').unix(),
                            moment().startOf('month').unix()
                        ];
                    case 'thisYear':
                        return [
                            moment().startOf('year').unix(),
                            moment().unix(),
                        ];
                    case 'thisTwoYears':
                        return [
                            moment().startOf('year').subtract(1, 'year').unix(),
                            moment().unix(),
                        ];
                    default:
                        return [
                            moment().startOf('year').subtract(10, 'year').unix(),
                            moment().unix(),
                        ];
                }
            };

            getParams(url) {
                const getParams = (url || location.search)
                    .replace(/\?/gi, '')
                    .replace(/\/$/, '')
                    .split('&')
                    .filter(item => item.length > 0);

                return getParams.reduce((acc, cur) => {
                    const [key, val] = cur.split('=');
                    acc[key] = val;
                    return acc;
                }, {});
            };

            getHash() {
                return md5.createHash((Math.random() * 999999).toString()).toString();
            }

            hashToNum(origin, base) {
                return origin.split('').reduce((accum, char) => accum + char.charCodeAt(0), 0)
                    % (typeof base !== 'undefined' ? base : Infinity);
            }

            camelCaseToDashes(camelCaseValue, dash = '_') {
                return camelCaseValue && camelCaseValue.replace(/([a-z0-9])([A-Z])/g, '$1' + dash + '$2') || '';
            }

            dashesToSpace(dashedValue) {
                return dashedValue && dashedValue.replace(/(_)/g, ' ') || '';
            }

            capitalizeFirstLetterOnly(value, lowerCaseOther = false) {
                return value && value.length && ((lowerCaseOther ? value.toLocaleLowerCase() : value)[0].toUpperCase() + value.slice(1)) || '';
            }

            navigate(state, params, disableAnimation = false) {
                const INITIAL_STATE = 'root.app.social';
                const NO_BACK_STATES = [
                    'root.app.socialRegistration'
                ];


                if (disableAnimation) {
                    $ionicHistory.nextViewOptions({disableAnimate: true});
                }

                if (state === 'back') {
                    // if no back view - go to initial page
                    if (!$ionicHistory.backView()
                        || NO_BACK_STATES.includes($ionicHistory.backView().stateName)) {
                        // console.log('[][][] No back view');
                        // TODO - pass this as a parameter
                        return $state.go(INITIAL_STATE);
                    }
                    // console.log('[][][] Back view is', $ionicHistory.backView().stateName);
                    return $ionicHistory.goBack();
                }

                // set next view animation as back
                if (params && params.direction === 'back') {
                    $ionicViewSwitcher.nextDirection('back')
                }

                return $state.go(state, params);
            }

            clearHistory() {
                $ionicHistory.clearHistory();
            }

            renderTranslation(message, values = {}) {
                return Object.keys(values).reduce((acc, cur) => {
                    const re = new RegExp('\%' + cur + '\%');
                    return acc.replace(re, values[cur]);
                }, message)
            }

            getRisk(score) {
                if (score <= 3) {
                    return 'low';
                }
                if (score > 3 && score <= 6) {
                    return 'medium';
                }
                if (score > 6) {
                    return 'high';
                }
            }
        }

        return new SocialUtils();
    }]);

appSocial.factory('TokenInterceptor', ['$injector', function ($injector) {
    return {
        'request': function (config) {
            // skip non social requests
            if (!/social/.test(config.url)) {
                return config;
            }

            config.headers = config.headers || {};

            /**
             * @type SocialUserService
             */
            const userService = $injector.get('SocialUserService');
            const user = userService.get();

            if (user && user.loggedIn && user.token.length) {
                config.headers.token = user.token;
            }
            return config;
        },
    };
}]);

/**
 * Options:
 * showCountryFlag - boolean
 */
appSocial.component('avatar', {
    template:'<div class="item-avatar" ng-if="$ctrl.trader"><img src="{{$ctrl.src}}" loading="lazy"><div class="pause-indicator" ng-if="$ctrl.trader.followState===false"><i class="social-icon-pause"></i></div></div><div class="item-avatar empty" ng-if="!$ctrl.trader"><div class="empty-avatar font-size-20">?</div></div><div class="trade-country" ng-if="$ctrl.countryCode"><i ng-class="\'flag-social-icon-\' + $ctrl.countryCode"></i></div>',
    bindings: {
        trader: '<',
        options: '=avatarOptions'
    },
    controller: ["SocialConstants", class AvatarComponent {
        constructor(SocialConstants) {
            this.countries = SocialConstants.countries;
            this.path = "https://social.pandats.com/avatars/production/";
            this.src = "";
        }

        $onInit() {
            this.setAvatar();
        }

        $onChanges(changes) {
            // console.log('[CHANGES]', changes);
            if (changes.trader) {
                this.setAvatar();
            }
        }

        setAvatar() {
            if (!_.isObject(this.trader)) {
                return;
            }

            if (!this.trader.avatar.length) {
                this.src = "img/social/" + this.trader.gender + this.trader.avatarHash + '.svg';
            } else {
                this.src = /^data/.test(this.trader.avatar)
                    ? this.trader.avatar
                    : this.path + this.trader.avatar;
            }

            if (this.options && this.options.showCountryFlag) {
                const country = this.countries
                    .find((_country) => _country.code.toLowerCase() === this.trader.country.toLowerCase());
                this.countryCode = !!country && country.code.toLowerCase();
                this.countryName = !!country && country.country;
            }
        }
    }]
})

appSocial.component('lastActive', {
    template:'<div class="social-color-muted layout-row content-gap05 just-start align-center"><div class="layout-column" ng-if="$ctrl.options.icon"><i ng-class="$ctrl.durationIcon"></i></div><div class="layout-column">{{$ctrl.translation.lastActive}}: {{$ctrl.date | duration:\'about\'}}</div></div>',
    bindings: {
        date: '<',
        options: '=options'
    },
    controller: ["SocialLocaleService", class LastActiveComponent {
        constructor(SocialLocaleService) {
            this.dayInSec = 60 * 60 * 24;
            this.weekInSec = this.dayInSec * 7;

            this.translation = SocialLocaleService.translation;
        }

        $onInit() {
            if (Number(this.date) <= this.dayInSec) {
                this.durationIcon = 'short';
                return;
            }

            if (Number(this.date) <= this.weekInSec) {
                this.durationIcon = 'medium';
                return;
            }

            this.durationIcon = 'long';
        }

        $onChanges(changes) {

        }
    }]
})

appSocial.component('percentageBar', {
    template:'<div class="layout-column full-width content-gap16"><div class="layout-row align-center" ng-repeat="item in $ctrl.items"><div class="layout-column width-15" ng-class="item.name"><i class="font-size-24 social-icon" ng-class="\'social-icon-\'+item.name"></i></div><div class="layout-column text-transform-capitalize width-40 social-color-base2">{{item.name}}</div><div class="layout-column width-15">{{item.percentage | number:2}}%</div><div class="layout-column width-30"><div class="line-bar fill-bg" ng-class="item.name" ng-style="{width: item.percentage + \'%\'}"></div></div></div></div>',
    bindings: {
        items: '<',
    },
    controller: ["SocialConstants", class PercentageBarComponent {
        constructor(SocialConstants) {

        }

        $onInit() {
            console.log('init percentage bar')
        }

        $onChanges(changes) {
            console.log('change percentage bar')
        }

        $onDestroy() {
            console.log('destroy percentage bar')
        }

    }]
})

appSocial.component('spinner', {
    template:'<svg width="100%" height="100%" viewBox="0 0 390 73" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;"><defs><mask id="mask-element"><path fill="#777" d="M283,18.75c0,-0.69 -0.56,-1.25 -1.25,-1.25l-183.5,0c-0.69,0 -1.25,0.56 -1.25,1.25l0,2.5c0,0.69 0.56,1.25 1.25,1.25l183.5,0c0.69,0 1.25,-0.56 1.25,-1.25l0,-2.5Z"></path><path fill="#777" d="M283,28.75c0,-0.69 -0.56,-1.25 -1.25,-1.25l-183.5,0c-0.69,0 -1.25,0.56 -1.25,1.25l0,2.5c0,0.69 0.56,1.25 1.25,1.25l183.5,0c0.69,0 1.25,-0.56 1.25,-1.25l0,-2.5Z"></path><path fill="#777" d="M254,38.75c0,-0.69 -0.56,-1.25 -1.25,-1.25l-154.5,0c-0.69,0 -1.25,0.56 -1.25,1.25l0,2.5c0,0.69 0.56,1.25 1.25,1.25l154.5,0c0.69,0 1.25,-0.56 1.25,-1.25l0,-2.5Z"></path><path fill="#777" d="M281.75,48.75c0,-0.69 -0.56,-1.25 -1.25,-1.25l-182.25,0c-0.69,0 -1.25,0.56 -1.25,1.25l0,2.5c0,0.69 0.56,1.25 1.25,1.25l182.25,0c0.69,0 1.25,-0.56 1.25,-1.25l0,-2.5Z"></path><path id="qube" fill="#777" d="M92,20.87c0,-1.86 -1.51,-3.37 -3.37,-3.37l-28.26,0c-1.86,0 -3.37,1.51 -3.37,3.37l0,28.26c0,1.86 1.51,3.37 3.37,3.37l28.26,0c1.86,0 3.37,-1.51 3.37,-3.37l0,-28.26Z"></path><path fill="hsla(200,0%,10%,.6)" id="mask" d="M52,17.5l0,35l-40,0l20,-35l20,0Z"></path></mask></defs><path mask="url(#mask-element)" d="M283,18.75c0,-0.69 -0.56,-1.25 -1.25,-1.25l-183.5,0c-0.69,0 -1.25,0.56 -1.25,1.25l0,2.5c0,0.69 0.56,1.25 1.25,1.25l183.5,0c0.69,0 1.25,-0.56 1.25,-1.25l0,-2.5Z" fill="#dadada"></path><path mask="url(#mask-element)" d="M283,28.75c0,-0.69 -0.56,-1.25 -1.25,-1.25l-183.5,0c-0.69,0 -1.25,0.56 -1.25,1.25l0,2.5c0,0.69 0.56,1.25 1.25,1.25l183.5,0c0.69,0 1.25,-0.56 1.25,-1.25l0,-2.5Z" fill="#dadada"></path><path mask="url(#mask-element)" d="M254,38.75c0,-0.69 -0.56,-1.25 -1.25,-1.25l-154.5,0c-0.69,0 -1.25,0.56 -1.25,1.25l0,2.5c0,0.69 0.56,1.25 1.25,1.25l154.5,0c0.69,0 1.25,-0.56 1.25,-1.25l0,-2.5Z" fill="#dadada"></path><path mask="url(#mask-element)" d="M281.75,48.75c0,-0.69 -0.56,-1.25 -1.25,-1.25l-182.25,0c-0.69,0 -1.25,0.56 -1.25,1.25l0,2.5c0,0.69 0.56,1.25 1.25,1.25l182.25,0c0.69,0 1.25,-0.56 1.25,-1.25l0,-2.5Z" fill="#dadada"></path><path mask="url(#mask-element)" id="qube" d="M92,20.87c0,-1.86 -1.51,-3.37 -3.37,-3.37l-28.26,0c-1.86,0 -3.37,1.51 -3.37,3.37l0,28.26c0,1.86 1.51,3.37 3.37,3.37l28.26,0c1.86,0 3.37,-1.51 3.37,-3.37l0,-28.26Z" fill="#dadada"></path></svg>',
    bindings: {
        trader: '<'
    },
    controller: class SpinnerComponent {
        constructor() {
        }
    }
})

appSocial.directive('contextMenu', ['ContextMenuService',
    /**
     * @param {ContextMenuService} ContextMenuService
     */
    function (ContextMenuService) {
        return {
            restrict: 'EA',
            scope: {
                contextMenuConfig: '<'
            },
            compile: function () {
                return {
                    post: function postLink(scope, el, attrs) {
                        const instanceId = Math.random() * 999999;

                        const portal = $(el);
                        const wrapper = portal.find('.dropdown-menu');
                        if (!wrapper) {
                            throw new Error("Add '.dropdown-menu' class to <ul> element!");
                        }
                        portal.attr('data-instance-id', instanceId);

                        /**
                         * @type Menu
                         */
                        const instance = {
                            id: instanceId,
                            portal,
                            wrapper,
                            isOpen: false,
                            config: scope.contextMenuConfig || {}
                        }

                        ContextMenuService.register(instance);

                        el.on('click', function (event) {
                            event.preventDefault();
                            ContextMenuService.show(instance);
                        })

                        el.on('$destroy', function () {
                            ContextMenuService.remove(instance);
                        })
                    }
                }
            },
            link: function (scope, el) {

            }
        }
    }
])

appSocial.service('ContextMenuService', [
    function () {
        class ContextMenuService {
            constructor() {
                this.instances = [];

                $(document).click((event) => {
                    //event.preventDefault();
                    // skip hiding when clicking inside the directive
                    if ($(event.target).attr('data-instance-id') || $(event.target.parentNode).attr('data-instance-id')) {
                        return;
                    }
                    // otherwise - hide all
                    this.instances.forEach(item => this.hide(item));
                });
            }

            /**
             * @param {Menu} menu
             */
            register(menu) {
                this.instances.push(menu);
                menu.wrapper.css({display: 'none'});
            }

            /**
             * @param {Menu} menu
             */
            remove(menu) {
                this.hide(menu);
                _.remove(this.instances, {id: menu.id});
            }

            /**
             * @param {Menu} menu
             */
            show(menu) {
                if (menu.isOpen) {
                    menu.wrapper.css({display: "none"})
                    menu.isOpen = false;
                } else {
                    // close all other instances except this one
                    this.instances
                        .filter(item => item.id !== menu.id)
                        .forEach(item => this.hide(item));

                    const top = (menu.config && menu.config.top && typeof menu.config.top === 'function')
                        ? menu.config.top(menu)
                        : (menu.portal.offset().top - 15) + 'px';

                    const right = (menu.config && menu.config.right && typeof menu.config.right === 'function')
                        ? menu.config.right(menu)
                        : '1%';

                    const left = (menu.config && menu.config.left && typeof menu.config.left === 'function')
                        && menu.config.left(menu);

                    const bottom = (menu.config && menu.config.bottom && typeof menu.config.bottom === 'function')
                        && menu.config.bottom(menu);

                    menu.wrapper.css({
                        position: "fixed",
                        display: "flex",
                        right,
                        top,
                        left,
                        bottom
                    });
                    menu.isOpen = true;
                }
            }

            /**
             * @param {Menu} menu
             */
            hide(menu) {
                menu.wrapper.css({display: "none"})
                menu.isOpen = false;
            }

        }

        return new ContextMenuService();
    }
]);

/**
 * @typedef {Object} MenuConfig
 * @property {Function | number | string | null} top
 * @property {Function | number | string | null} left
 * @property {Function | number | string | null} right
 * @property {Function | number | string | null} bottom
 */

/**
 * @typedef {Object} Menu
 * @property {number} id
 * @property {jQuery} portal
 * @property {jQuery} wrapper
 * @property {boolean} isOpen
 * @property {MenuConfig} config
 */

/**
 * Config format
 * multiselect: boolean, enable multiselect, default - false
 * maxMultiSelected: number, show max items when multiselect is enabled, default - 3
 * id: string, field name for unique id item value, default - 'id'
 * label: string, field name for displayed item, default - 'label'
 * splitSelected: boolean, show selected item/items before all other items, default - false
 * showSearch: boolean, default - false
 * animation: string, default - slide-in-up
 * showReset: boolean, default - false
 */

angular.module('custom-select', []);

angular.module('custom-select')
    /**
     * Custom single/multi select component
     */
    .directive('customSelect', ['$state', '$ionicModal', '$timeout', '$compile', '$interpolate', '$ionicScrollDelegate',
        function ($state, $ionicModal, $timeout, $compile, $interpolate, $ionicScrollDelegate) {
            return {
                template:'<div class="_cs-container" ng-class="ctrl.wrapClass"><div class="_cs-current-value-container" on-tap="ctrl.openSelectModal()"><div class="_cs-current-value" ng-if="!ctrl.config.multiselect && !transcludeContent[\'model-single\']"><span class="_cs-placeholder" ng-if="!ctrl.selectedItems.length && attrs.placeholder.length">{{attrs.placeholder}}</span> {{ctrl.selectedItems[0].$label}}</div><div class="_cs-current-value _cs-multiselect" ng-if="ctrl.config.multiselect && !transcludeContent[\'model-multi\']"><span class="_cs-placeholder" ng-if="!ctrl.selectedItems.length && attrs.placeholder.length">{{attrs.placeholder}}</span><div ng-repeat="item in ctrl.selectedItems | limitTo: ctrl.config.maxMultiSelected" class="_cs-multiselect-item">{{item[ctrl.config.label]}}</div><div class="_cs-multiselect-more" ng-if="ctrl.config.maxMultiSelected && ctrl.selectedItems.length > ctrl.config.maxMultiSelected">+{{ctrl.selectedItems.length - ctrl.config.maxMultiSelected}}</div></div><div class="_cs-current-value" ng-if="!ctrl.config.multiselect && transcludeContent[\'model-single\']"><span class="_cs-placeholder" ng-if="!ctrl.selectedItems.length && attrs.placeholder.length">{{attrs.placeholder}}</span><div ng-bind-html="ctrl.getTranscludedContent(ctrl.selectedItems[0],\'model-single\') | unsafe"></div></div><div class="_cs-current-value _cs-multiselect" ng-if="ctrl.config.multiselect && transcludeContent[\'model-multi\']"><span class="_cs-placeholder" ng-if="!ctrl.selectedItems.length && attrs.placeholder.length">{{attrs.placeholder}}</span><div class="_cs-multiselect-item" ng-repeat="item in ctrl.selectedItems | limitTo: ctrl.config.maxMultiSelected" ng-bind-html="ctrl.getTranscludedContent(item,\'model-multi\') | unsafe"></div><div class="_cs-multiselect-more" ng-if="ctrl.config.maxMultiSelected && ctrl.selectedItems.length > ctrl.config.maxMultiSelected">+{{ctrl.selectedItems.length - ctrl.config.maxMultiSelected}}</div></div><div class="_cs-dropdown"><i class="social-icon-arrow_drop_down font-size-26"></i></div></div></div><script id="custom-select-modal.html" type="text/ng-template"><ion-modal-view class="_cs-modal" ng-class="ctrl.wrapClass"> <ion-header-bar> <div class="_cs-buttons"> <div class="_cs-button _cs-button-apply" on-tap="ctrl.applySelected()" ng-if="ctrl.config.multiselect">Apply</div> </div> <div class="_cs-search-container" ng-hide="!ctrl.config.showSearch"> <input class="_cs-search-input" type="text" placeholder="Search..." ng-model="ctrl.search[ctrl.config.label]"> <div class="_cs-search-close" on-tap="ctrl.resetSearch()" ng-show="ctrl.search[ctrl.config.label].length"> <i class="social-icon-clear font-size-17"></i> </div> </div> <div class="_cs-buttons"> <div class="_cs-button _cs-button-reset" ng-if="ctrl.config.showReset" on-tap="ctrl.resetSelection()">Reset</div> <div class="_cs-button _cs-button-close" on-tap="ctrl.closeSelectModal()">Close</div> </div> </ion-header-bar> <ion-content scroll="true" overflow-scroll="y"> <!-- split selected --> <ion-list class="_cs-split-selected" ng-if="ctrl.config.splitSelected && ctrl.config.multiselect"> <ion-item ng-repeat="item in ctrl.selectedItems" on-tap="ctrl.deselectItem(item)"> <div class="_cs-selected-item" ng-if="!transcludeContent[\'selected\']"> {{item.$label}} </div> <div class="_cs-selected-item" ng-if="transcludeContent[\'selected\']"> <div ng-bind-html="ctrl.getTranscludedContent(item,\'selected\') | unsafe"></div> </div> </ion-item> </ion-list> <ion-list class="_cs-items"> <ion-item ng-repeat="item in ctrl.items | filter: ctrl.search | selectedFilter: \'$label\':ctrl.selectedItems:ctrl.config.splitSelected" on-tap="ctrl.selectItem(item)" item-height="ctrl.config.itemHeight" item-width="ctrl.config.itemWidth"> <div class="_cs-item" ng-if="!transcludeContent[\'content\']" ng-class="{\'_cs-item-selected\': ctrl.isSelected(item)}"> {{item.$label}} </div> <div class="_cs-item" ng-if="transcludeContent[\'content\']" ng-class="{\'_cs-item-selected\': ctrl.isSelected(item)}"> <div ng-bind-html="ctrl.getTranscludedContent(item,\'content\') | unsafe"></div> </div> </ion-item> </ion-list> </ion-content> </ion-modal-view></script>',
                restrict: 'E',
                require: {ngModelCtrl: 'ngModel'},
                bindToController: true,
                controllerAs: 'ctrl',
                bindings: {
                    ngModel: '<'
                },
                scope: {
                    items: '=',
                    config: '=',
                    wrapClass: '=',
                    onClose: '&',
                    onSelect: '&'
                },
                transclude: true,
                controller: ["$scope", class CustomSelectComponent {
                    constructor($scope) {
                        this.$scope = $scope;
                        this.modal = null;
                        this.search = {};

                        this.selectedItems = [];
                    }

                    $onInit() {
                        console.log('got on init event');

                        this.config = _.merge({
                            multiselect: false,
                            id: 'id',
                            label: 'label',
                            splitSelected: false,
                            showSearch: true,
                            animation: 'slide-in-up',
                            maxMultiSelected: +Infinity,
                            showReset: false,
                            itemHeight: '55px',
                            itemWidth: '100%',
                        }, this.config);

                        this.initModal()
                            .then((modal) => {
                                this.modal = modal;
                            })

                        // items initialization
                        this.items = this.items.map(item => {
                            return _.merge(item, {
                                $id: item[this.config.id],
                                $label: item[this.config.label]
                            })
                        });

                        //initialize selected items from ngModel (if passed)
                        this.initSelectedItems();

                        // watch changes in selected values from outside
                        this.modelWatch = this.$scope.$watch(() => this.ngModelCtrl.$modelValue, (newVal, oldVal) => {
                            // console.log('Got model change', 'old val:', oldVal, 'new val:', newVal);
                            this.initSelectedItems();
                        })
                    }

                    initModal() {
                        return $ionicModal.fromTemplateUrl('custom-select-modal.html', {
                            scope: this.$scope,
                            animation: this.config.animation
                        });
                    }


                    initSelectedItems() {

                        function setItem(modelValue, config) {
                            return _.merge(modelValue, {
                                $id: modelValue[config.id],
                                $label: modelValue[config.label]
                            })
                        }

                        return $timeout(() => {
                            // ng-model value is absent
                            if (!this.ngModelCtrl.$modelValue) {
                                this.selectedItems = [];
                                return;
                            }

                            // always use array to store selected items (even for single select)
                            this.selectedItems = [].concat(this.ngModelCtrl.$modelValue)
                                .map(item => setItem(item, this.config));

                            // console.log('selected items:', this.selectedItems)
                        }, 0)
                    }

                    // TODO - memoization
                    isSelected(item) {
                        if (!item) {
                            return false
                        }
                        return _.find(this.selectedItems, {'$id': item.$id})
                    }

                    getTranscludedContent(context, selector) {
                        if (!this.$scope.transcludeContent.enabled) {
                            return
                        }

                        const ctx = _.cloneDeep(context);

                        return $interpolate(this.$scope.transcludeContent[selector])({ctx});
                    }

                    prepareTranscludedContent(clone) {
                        const html = angular.element(clone);
                        const transcluded = {
                            enabled: false
                        }

                        Array.from(html)
                            // only <script> tags
                            .filter(item => /script/i.test(item.tagName))
                            // that have id
                            .filter(item => item.id.length)
                            .forEach(item => {
                                transcluded[item.id] = item.text;
                                transcluded.enabled = true;
                            });
                        return transcluded;
                    }

                    openSelectModal() {
                        // re-init selected items on modal open
                        this.initSelectedItems();
                        this.modal.show();
                        $ionicScrollDelegate.scrollTop();
                    }

                    selectItem(item) {
                        // console.log('selected item', item);

                        if (this.config.multiselect) {
                            // if item is already in selected - remove it
                            if (_.find(this.selectedItems, {'$id': item.$id})) {
                                return this.deselectItem(item)
                            }
                            // otherwise - add to selected
                            this.selectedItems.push(item);
                            return;
                        }

                        // set selected
                        this.selectedItems = [item];

                        // send to ng-model
                        this.ngModelCtrl.$setViewValue(this.selectedItems[0]);

                        // close modal for single select only
                        if (!this.config.multiselect) {
                            this.closeSelectModal()
                        }
                    }

                    // remove item from selected (for multiselect only)
                    deselectItem(item) {
                        if (this.config.multiselect) {
                            _.remove(this.selectedItems, {'$id': item.$id});
                        }
                    }

                    // apply multi selection to ng-model
                    applySelected() {
                        this.ngModelCtrl.$setViewValue(this.selectedItems);
                        // console.log('apply selected items', this.selectedItems)
                        this.closeSelectModal()
                    }

                    closeSelectModal() {
                        if (this.modal.isShown()) {
                            this.search = {};
                            this.onClose();
                            this.modal.hide();
                        }
                    }

                    resetSearch() {
                        this.search = {};
                    }

                    resetSelection() {
                        this.selectedItems = [];
                        // TODO do not reset parent model, only on apply
                        this.ngModelCtrl.$setViewValue(this.selectedItems);
                    };

                    $onChanges(changes) {
                        // console.log('got changes event', changes);
                    }

                    $onDestroy() {
                        // console.log('got on destroy event');
                        this.$scope.transcludeContent = null;
                        if (this.modal) {
                            this.closeSelectModal();
                            this.modal.remove();
                        }
                        this.modelWatch && this.modelWatch();
                    }

                    $postLink() {
                        // console.log('got postlink event');
                    }
                }],
                $transclude: function (el, scope) {
                    console.log('$transclude', el, scope)
                },
                link: function (scope, element, attrs, ctrl, transclude) {
                    transclude(function (clone) {
                        scope.transcludeContent = scope.ctrl.prepareTranscludedContent(clone);
                        scope.attrs = attrs;
                    });
                }
            }
        }])
    /**
     * Filter items with excluded list
     */
    .filter('selectedFilter', function () {
        return function (items, name, exclude, enabled) {
            if (!enabled) {
                return items
            }
            return _.differenceBy(items, exclude, name)
        }
    })
    .filter('unsafe', ["$sce", function($sce) { return $sce.trustAsHtml; }]);

angular.module('echarts', []);
angular.module('echarts')
    .directive('echarts', [
        function () {
            return {
                templateUrl: '',
                restrict: 'A',
                scope: {
                    options: '=chartOptions',
                },
                link: function ($scope, element) {
                    const chart = echarts.init(element[0]);

                    // apply options on init
                    if (_.isObject($scope.options)) {
                        chart.setOption($scope.options);
                    }

                    const optionsWatcher = $scope.$watch('options', function (cur, prev) {
                        if (cur && !_.isEqual(prev, cur) && chart) {
                            chart.setOption($scope.options);
                        }
                    })

                    element.on('$destroy', function () {
                        optionsWatcher && optionsWatcher();
                    });
                }
            }
        }]);

/**
 * Config options
 * min - number,
 * max - number,
 * step - number,
 * digits - number,
 * speedStep - number,
 * strictValidation - boolean, default=true, pass to keyboard min/max validation rules
 * label - string, default='Amount'
 * valueType - string, default='currency',
 * valueLabel - string, default='',
 * buttons - boolean, default=true,
 * readonly - boolean, default=false,
 * currencySign - string, default='$'
 * viewName - string, input amount title, default=''
 */
appSocial.directive('inputAmount', ['$timeout',
    function ($timeout) {
        return {
            template:'<div class="layout-row" inc-dec disable-validation="{{$ctrl.config.strictValidation ? \'\' : \'true\' }}"><div class="layout-column width-20 align-center"><button class="full-width full-height" ng-if="$ctrl.config.buttons" ng-click="$ctrl.onClick(\'decrease\'); upDown({ model: $ctrl.model, digits: $ctrl.config.digits, step: $ctrl.config.step, direction: \'decrease\', min: $ctrl.config.min, max: $ctrl.config.max })" on-touch="upDownRepeat({ model: $ctrl.model, digits: $ctrl.config.digits, step: $ctrl.config.step, direction: \'decrease\', min: $ctrl.config.min, max: $ctrl.config.max })" on-release="upDownStop()"><i class="ion-android-remove font-size-28"></i></button></div><div class="layout-column shrinkable align-center input-area just-center content-gap06" on-tap="$ctrl.inputFocus($ctrl.model,\'model.value\')"><div class="layout-row">{{$ctrl.config.label}}</div><div class="layout-row font-size-25" ng-if="$ctrl.config.valueType===\'currency\'">{{$ctrl.model.value | cryptoCurrency:$ctrl.config.currencySign:$ctrl.config.digits}}</div><div class="layout-row font-size-25" ng-if="$ctrl.config.valueType===\'number\'">{{$ctrl.model.value | number:$ctrl.config.digits}}{{$ctrl.config.valueLabel}}</div></div><div class="layout-column width-20 align-center"><button class="full-width full-height" ng-if="$ctrl.config.buttons" ng-click="$ctrl.onClick(\'increase\'); upDown({ model: $ctrl.model, digits: $ctrl.config.digits, step: $ctrl.config.step, direction: \'increase\', min: $ctrl.config.min, max: $ctrl.config.max })" on-touch="upDownRepeat({ model: $ctrl.model, digits: $ctrl.config.digits, step: $ctrl.config.step, direction: \'increase\', min: $ctrl.config.min, max: $ctrl.config.max })" on-release="upDownStop()"><i class="ion-android-add font-size-28"></i></button></div><keyboard ng-if="$ctrl.isKeyboardShow" data="$ctrl.keyboardModelName" on-load-callback="$ctrl.onKeyboardClose(arg1)"></keyboard></div>',
            restrict: 'E',
            require: {ngModelCtrl: 'ngModel'},
            bindToController: true,
            controllerAs: '$ctrl',
            bindings: {
                ngModel: '<'
            },
            scope: {
                config: '=',
                onChange: '&',
            },
            controller: ["$scope", class InputAmountComponent {
                constructor($scope) {
                    this.$scope = $scope;
                    this.model = {
                        value: 0
                    }

                    this.keyboardModelName = null;
                    this.isKeyboardShow = false;

                    this.defaultConfig = {
                        min: 0,
                        max: 999999,
                        step: 1,
                        digits: 0,
                        speedStep: 10,
                        label: 'Amount',
                        currencySign: '$',
                        valueType: 'currency',
                        valueLabel: '',
                        buttons: true,
                        readonly: false,
                        viewName: '',
                        strictValidation: true
                    }

                    this.modelWatch = $scope.$watch(
                        () => this.model.value,
                        () => this.onChange(this.model)
                    )
                }

                $onInit() {
                    this.config = _.merge(this.defaultConfig, this.config);

                    return $timeout(() => {
                        if (!this.ngModelCtrl.$modelValue.hasOwnProperty('value')) {
                            throw new Error('Input model should be an object with \'value\' field!');
                        }

                        if (typeof this.ngModelCtrl.$modelValue.value !== 'number') {
                            throw new Error('Input model is not a number!');
                        }

                        this.model = this.ngModelCtrl.$modelValue;

                        this.keyboardModelName = null;
                    }, 0)
                }

                $onDestroy() {
                    this.closeKeyboard();
                    this.modelWatch && this.modelWatch();
                }

                inputFocus(model, name) {
                    if (this.config.readonly) {
                        return;
                    }

                    this.isKeyboardShow = true;
                    this.keyboardModelName = {
                        model: model,
                        name: name,
                        minval: this.config.strictValidation ? this.config.min : 0,
                        maxval: this.config.strictValidation ? this.config.max : 10000000,
                        digits: this.config.digits,
                        viewName: this.config.viewName,
                    };
                };

                onKeyboardClose(arg) {
                    if (!arg) {
                        //close keyboard
                        this.closeKeyboard();
                        return;
                    }

                    // apply changes to model
                    this.model.value = Number(arg.model.value);
                    this.closeKeyboard();
                };

                closeKeyboard() {
                    this.isKeyboardShow = false;
                    this.keyboardModelName = null;
                }

                onClick(direction) {
                    console.log('Got click', direction);
                }
            }]
        }
    }
])

/**
 * Don't use it yet!
 */
appSocial.directive('scrollDetect', ['$rootScope',
    function ($rootScope) {
        return {
            restrict: 'A',
            link: function (scope, el, attrs) {
                let isScrolling = false;
                let scrollTimer;

                el.bind('scroll', (event) => {
                    this.startScroll();

                    scrollTimer = setTimeout(() => {
                        this.stopScroll();
                        clearTimeout(scrollTimer);
                    }, 500);
                });

                el.on('$destroy', () => {
                    this.stopScroll()
                    scrollTimer && clearTimeout(scrollTimer);
                    el.off('scroll');
                })

                this.startScroll = function () {
                    isScrolling = true;
                    $rootScope.$broadcast('scroll.start');
                };

                this.stopScroll = function () {
                    isScrolling = false;
                    $rootScope.$broadcast('scroll.stop');
                };
            }
        }
    }
])

appSocial.service('LeadersCompareService', [
    '$rootScope', 'SocialTypes',
    function ($rootScope, SocialTypes) {

        const COMPARE_LIMIT = 2;

        class LeadersCompareService {
            constructor() {
                this.$rootScope = $rootScope;

                this.traders = [];
                this.isComparing = false;
                this.limitReached = false;
            }

            /**
             * @param {Trader} trader
             */
            add(trader) {
                this.traders.push(trader);
                this.setLimitReached();
                $rootScope.$broadcast('leadersCompare.add', {trader});
            }

            /**
             * @param {Trader} trader
             */
            remove(trader) {
                _.remove(this.traders, {id: trader.id});
                this.setLimitReached();
                $rootScope.$broadcast('leadersCompare.remove', {trader});
            }

            /**
             * @param {Trader} trader
             * @return {boolean}
             */
            isTraderComparing(trader) {
                return !!_.find(this.traders, {id: trader.id});
            }

            enableSelection() {
                this.traders.length = 0;
                this.isComparing = true;
                $rootScope.$broadcast('leadersCompare.enableSelection')
            }

            disableSelection() {
                this.traders.length = 0;
                this.isComparing = false;
                $rootScope.$broadcast('leadersCompare.disableSelection')
            }

            setLimitReached() {
                this.limitReached = this.traders.length >= COMPARE_LIMIT;
            }

            getCompareLimit() {
                return COMPARE_LIMIT;
            }
        }


        return new LeadersCompareService()
    }]);

appSocial.service('LeaderCopyService', [
    '$rootScope', 'SocialTypes', 'SocialPortfolioService', 'SocialAPIService', 'SocialFavoriteService',
    function ($rootScope, SocialTypes, SocialPortfolioService, SocialAPIService, SocialFavoriteService) {

        class LeaderCopyService {
            constructor() {
                this.$rootScope = $rootScope;

                /**
                 * @type {SocialAPIService}
                 */
                this.api = SocialAPIService;

                /**
                 * @type {SocialPortfolioService}
                 */
                this.portfolioService = SocialPortfolioService;

                /**
                 * @type {SocialFavoriteService}
                 */
                this.favoriteService = SocialFavoriteService;
            }

            /**
             * @param {string} leaderId
             * @param {number} deposit
             * @param {number} stopLoss
             * @param {boolean} copyOpen
             * @return {Promise<void>}
             */
            followByLeader(leaderId, deposit, stopLoss, copyOpen) {
                return this.api.request.followByLeader({
                    leader_id: leaderId,
                    deposit: Number(deposit),
                    stop_loss: (Number(deposit) * Number(stopLoss)) / 100,
                    copy_open: copyOpen
                })
                    .then(() => this.portfolioService.reload())
                    .then(() => this.favoriteService.reload());
            }

            /**
             * @param {string }followId
             * @return {Promise<void>}
             */
            unfollowLeader(followId) {
                return this.api.request.unfollowLeader('', {follow_id: followId})
                    .then(() => this.portfolioService.reload())
                    .then(() => this.favoriteService.reload());
            }

            /**
             *
             * @param {string} followId
             * @param {number} deposit
             * @param {number} stopLoss - in percents
             * @return {Promise<void>}
             */
            updateFunds(followId, deposit, stopLoss) {
                return this.api.request.updateFollowDeposit('', {
                    follow_id: followId,
                    deposit: Number(deposit),
                    stop_loss: (Number(deposit) * Number(stopLoss)) / 100
                })
                    .then(() => this.portfolioService.reload())
                    .then(() => this.favoriteService.reload());
            }

            /**
             * @param {string} followId
             * @param {boolean} state
             * @return {Promise<void>}
             */
            updateState(followId, state) {
                return this.api.request.updateFollowState('', {
                    follow_id: followId,
                    state: state
                })
                    .then(() => this.portfolioService.reload())
                    .then(() => this.favoriteService.reload());
            }

        }

        return new LeaderCopyService()
    }]);

appSocial.service('SocialFeedService', [
    'SocialAPIService', 'SocialUserService', 'SocialUtils', 'Trader',
    function (SocialAPIService, SocialUserService, SocialUtils, Trader) {
        class SocialFeedService {
            constructor() {
                /**
                 * @type {SocialAPIService}
                 */
                this.api = SocialAPIService;
                /**
                 * @type {SocialUserService}
                 */
                this.userService = SocialUserService;
            }

            get(filter) {
                const query = this.createQuery(filter);
                return this.api.request.getFeed(query)
                    .then((response) => response.traders.map(item => new Trader(item)))
            }

            createQuery(filter) {
                return SocialUtils.createQuery(filter);
            }
        }

        return new SocialFeedService()
    }]);

appSocial.service('LeadersSearchService', [
    '$rootScope', 'SocialTypes', 'SocialConstants', 'SocialLocaleService',
    function ($rootScope, SocialTypes, SocialConstants, SocialLocaleService) {

        const {FieldOperation, Op} = SocialTypes;

        class LeadersSearchService {
            constructor() {
                this.constants = SocialConstants;
                this.translation = SocialLocaleService.translation;
                this.$rootScope = $rootScope;

                this.defaultSearch = {
                    country: [],
                    risk: null,
                    market: [],
                    trade: null,
                    tradeSize: null,
                    minGain: null,
                    dateRange: {id: 'thisTwoYears', label: this.translation['thisTwoYears']},
                };
                this.search = _.cloneDeep(this.defaultSearch);
                this.order = 'desc';
                this.customSearch = {};
            }

            reset() {
                this.search = _.cloneDeep(this.defaultSearch);
                this.$rootScope.$emit('LeadersSearchService.reset')
            }

            get() {
                return _.cloneDeep(this.search);
            }

            resetCustomSearch() {
                this.customSearch = null;
            }

            createFields(limit = 20, page = 0) {
                return this.convertToFields(limit, page);
            }

            updateSearch() {
                this.$rootScope.$emit('LeadersSearchService.change')
            }

            saveSearch() {
                this.customSearch = _.cloneDeep(this.search);
            }

            restoreSearch() {
                if (this.customSearch) {
                    this.search.country = this.customSearch.country;
                    this.search.risk = this.customSearch.risk;
                    this.search.market = this.customSearch.market;
                    this.search.trade = this.customSearch.trade;
                    this.search.tradeSize = this.customSearch.tradeSize;
                    this.search.minGain = this.customSearch.minGain;
                    this.search.dateRange = this.customSearch.dateRange;
                }
            }

            convertToFields(limit, page) {
                const filter = {
                    fields: [],
                    order: [],
                    limit: limit,
                    page: page,
                    dateRange: 'all'
                };

                const countries = this.search.country.map(item => {
                    return {
                        name: 'country',
                        op: FieldOperation.Match,
                        value: item.code,
                        next: Op.Or
                    };
                });
                if (countries.length) {
                    //update last item's 'next' operation to 'AND'
                    countries[countries.length - 1].next = Op.And;
                    filter.fields = _.concat(filter.fields, countries);
                }

                const markets = this.search.market.map(item => {
                    return {
                        name: 'markets',
                        op: FieldOperation.Match,
                        value: item.id,
                        next: Op.Or
                    };
                });
                if (markets.length) {
                    //update last item's 'next' operation to 'AND'
                    markets[markets.length - 1].next = Op.And;
                    filter.fields = _.concat(filter.fields, markets);
                }

                if (this.search.minGain !== null) {
                    const gain = {
                        name: 'gain',
                        op: FieldOperation.GreaterThan,
                        value: Number(this.search.minGain) / 100,
                        next: Op.And
                    };

                    filter.fields.push(gain);
                }

                if (this.search.risk) {
                    const riskFrom = {
                        name: 'risk_score',
                        op: FieldOperation.GreaterEqual,
                        value: this.search.risk.range[0],
                        next: Op.And
                    };
                    const riskTo = {
                        name: 'risk_score',
                        op: FieldOperation.LessThan,
                        value: this.search.risk.range[1],
                        next: Op.And
                    };

                    filter.fields = _.concat(filter.fields, [riskFrom, riskTo]);
                }

                if (this.search.trade) {
                    const tradeFrom = {
                        name: 'trades_count',
                        op: FieldOperation.GreaterEqual,
                        value: this.search.trade.range[0],
                        next: Op.And
                    };
                    const tradeTo = {
                        name: 'trades_count',
                        op: FieldOperation.LessThan,
                        value: this.search.trade.range[1],
                        next: Op.And
                    };

                    filter.fields = _.concat(filter.fields, [tradeFrom, tradeTo]);
                }

                if (this.search.tradeSize) {
                    const tradeFrom = {
                        name: 'avg_trade_length',
                        op: FieldOperation.GreaterEqual,
                        value: this.search.tradeSize.range[0],
                        next: Op.And
                    };
                    const tradeTo = {
                        name: 'avg_trade_length',
                        op: FieldOperation.LessThan,
                        value: this.search.tradeSize.range[1],
                        next: Op.And
                    };

                    filter.fields = _.concat(filter.fields, [tradeFrom, tradeTo]);
                }

                if (this.search.dateRange) {
                    filter.dateRange = this.search.dateRange.id;
                }

                return filter;
            }
        }

        return new LeadersSearchService()
    }]);

appSocial.service('SocialFavoriteService', [
    '$rootScope', 'SocialAPIService', 'SocialUserService', 'SocialPortfolioService', 'Trader',
    function ($rootScope, SocialAPIService, SocialUserService, SocialPortfolioService, Trader) {

        class SocialFavoriteService {
            constructor() {
                /**
                 * @type {SocialAPIService}
                 */
                this.api = SocialAPIService;
                /**
                 * @type {SocialUserService}
                 */
                this.userService = SocialUserService;
                /**
                 * @type {SocialPortfolioService}
                 */
                this.portfolioService = SocialPortfolioService;

                /**
                 * @type {Trader[]}
                 */
                this.traders = [];

                this.isLocal = true;
            }

            init() {
                const user = this.userService.get();
                if (user.id) {
                    return this.api.request.getFavorites()
                        .then((response) => response.traders.map(item => {
                            const trader = new Trader(item);
                            trader.isFavorite = true;
                            return trader;
                        }))
                        .then((traders) => this.portfolioService.reInitLeaders(traders))
                        .then((traders) => {
                            this.isLocal = false;
                            this.traders = traders;
                        });
                }
                return Promise.resolve();
            }


            reload() {
                return this.init();
            }

            clear() {
                this.traders = [];
                this.isLocal = true;
            }

            /**
             *
             * @param {string} traderId
             * @return {boolean}
             */
            isFavorite(traderId) {
                return !!_.find(this.traders, {id: traderId});
            }

            /**
             * Add to favorites
             * @param {Trader} trader
             * @return {*}
             */
            addFavorite(trader) {
                trader.isFavorite = true;
                this.traders.push(trader);

                if (!this.isLocal) {
                    return this.api.request.addFavorite({leader_id: trader.id})
                        .then(() => $rootScope.$emit('SocialFavoriteService.change'));
                }

                $rootScope.$emit('SocialFavoriteService.change');
            }

            /**
             * Remove from favorites
             * @param {Trader} trader
             * @return {*}
             */
            deleteFavorite(trader) {
                trader.isFavorite = false;
                _.remove(this.traders, {id: trader.id});

                if (!this.isLocal) {
                    return this.api.request.deleteFavorite('', {leader_id: trader.id})
                        .then(() => $rootScope.$emit('SocialFavoriteService.change'));
                }

                $rootScope.$emit('SocialFavoriteService.change');
            }

            /**
             * Toggle
             * @param {Trader} trader
             */
            toggleFavorite(trader) {
                if (trader.isFavorite) {
                    this.deleteFavorite(trader);
                } else {
                    this.addFavorite(trader);
                }
            }
        }


        return new SocialFavoriteService();
    }])

appSocial.service('SocialPortfolioService', ['SocialAPIService', 'SocialUserService', 'SocialConstants', 'Trader',
    function (SocialAPIService, SocialUserService, SocialConstants, Trader) {

        class SocialPortfolioService {
            constructor() {
                /**
                 * @type {Trader[]}
                 */
                this.leaders = [];
                /**
                 * @type {SocialAPIService}
                 */
                this.api = SocialAPIService;
                /**
                 * @type {SocialUserService}
                 */
                this.userService = SocialUserService;
            }

            init() {
                this.leaders = [];
                const user = this.userService.get();
                if (user.id) {
                    return this.api.request.getLeaders({page: 0, limit: 100})
                        .then((response) => response.leaders.map(item => {
                            const rawLeader = {
                                follow_id: item.follow_id,
                                deposit: item.deposit,
                                stop_loss: item.stop_loss,
                                balance: item.balance,
                                state: item.state,
                                follow_start: item.follow_start,
                                stopped: item.stopped,
                                pnl: item.pnl,
                            };
                            const trader = new Trader(item.trader);
                            trader.initLeader(rawLeader);
                            return trader;
                        }))
                        .then((leaders) => {
                            this.leaders = leaders;
                            //this.onChange$.next();
                        });
                }
                return Promise.resolve();
            }

            get sumFollowBalance() {
                return this.leaders.reduce((acc, cur) => acc + cur.followBalance, 0);
            }

            isFollowed(traderId) {
                return !!_.find(this.leaders, {id: traderId});
            }

            reload() {
                return this.init();
            }

            /**
             *
             * @param {string} traderId
             * @return {Trader}
             */
            get(traderId) {
                return _.find(this.leaders, {id: traderId});
            }

            getAll() {
                return this.leaders;
            }

            clear() {
                this.leaders = [];
                //this.onChange$.next();
            }

            getExposure() {
                return this.api.request.getExposure()
                    .then((response) => {
                        const markets = SocialConstants.markets.map(market => {
                            const tradesByMarket = find(response.data, {market: market.id});
                            return {
                                name: market.id.toLowerCase(),
                                percentage: tradesByMarket ? tradesByMarket.percentage : 0,
                            };
                        });
                        return _.orderBy(markets, ['percentage'], 'desc');
                    });
            }

            /**
             * Set/unset leader properties on trader if it exists in portfolio
             * @param {Trader} trader
             */
            initLeader(trader) {
                const leader = this.get(trader.id);
                if (leader) {
                    trader.isFollowed = true;
                    trader.followId = leader.followId;
                    trader.followDeposit = leader.followDeposit;
                    trader.followStopLoss = leader.followStopLoss;
                    trader.followBalance = leader.followBalance;
                    trader.followState = leader.followState;
                    trader.followPnl = leader.followPnl;
                    trader.followPnlPercents = leader.followPnlPercents;
                } else {
                    trader.isFollowed = false;
                    trader.followId = null;
                    trader.followDeposit = null;
                    trader.followStopLoss = null;
                    trader.followBalance = null;
                    trader.followState = null;
                    trader.followPnl = null;
                    trader.followPnlPercents = null;
                }
            }

            /**
             * @param {Trader[]} traders
             * @return {Trader[]}
             */
            reInitLeaders(traders) {
                traders.forEach((trader) => this.initLeader(trader));
                return traders;
            }
        }

        return new SocialPortfolioService();
    }]);

appSocial.component('category', {
    template:'<ion-scroll class="menuWrap font-14" scrollbar-x="false" direction="x" has-bouncing="false"><div class="titleHolder" ng-if="$ctrl.activeCategory && $ctrl.activeCategory.id===\'custom-search\'"><span class="titleItem active-category" on-tap="$ctrl.resetCategory()">{{$ctrl.translation.customSearch}} <i class="social-icon-clear font-size-13"></i></span></div><div class="titleHolder" ng-if="$ctrl.activeCategory && $ctrl.activeCategory.id!==\'custom-search\'" ng-repeat="category in $ctrl.categories" on-tap="$ctrl.setCategory(category)"><span class="titleItem" ng-if="category.show" ng-class="{\'active-category\':category.active}">{{::$ctrl.translation[category.title] || category.title}}</span></div></ion-scroll>',
    bindings: {
        categories: '<',
        activeCategory: '<',
        onSelect: '&'
    },
    controller: ["$state", "SocialLocaleService", class CategoryComponent {
        constructor($state, SocialLocaleService) {
            this.translation = SocialLocaleService.translation;
            this.$state = $state;
        }

        setCategory(category) {
            // TODO set scroll position to active category
            this.onSelect({value: category});
        }

        resetCategory() {
            this.onSelect({value: this.categories[0]})
        }

        $onInit() {
        }

        $onChanges(changes) {
        }
    }]
});

appSocial.component('compareCouple', {
    template:'<div class="layout-column full-width"><div class="layout-row"><div class="layout-column full-width content-gap16"><div class="layout-row compare-header"><div class="layout-column width-25 just-center align-center"><avatar class="auto" trader="$ctrl.leaderLeft" on-tap="$ctrl.leaderLeft && $ctrl.utils.navigate(\'root.app.socialLeader\',{id:$ctrl.leaderLeft.id})"></avatar></div><div class="layout-column width-50 just-center"><div class="layout-row align-center"><div class="layout-column delimiter shrinkable align-center" ng-click="$ctrl.clearLeft()"><div class="social-icon-clear font-size-20" ng-if="$ctrl.leaderLeft"></div></div><div class="layout-column pad-left-08 pad-right-08 roboto-bold font-size-17">{{$ctrl.translation.vs}}</div><div class="layout-column delimiter shrinkable align-center" ng-click="$ctrl.clearRight()"><div class="social-icon-clear font-size-20" ng-if="$ctrl.leaderRight"></div></div></div></div><div class="layout-column width-25 just-center align-center"><avatar class="auto" trader="$ctrl.leaderRight" on-tap="$ctrl.leaderRight && $ctrl.utils.navigate(\'root.app.socialLeader\',{id:$ctrl.leaderRight.id})"></avatar></div></div><div class="layout-row compare-details content-gap10"><div class="layout-column full-width content-gap16"><div class="layout-row"><div class="layout-column width-25 align-center"><span ng-if="$ctrl.leaderLeft"><span class="roboto-bold font-size-17">{{$ctrl.leaderLeft.gain | number:2}}</span> <span class="font-size-11">%</span></span></div><div class="layout-column width-50 align-center"><div class="layout-row align-center full-width"><div class="layout-column delimiter width-20"></div><div class="layout-column font-size-11 width-60 align-center">{{$ctrl.translation.gainLastMonth}}</div><div class="layout-column delimiter width-20"></div></div></div><div class="layout-column width-25 align-center"><span ng-if="$ctrl.leaderRight"><span class="roboto-bold font-size-17">{{$ctrl.leaderRight.gain | number:2}}</span> <span class="font-size-11">%</span></span></div></div><div class="layout-row"><div class="layout-column width-25 align-center"><span ng-if="$ctrl.leaderLeft"><span class="font-size-15">{{$ctrl.leaderLeft.absGain | number:2}}</span> <span class="font-size-11">%</span></span></div><div class="layout-column width-50 align-center"><div class="layout-row align-center full-width"><div class="layout-column delimiter width-20"></div><div class="layout-column font-size-11 width-60 align-center">{{$ctrl.translation.absoluteGain}}</div><div class="layout-column delimiter width-20"></div></div></div><div class="layout-column width-25 align-center"><span ng-if="$ctrl.leaderRight"><span class="font-size-15">{{$ctrl.leaderRight.absGain | number:2}}</span> <span class="font-size-11">%</span></span></div></div><div class="layout-row"><div class="layout-column width-25 align-center"><div ng-if="$ctrl.leaderLeft" class="risk-indicator circled font-size-13" ng-class="$ctrl.leaderLeft.getRisk()">{{$ctrl.leaderLeft.riskScore}}</div></div><div class="layout-column width-50 align-center"><div class="layout-row align-center full-width"><div class="layout-column delimiter width-20"></div><div class="layout-column font-size-11 width-60 align-center">{{$ctrl.translation.riskLevel}}</div><div class="layout-column delimiter width-20"></div></div></div><div class="layout-column width-25 align-center"><div ng-if="$ctrl.leaderRight" class="risk-indicator circled font-size-13" ng-class="$ctrl.leaderRight.getRisk()">{{$ctrl.leaderRight.riskScore}}</div></div></div><div class="layout-row"><div class="layout-column width-25 align-center"><span class="font-size-15" ng-if="$ctrl.leaderLeft">{{$ctrl.leaderLeft.followersCount}}</span></div><div class="layout-column width-50 align-center"><div class="layout-row align-center full-width"><div class="layout-column delimiter width-20"></div><div class="layout-column font-size-11 width-60 align-center">{{$ctrl.translation.currentCopiers}}</div><div class="layout-column delimiter width-20"></div></div></div><div class="layout-column width-25 align-center"><span class="font-size-15" ng-if="$ctrl.leaderRight">{{$ctrl.leaderRight.followersCount}}</span></div></div><div class="layout-row"><div class="layout-column width-25 align-center"><span class="font-size-15" ng-if="$ctrl.leaderLeft">{{$ctrl.leaderLeft.lifetime | duration:\'about\'}}</span></div><div class="layout-column width-50 align-center"><div class="layout-row align-center full-width"><div class="layout-column delimiter width-20"></div><div class="layout-column font-size-11 width-60 align-center">{{$ctrl.translation.lifetime}}</div><div class="layout-column delimiter width-20"></div></div></div><div class="layout-column width-25 align-center"><span class="font-size-15" ng-if="$ctrl.leaderRight">{{$ctrl.leaderRight.lifetime | duration:\'about\'}}</span></div></div><div class="layout-row"><div class="layout-column width-25 align-center"><span class="font-size-15" ng-if="$ctrl.leaderLeft">{{$ctrl.leaderLeft.investedCapital | currency:\'$\':0}}</span></div><div class="layout-column width-50 align-center"><div class="layout-row align-center full-width"><div class="layout-column delimiter width-20"></div><div class="layout-column font-size-11 width-60 align-center">{{$ctrl.translation.investedCapital}}</div><div class="layout-column delimiter width-20"></div></div></div><div class="layout-column width-25 align-center"><span class="font-size-15" ng-if="$ctrl.leaderRight">{{$ctrl.leaderRight.investedCapital | currency:\'$\':0}}</span></div></div><div class="layout-row" ng-if="$ctrl.moreParameters"><div class="layout-column width-25 align-center"><span class="font-size-15" ng-if="$ctrl.leaderLeft">{{$ctrl.leaderLeft.tradesCount}}</span></div><div class="layout-column width-50 align-center"><div class="layout-row align-center full-width"><div class="layout-column delimiter width-20"></div><div class="layout-column font-size-11 width-60 align-center">{{$ctrl.translation.numOfTrades}}</div><div class="layout-column delimiter width-20"></div></div></div><div class="layout-column width-25 align-center"><span class="font-size-15" ng-if="$ctrl.leaderRight">{{$ctrl.leaderRight.tradesCount}}</span></div></div><div class="layout-row" ng-if="$ctrl.moreParameters"><div class="layout-column width-25 align-center"><span class="font-size-15" ng-if="$ctrl.leaderLeft">{{$ctrl.leaderLeft.avgTradeLength | duration:\'about\'}}</span></div><div class="layout-column width-50 align-center"><div class="layout-row align-center full-width"><div class="layout-column delimiter width-20"></div><div class="layout-column font-size-11 width-60 align-center">{{$ctrl.translation.avgTradeTime}}</div><div class="layout-column delimiter width-20"></div></div></div><div class="layout-column width-25 align-center"><span class="font-size-15" ng-if="$ctrl.leaderRight">{{$ctrl.leaderRight.avgTradeLength | duration:\'about\'}}</span></div></div><div class="layout-row" ng-if="$ctrl.moreParameters"><div class="layout-column width-25 align-center"><span class="font-size-15" ng-if="$ctrl.leaderLeft">{{$ctrl.leaderLeft.avgWin | number:2}}%</span></div><div class="layout-column width-50 align-center"><div class="layout-row align-center full-width"><div class="layout-column delimiter width-20"></div><div class="layout-column font-size-11 width-60 align-center">{{$ctrl.translation.winningTrades}}</div><div class="layout-column delimiter width-20"></div></div></div><div class="layout-column width-25 align-center"><span class="font-size-15" ng-if="$ctrl.leaderRight">{{$ctrl.leaderRight.avgWin | number:2}}%</span></div></div><div class="layout-row" ng-if="$ctrl.moreParameters"><div class="layout-column width-25 align-center"><span class="font-size-15" ng-if="$ctrl.leaderLeft">{{$ctrl.leaderLeft.drawdown | number:2}}%</span></div><div class="layout-column width-50 align-center"><div class="layout-row align-center full-width"><div class="layout-column delimiter width-20"></div><div class="layout-column font-size-11 width-60 align-center">{{$ctrl.translation.maxDrawdown}}</div><div class="layout-column delimiter width-20"></div></div></div><div class="layout-column width-25 align-center"><span class="font-size-15" ng-if="$ctrl.leaderRight">{{$ctrl.leaderRight.drawdown | number:2}}%</span></div></div><div class="layout-row" ng-if="$ctrl.moreParameters"><div class="layout-column width-25 align-center"><span class="font-size-15" ng-if="$ctrl.leaderLeft">{{$ctrl.leaderLeft.favored}}</span></div><div class="layout-column width-50 align-center"><div class="layout-row align-center full-width"><div class="layout-column delimiter width-20"></div><div class="layout-column font-size-11 width-60 align-center">{{$ctrl.translation.followers}}</div><div class="layout-column delimiter width-20"></div></div></div><div class="layout-column width-25 align-center"><span class="font-size-15" ng-if="$ctrl.leaderRight">{{$ctrl.leaderRight.favored}}</span></div></div><div class="layout-row" ng-if="$ctrl.moreParameters"><div class="layout-column width-25 align-center"><span class="font-size-15" ng-if="$ctrl.leaderLeft">{{$ctrl.leaderLeft.popularity}}</span></div><div class="layout-column width-50 align-center"><div class="layout-row align-center full-width"><div class="layout-column delimiter width-20"></div><div class="layout-column font-size-11 width-60 align-center">{{$ctrl.translation.numOfViews}}</div><div class="layout-column delimiter width-20"></div></div></div><div class="layout-column width-25 align-center"><span class="font-size-15" ng-if="$ctrl.leaderRight">{{$ctrl.leaderRight.popularity}}</span></div></div><div class="layout-row"><div class="layout-column width-25"><button class="button-social accent shadowless font-size-13 blue" ng-if="$ctrl.leaderLeft" ng-class="{ \'blue\':!$ctrl.leaderLeft.isFollowed, \'green\':$ctrl.leaderLeft.isFollowed}" ng-click="$event.stopPropagation();$ctrl.callAction($ctrl.leaderLeft);">{{$ctrl.leaderLeft.isFollowed ? $ctrl.translation.addFunds : $ctrl.translation.copy}}</button></div><div class="layout-column width-50"></div><div class="layout-column width-25"><button class="button-social accent shadowless font-size-13 blue" ng-if="$ctrl.leaderRight" ng-class="{ \'blue\':!$ctrl.leaderRight.isFollowed, \'green\':$ctrl.leaderRight.isFollowed}" ng-click="$event.stopPropagation();$ctrl.callAction($ctrl.leaderRight);">{{$ctrl.leaderRight.isFollowed ? $ctrl.translation.addFunds : $ctrl.translation.copy}}</button></div></div><div class="layout-row margin-bottom-24"><div class="layout-column full-width align-center as-link" ng-click="$ctrl.toggleMoreParameters()">{{$ctrl.moreParameters ? $ctrl.translation.minimizeParameters : $ctrl.translation.viewMoreParams}}</div></div></div></div></div></div></div>',
    controller: ["$scope", "SocialLocaleService", "SocialUtils", "LeadersCompareService", "SocialActionService", "SocialTypes", class CompareCoupleComponent {
        constructor($scope,
                    SocialLocaleService,
                    SocialUtils,
                    LeadersCompareService,
                    SocialActionService,
                    SocialTypes) {

            this.translation = SocialLocaleService.translation;

            /**
             * @type {LeadersCompareService}
             */
            this.compareService = LeadersCompareService;

            /**
             * @type {SocialUtils}
             */
            this.utils = SocialUtils;

            /**
             * @type {SocialActionService}
             */
            this.actionService = SocialActionService;

            /**
             * @type {SocialTypes}
             */
            this.types = SocialTypes;

            /**
             * @type {Trader}
             */
            this.leaderLeft = this.compareService.traders[0];

            /**
             * @type {Trader}
             */
            this.leaderRight = this.compareService.traders[1];

            $scope.$on('leadersCompare.add', (event, data) => {
                if (!this.leaderLeft) {
                    this.leaderLeft = data.trader;
                } else {
                    this.leaderRight = data.trader;
                }
            });
            $scope.$on('leadersCompare.remove', (event, data) => {
                if (this.leaderLeft && (this.leaderLeft.id === data.trader.id)) {
                    this.leaderLeft = null;
                }

                if (this.leaderRight && (this.leaderRight.id === data.trader.id)) {
                    this.leaderRight = null;
                }
            });
        }

        $onInit() {
            this.moreParameters = false;
        }

        $onChanges(changes) {
        }

        $onDestroy() {
        }

        toggleMoreParameters() {
            this.moreParameters = !this.moreParameters;
        }

        stopComparing() {
            this.compareService.disableSelection();
        }

        clearLeft() {
            if (!this.leaderLeft) {
                return;
            }
            this.compareService.remove(this.leaderLeft);
            this.leaderLeft = null;
        }

        clearRight() {
            if (!this.leaderRight) {
                return;
            }
            this.compareService.remove(this.leaderRight);
            this.leaderRight = null;
        }

        callAction(trader) {
            const {CopyAction} = this.types;
            if (trader.isFollowed) {
                return this.utils.navigate('root.app.socialFunds', {id: trader.id, action: CopyAction.AddFunds})
            }

            this.actionService.stateCheck({trader, action: CopyAction.StartCopy})
        }
    }]
});

appSocial.component('compareIndicator', {
    template:'<div class="layout-row align-center full-height" ng-if="$ctrl.compareService.isComparing"><div class="layout-column" on-tap="$ctrl.stopComparing()"><i class="social-icon-clear font-size-17"></i></div><div class="layout-column">{{$ctrl.compareService.traders.length}} {{$ctrl.selectedTranslation}}</div><div class="layout-column"><button class="button-social decent blue shadowless wide" on-tap="$ctrl.utils.navigate(\'root.app.socialCompare\')">{{$ctrl.translation.compare}}</button></div></div>',
    controller: ["$scope", "SocialUtils", "SocialLocaleService", "LeadersCompareService", class CompareIndicatorComponent {
        constructor($scope,
                    SocialUtils,
                    SocialLocaleService,
                    LeadersCompareService) {
            this.translation = SocialLocaleService.translation;
            this.utils = SocialUtils;
            /**
             * @type {LeadersCompareService}
             */
            this.compareService = LeadersCompareService;

        }

        $onInit() {
            this.selectedTranslation = this.utils.renderTranslation(this.translation.selected, {
                num: this.compareService.getCompareLimit()
            })
        }

        $onChanges(changes) {
        }

        $onDestroy() {
        }

        stopComparing() {
            this.compareService.disableSelection();
        }
    }]
});

appSocial.component('leaderCopy', {
    template:'<div class="layout-column full-width"><div class="layout-row upper-area pad-top-05"><div class="layout-column full-width content-gap16"><div class="layout-row"><div class="layout-column full-width content-gap06"><div class="layout-row just-center font-size-25 social-color-positive roboto-bold">{{$ctrl.trader.fullname}}</div><div class="layout-row just-center align-base"><span ng-class="{ \'social-color-positive\':$ctrl.trader.gain > 0, \'social-color-negative\':$ctrl.trader.gain < 0 }"><span class="font-size-13">{{$ctrl.trader.gain | number:2}}</span> <span class="font-size-11">%</span></span> <span class="font-size-13 margin-left-05">{{$ctrl.translation.gain}}</span></div></div></div><div class="layout-row"><input-amount config="$ctrl.amountConfig" ng-model="$ctrl.amount" on-change="$ctrl.onAmountChange()" class="layout-column full-width"></input-amount></div><div class="layout-row just-center"><span class="font-size-11">{{$ctrl.translation.amountEqual1}} {{$ctrl.amount.value | currencyConvert:\'USD\':$ctrl.user.currency | cryptoCurrency: $ctrl.user.currency}}, {{$ctrl.translation.amountEqual2}}</span></div><div class="layout-row just-center"><span class="font-size-11 social-color-negative" ng-if="$ctrl.validationMessage.length">{{$ctrl.validationMessage}}</span></div></div></div><div class="layout-row bottom-area" ng-if="$ctrl.action === $ctrl.actions.StartCopy"><div class="layout-column content-gap20"><div class="layout-row align-center"><div class="layout-column full-width"><div class="layout-row align-center stop-loss-area"><div class="layout-column shrinkable display-block">{{$ctrl.translation.stopCopyingIfCopyDrops}} <span class="roboto-bold">{{$ctrl.stopLoss}}%</span></div><div class="layout-column width-10 align-end" ng-if="!$ctrl.editStopLoss" on-tap="$ctrl.toggleEditStopLoss()"><i class="icon-mode_edit font-size-18"></i></div></div><div class="layout-row align-center" ng-if="$ctrl.editStopLoss"><input type="range" min="{{$ctrl.stopLossRange.min}}" max="{{$ctrl.stopLossRange.max}}" ng-model="$ctrl.stopLoss"></div><div class="layout-row align-center range-label" ng-if="$ctrl.editStopLoss"><div ng-style="{\'left\': ($ctrl.stopLossLabelOffset)+\'%\'}">{{$ctrl.stopLoss}}% <span class="social-color-muted">({{$ctrl.stopLossAmount | cryptoCurrency: \'USD\'}})</span></div></div></div></div><div class="layout-row align-center"><div class="layout-column full-width content-gap20"><div class="layout-row content-gap10 just-start align-center"><div class="layout-column"><input type="checkbox" class="checkbox-social" ng-model="$ctrl.copyOpen" id="copy-open"></div><label class="layout-column" for="copy-open">{{$ctrl.translation.copyOpenTrades}}</label></div><div class="layout-row font-size-11 social-color-base2">{{$ctrl.translation.openTradesWillBeCopied}}</div></div></div></div></div><div class="layout-row bottom-area stop-copy-area" ng-if="$ctrl.action === $ctrl.actions.StopCopy"><div class="layout-column full-width"><div class="layout-row align-center"><div class="layout-column">{{$ctrl.translation.amountInvested}}</div><div class="layout-column align-end">{{$ctrl.trader.followDeposit | currencyConvert:$ctrl.user.currency:\'USD\' | cryptoCurrency:\'USD\'}}</div></div><div class="layout-row align-center"><div class="layout-column">{{$ctrl.translation.profitAndLoss}}</div><div class="layout-column align-end">{{$ctrl.trader.followPnl | currencyConvert:$ctrl.user.currency:\'USD\' | cryptoCurrency:\'USD\'}}</div></div><div class="layout-row align-center"><div class="layout-column roboto-bold">{{$ctrl.translation.totalCurrentAmount}}</div><div class="layout-column align-end roboto-bold">{{($ctrl.trader.followDeposit + $ctrl.trader.followPnl) | currencyConvert:$ctrl.user.currency:\'USD\' | cryptoCurrency:\'USD\'}}</div></div><div class="layout-row font-size-11 align-center">{{$ctrl.translation.stopCopyText}}</div></div></div></div>',
    bindings: {
        trader: '<',
        action: '<',
        onSuccess: '&',
        onStart: '&',
        onFail: '&',
        onValidation: '&'
    },
    controller: [
        '$scope',
        'SocialUserService',
        'SocialLocaleService',
        'SocialFavoriteService',
        'SocialPortfolioService',
        'SocialUtils',
        'SocialConstants',
        'SocialTypes',
        'LeaderCopyService',
        '$timeout',
        '$filter',
        class LeaderCopyComponent {
            constructor(
                $scope,
                SocialUserService,
                SocialLocaleService,
                SocialFavoriteService,
                SocialPortfolioService,
                SocialUtils,
                SocialConstants,
                SocialTypes,
                LeaderCopyService,
                $timeout,
                $filter
            ) {

                /**
                 * @type {SocialUserService}
                 */
                this.userService = SocialUserService;

                /**
                 * @type {SocialFavoriteService}
                 */
                this.favoriteService = SocialFavoriteService;

                /**
                 * @type {SocialPortfolioService}
                 */
                this.portfolioService = SocialPortfolioService;

                /**
                 * @type {LeaderCopyService}
                 */
                this.leaderCopyService = LeaderCopyService;

                /**
                 * @type {SocialUtils}
                 */
                this.utils = SocialUtils;

                this.actions = SocialTypes.CopyAction;

                this.validationTypes = SocialTypes.ValidationTypes;

                this.$timeout = $timeout;

                this.currencyConvertPipe = $filter('currencyConvert');

                this.currencyPipe = $filter('cryptoCurrency');

                this.translation = SocialLocaleService.translation;

                this.user = this.userService.get();

                this.amountConfig = {
                    min: 250,
                    max: 1000,
                    digits: 0,
                    step: 50,
                    viewName: this.translation.addFunds,
                    strictValidation: false
                }

                this.amount = {
                    value: this.calcAmount()
                };

                // converted to USD user balance
                this.maxAmount = 0;

                this.depositAmount = 0;

                // copy open trades
                this.copyOpen = false;

                // initial stoploss value in percents
                this.stopLoss = 65;

                this.editStopLoss = false;

                this.stopLossRange = {
                    min: 10,
                    max: 90
                }

                this.stopLossLabelOffset = this.stopLoss;

                this.watchAmount = $scope.$watch(() => this.stopLoss, (newVal, oldVal) => {
                    this.stopLossLabelOffset = this.stopLoss;
                    this.stopLossAmount = this.amount.value / 100 * this.stopLoss;
                });

                // stoploss amount in usd
                this.stopLossAmount = this.amount.value / 100 * this.stopLoss;
                this.watchStopLossAmount = $scope.$watch(() => this.amount.value, () => {
                    this.stopLossAmount = this.amount.value / 100 * this.stopLoss;
                })

                this.watchActionStart = $scope.$on(this.actions.StartCopy, () => this.copy());
                this.watchActionStop = $scope.$on(this.actions.StopCopy, () => this.stopCopy());

                this.validationMessage = '';
            }


            $onInit() {
                this.maxAmount = this.currencyConvertPipe((this.user.balance - this.portfolioService.sumFollowBalance), this.user.currency, 'USD');
                this.amountConfig.max = this.maxAmount;

                if (this.action === this.actions.StopCopy) {
                    this.amount.value = this.currencyConvertPipe(this.trader.followDeposit, this.user.currency, 'USD');
                    this.amountConfig = _.merge(this.amountConfig, {
                        readonly: true,
                        buttons: false
                    })
                }
            }

            $onDestroy() {
                this.watchAmount && this.watchAmount();
                this.watchActionStart && this.watchActionStart();
                this.watchActionStop && this.watchActionStop();
                this.watchStopLossAmount && this.watchStopLossAmount();
            }

            onAmountChange() {
                this.depositAmount = this.amount.value;
                const usdAmount = this.currencyConvertPipe(this.user.balance, this.user.currency, 'USD');

                // validation is not applicable for stop copy
                if (this.action === this.actions.StopCopy) {
                    return;
                }

                // validate amount
                if (this.depositAmount < this.amountConfig.min) {
                    this.validationMessage = `${this.translation.minAmount} ${this.currencyPipe(this.amountConfig.min, 'USD')}`;
                    this.onValidation({error: this.validationTypes.MinAmount});
                    return;
                }

                // validate funds
                if (this.depositAmount > this.amountConfig.max) {
                    this.validationMessage = this.translation.noSufficientFunds;
                    this.onValidation({error: this.validationTypes.Balance});
                    return;
                }

                if (this.depositAmount > this.amountConfig.max) {
                    this.validationMessage = `${this.translation.maxAmount} ${this.currencyPipe(this.amountConfig.max, 'USD')}`;
                    this.onValidation({error: this.validationTypes.MaxAmount});
                    return;
                }


                // any other case - validation success
                this.validationMessage = '';
                this.onValidation();

            }

            copy() {
                this.onStart();

                const amount = Number(this.currencyConvertPipe(this.amount.value, 'USD', this.user.currency));

                return this.leaderCopyService.followByLeader(this.trader.id, amount, this.stopLoss, this.copyOpen)
                    .then(() => {
                        this.onSuccess({amount: this.amount.value});
                    })
                    .catch(err => {
                        this.onFail({error: err});
                    })
            }

            stopCopy() {
                this.onStart();

                return this.leaderCopyService.unfollowLeader(this.trader.followId)
                    .then(() => {
                        this.onSuccess();
                    })
                    .catch(err => {
                        this.onFail({error: err});
                    })
            }

            calcAmount() {
                function roundHundred(value) {
                    return Math.round(value / 100) * 100;
                }

                const usdAmount = this.currencyConvertPipe(this.user.balance, this.user.currency, 'USD');
                const amount = Math.max(1000, Math.round((0.25 * usdAmount) / 100) * 100);

                console.log({
                    balance: this.user.balance,
                    usdAmount,
                    amount,
                    rounded: roundHundred(amount)
                })
                return roundHundred(amount);
            }

            toggleEditStopLoss() {
                this.editStopLoss = !this.editStopLoss;
            }
        }]
})

appSocial.component('leaderFunds', {
    template:'<div class="layout-column full-width content-gap20"><div class="layout-row upper-area pad-top-05"><div class="layout-column full-width content-gap16"><div class="layout-row"><div class="layout-column full-width content-gap06"><div class="layout-row just-center font-size-25 social-color-positive roboto-bold">{{$ctrl.trader.fullname}}</div><div class="layout-row just-center align-base"><span ng-class="{ \'social-color-positive\':$ctrl.trader.gain > 0, \'social-color-negative\':$ctrl.trader.gain < 0 }"><span class="font-size-13">{{$ctrl.trader.gain | number:2}}</span> <span class="font-size-11">%</span></span> <span class="font-size-13 margin-left-05">{{$ctrl.translation.gain}}</span></div></div></div><div class="layout-row"><input-amount ng-if="$ctrl.action === $ctrl.actions.AddFunds || $ctrl.action === $ctrl.actions.RemoveFunds" config="$ctrl.amountConfig" ng-model="$ctrl.amount" on-change="$ctrl.onAmountChange()" class="layout-column full-width"></input-amount><input-amount ng-if="$ctrl.action === $ctrl.actions.SetStopLoss" config="$ctrl.stopLossConfig" ng-model="$ctrl.stopLossAmount" on-change="$ctrl.onAmountChange()" class="layout-column full-width"></input-amount></div><div class="layout-row just-center"><span class="font-size-11" ng-if="$ctrl.action === $ctrl.actions.AddFunds || $ctrl.action === $ctrl.actions.RemoveFunds">{{$ctrl.translation.amountEqual1}} {{$ctrl.amount.value | currencyConvert:\'USD\':$ctrl.user.currency | cryptoCurrency: $ctrl.user.currency}}, {{$ctrl.translation.amountEqual2}}</span> <span class="font-size-11" ng-if="$ctrl.action === $ctrl.actions.SetStopLoss">{{$ctrl.translation.stopCopyingIfAmountDrops}}</span></div><div class="layout-row just-center" ng-if="$ctrl.validationMessage.length"><span class="font-size-11 social-color-negative">{{$ctrl.validationMessage}}</span></div><div class="layout-row invested margin-bottom-10"><div class="layout-column align-center content-gap06 semi-width"><div class="font-size-11 social-color-muted">{{$ctrl.translation.amountInvested}}</div><div class="font-size-11">{{$ctrl.trader.followDeposit | currencyConvert:$ctrl.user.currency:\'USD\' | cryptoCurrency:\'USD\'}}</div></div><div class="layout-column align-center content-gap06 semi-width"><div class="font-size-11 social-color-muted">{{$ctrl.translation.currentInvestmentPL}}</div><div class="font-size-11" ng-class="{ \'social-color-positive\':$ctrl.trader.followPnlPercents > 0, \'social-color-negative\':$ctrl.trader.followPnlPercents < 0 }">{{$ctrl.trader.followPnlPercents | number:2}}%</div></div></div></div></div><div class="layout-row bottom-area" ng-if="$ctrl.action === $ctrl.actions.AddFunds || $ctrl.action === $ctrl.actions.RemoveFunds"><div class="layout-column display-block">{{$ctrl.translation.stopLossRemains}}: <span class="roboto-bold">{{$ctrl.stopLoss | number:0}}%</span></div></div></div>',
    bindings: {
        trader: '<',
        action: '<',
        onSuccess: '&',
        onStart: '&',
        onFail: '&',
        onValidation: '&'
    },
    controller: [
        '$scope',
        'SocialUserService',
        'SocialLocaleService',
        'SocialFavoriteService',
        'SocialPortfolioService',
        'SocialUtils',
        'SocialConstants',
        'SocialTypes',
        'LeaderCopyService',
        '$timeout',
        '$filter',
        class LeaderFundsComponent {
            constructor(
                $scope,
                SocialUserService,
                SocialLocaleService,
                SocialFavoriteService,
                SocialPortfolioService,
                SocialUtils,
                SocialConstants,
                SocialTypes,
                LeaderCopyService,
                $timeout,
                $filter
            ) {

                /**
                 * @type {SocialUserService}
                 */
                this.userService = SocialUserService;

                /**
                 * @type {SocialFavoriteService}
                 */
                this.favoriteService = SocialFavoriteService;

                /**
                 * @type {SocialPortfolioService}
                 */
                this.portfolioService = SocialPortfolioService;

                /**
                 * @type {LeaderCopyService}
                 */
                this.leaderCopyService = LeaderCopyService;

                /**
                 * @type {SocialUtils}
                 */
                this.utils = SocialUtils;

                this.actions = SocialTypes.CopyAction;

                this.validationTypes = SocialTypes.ValidationTypes;

                this.$timeout = $timeout;

                this.currencyConvertPipe = $filter('currencyConvert');

                this.currencyPipe = $filter('cryptoCurrency');

                this.translation = SocialLocaleService.translation;

                this.user = this.userService.get();

                this.defaultAmount = 1000; //in USD

                this.amount = {
                    value: this.defaultAmount
                };

                // for stoploss change only
                this.stopLossAmount = {
                    value: 10
                }

                this.watchAddAction = $scope.$on(this.actions.AddFunds, () => this.callAction(this.actions.AddFunds));
                this.watchRemoveAction = $scope.$on(this.actions.RemoveFunds, () => this.callAction(this.actions.RemoveFunds));
                this.watchStopLossAction = $scope.$on(this.actions.SetStopLoss, () => this.stopLossAction());
            }


            $onInit() {
                this.maxAmount = this.calcAmount();

                if (this.action === this.actions.RemoveFunds) {
                    this.amount.value = 250;
                }

                // TODO - check this rule
                if (this.amount.value > this.maxAmount) {
                    this.amount.value = Math.round(this.maxAmount / 100) * 100;
                }

                this.amountConfig = {
                    min: this.action === this.actions.AddFunds
                        ? 250
                        : 1,
                    max: this.action === this.actions.AddFunds
                        ? this.maxAmount
                        : (this.maxAmount - 250),
                    digits: 0,
                    step: 50,
                    label: this.action === this.actions.AddFunds
                        ? 'Amount to add'
                        : 'Amount to remove',
                    strictValidation: false
                }

                this.stopLossConfig = {
                    min: 10,
                    max: 90,
                    digits: 0,
                    step: 10,
                    speedStep: 10,
                    label: 'Stop Loss',
                    valueType: 'number',
                    valueLabel: '%',
                    buttons: true,
                    readonly: false,
                };


                this.stopLoss = this.trader.followStopLoss * 100 / this.trader.followDeposit;
                this.stopLossAmount.value = this.stopLoss;
                console.log('---->', this.stopLossConfig);
            }

            $onDestroy() {
                this.watchAddAction && this.watchAddAction();
                this.watchRemoveAction && this.watchRemoveAction();
                this.watchStopLossAction && this.watchStopLossAction();
            }

            /**
             * @param {CopyAction} action
             * @return {Promise<any>}
             */
            callAction(action) {
                const amountInUserCurrency = Number(this.currencyConvertPipe(this.amount.value, 'USD', this.user.currency));
                const amountToUpdate =
                    action === this.actions.AddFunds
                        ? this.trader.followDeposit + amountInUserCurrency
                        : this.trader.followDeposit - amountInUserCurrency;

                this.onStart();

                return this.leaderCopyService.updateFunds(this.trader.followId, amountToUpdate, this.stopLoss)
                    .then(() => {
                        this.onSuccess({amount: this.amount.value});
                    })
                    .catch(err => {
                        this.onFail({error: err});
                    });
            }

            stopLossAction() {
                console.log({
                    followId: this.trader.followId,
                    followDeposit: this.trader.followDeposit,
                    stopLoss: this.stopLossAmount.value
                })
                this.onStart();
                return this.leaderCopyService.updateFunds(this.trader.followId, this.trader.followDeposit, this.stopLossAmount.value)
                    .then(() => {
                        this.onSuccess();
                    })
                    .catch(err => {
                        this.onFail({error: err});
                    });
            }

            calcAmount() {
                if (this.action === this.actions.RemoveFunds) {
                    return this.currencyConvertPipe(this.trader.followDeposit, this.user.currency, 'USD');
                }

                const maxAmount = this.currencyConvertPipe(this.user.balance - this.portfolioService.sumFollowBalance, this.user.currency, 'USD');
                return maxAmount > 250 ? maxAmount : 1000;
            }

            onAmountChange() {
                if (this.action === this.actions.SetStopLoss) {
                    if (this.stopLossAmount.value < this.stopLossConfig.min) {
                        this.validationMessage = `${this.translation.minStopLoss} ${this.stopLossConfig.min}%`;
                        this.onValidation({error: this.validationTypes.MinAmount});
                        return;
                    }
                    this.validationMessage = '';
                    this.onValidation();
                    return;
                }


                // validate amount
                if (this.amount.value < this.amountConfig.min) {
                    this.validationMessage = `${this.translation.minAmount} ${this.currencyPipe(this.amountConfig.min, 'USD')}`;
                    this.onValidation({error: this.validationTypes.MinAmount});
                    return;
                }

                if (
                    this.action === this.actions.AddFunds
                    && this.currencyConvertPipe(this.user.balance - this.portfolioService.sumFollowBalance, this.user.currency, 'USD') < this.amount.value) {

                    this.validationMessage = this.translation.noSufficientFunds;

                    this.onValidation({error: this.validationTypes.Balance});
                    return;
                }

                if (this.amount.value > this.amountConfig.max) {
                    this.validationMessage = `${this.translation.maxAmount} ${this.currencyPipe(this.amountConfig.max, 'USD')}`;

                    if (this.action === this.actions.RemoveFunds) {
                        this.onValidation({error: this.validationTypes.MaxAmount});
                        return;
                    }

                    this.onValidation({error: this.validationTypes.Balance});
                    return;
                }

                // any other case - validation success
                this.validationMessage = '';
                this.onValidation();
            }
        }]
})

appSocial.component('leaderPause', {
    template:'<div class="layout-column full-width"><div class="layout-row upper-area pad-top-05"><div class="layout-column full-width content-gap16"><div class="layout-row"><div class="layout-column full-width content-gap06"><div class="layout-row just-center font-size-25 social-color-positive roboto-bold">{{$ctrl.trader.fullname}}</div><div class="layout-row just-center align-base"><span ng-class="{ \'social-color-positive\':$ctrl.trader.gain > 0, \'social-color-negative\':$ctrl.trader.gain < 0 }"><span class="font-size-13">{{$ctrl.trader.absGain | number:2}}</span> <span class="font-size-11">%</span></span> <span class="font-size-13 margin-left-05">{{$ctrl.translation.gain}}</span></div></div></div><div class="layout-row"><input-amount config="$ctrl.amountConfig" ng-model="$ctrl.amount" class="layout-column full-width"></input-amount></div><div class="layout-row just-center"><span class="font-size-11">{{$ctrl.translation.amountEqual1}} {{$ctrl.amount.value | currencyConvert:\'USD\':$ctrl.user.currency | cryptoCurrency: $ctrl.user.currency}}, {{$ctrl.translation.amountEqual2}}</span></div></div></div><div class="layout-row bottom-area"><div class="layout-column full-width"><div class="layout-row align-center"><div class="layout-column social-color-base2">{{$ctrl.translation.amountInvested}}</div><div class="layout-column align-end">{{$ctrl.trader.followDeposit | currencyConvert:$ctrl.user.currency:\'USD\' | cryptoCurrency:\'USD\'}}</div></div><div class="layout-row align-center"><div class="layout-column social-color-base2">{{$ctrl.translation.profitAndLoss}}</div><div class="layout-column align-end">{{$ctrl.trader.followPnl | currencyConvert:$ctrl.user.currency:\'USD\' | cryptoCurrency:\'USD\'}}</div></div><div class="layout-row align-center"><div class="layout-column roboto-bold social-color-base2">{{$ctrl.translation.totalCurrentAmount}}</div><div class="layout-column align-end roboto-bold">{{($ctrl.trader.followDeposit + $ctrl.trader.followPnl) | currencyConvert:$ctrl.user.currency:\'USD\' | cryptoCurrency:\'USD\'}}</div></div><div class="layout-row font-size-11 align-center social-color-base2" ng-if="$ctrl.trader.followState">{{$ctrl.translation.pauseCopyText}}</div></div></div></div>',
    bindings: {
        trader: '<',
        action: '<',
        onSuccess: '&',
        onStart: '&',
        onFail: '&'
    },
    controller: [
        '$scope',
        'SocialUserService',
        'SocialLocaleService',
        'SocialFavoriteService',
        'SocialPortfolioService',
        'SocialUtils',
        'SocialConstants',
        'SocialTypes',
        'LeaderCopyService',
        '$timeout',
        '$filter',
        class LeaderPauseComponent {
            constructor(
                $scope,
                SocialUserService,
                SocialLocaleService,
                SocialFavoriteService,
                SocialPortfolioService,
                SocialUtils,
                SocialConstants,
                SocialTypes,
                LeaderCopyService,
                $timeout,
                $filter
            ) {

                /**
                 * @type {SocialUserService}
                 */
                this.userService = SocialUserService;

                /**
                 * @type {SocialFavoriteService}
                 */
                this.favoriteService = SocialFavoriteService;

                /**
                 * @type {SocialPortfolioService}
                 */
                this.portfolioService = SocialPortfolioService;

                /**
                 * @type {LeaderCopyService}
                 */
                this.leaderCopyService = LeaderCopyService;

                /**
                 * @type {SocialUtils}
                 */
                this.utils = SocialUtils;

                this.actions = SocialTypes.CopyAction;

                this.$timeout = $timeout;

                this.currencyConvertPipe = $filter('currencyConvert');
                this.currencyPipe = $filter('cryptoCurrency');

                this.translation = SocialLocaleService.translation;

                this.user = this.userService.get();

                this.defaultAmount = 1000;

                this.amount = {
                    value: this.defaultAmount
                };

                this.watchAddAction = $scope.$on('pauseCopy', () => this.callAction('pauseCopy'));
                this.watchRemoveAction = $scope.$on('resumeCopy', () => this.callAction('resumeCopy'));
            }


            $onInit() {
                this.amountConfig = {
                    min: 0,
                    max: 1200,
                    digits: 2,
                    step: 50,
                    label: 'Total Current Amount',
                    buttons: false,
                    readonly: true
                }

                this.amount.value = this.calcAmount();
            }

            $onDestroy() {
                this.watchAddAction && this.watchAddAction();
                this.watchRemoveAction && this.watchRemoveAction();
            }

            callAction(action) {
                this.onStart();
                return this.leaderCopyService.updateState(this.trader.followId, action === this.actions.Resume)
                    .then(() => {
                        this.onSuccess();
                    })
                    .catch(err => {
                        this.onFail({error: err});
                    });
            }

            calcAmount() {
                return this.currencyConvertPipe(this.trader.followDeposit + this.trader.followPnl, this.user.currency, 'USD');
            }

        }]
})

appSocial.component('leaderInfo', {
    template:'<div class="layout-column full-width"><div class="layout-row leader-info-top" ng-class="{\'followed\': $ctrl.trader.isFollowed}"><div class="layout-column width-50"><i class="social-icon-usd font-size-20 funded-label" ng-if="$ctrl.trader.isFollowed"></i></div><div class="layout-column width-50 align-end"><div class="layout-row content-gap10"><div class="layout-column content-gap05 align-center"><div class="font-size-13 roboto-bold">{{$ctrl.trader.favored}}</div><div class="font-size-11 social-color-base2">{{$ctrl.translation.followers}}</div></div><div class="layout-column content-gap05 align-center"><div class="font-size-13 roboto-bold">{{$ctrl.trader.followersCount}}</div><div class="font-size-11 social-color-base2">{{$ctrl.translation.copiers}}</div></div></div></div></div><div class="layout-row leader-info-name pad-bottom-25" ng-class="{\'followed\': $ctrl.trader.isFollowed}"><div class="layout-column full-width"><div class="layout-row full-width just-center"><div class="layout-column"><avatar trader="$ctrl.trader" class="large"></avatar></div></div><div class="layout-row full-width just-center margin-top-20"><div class="layout-column roboto-bold font-size-20">{{$ctrl.trader.fullname}}</div></div><div class="layout-row full-width just-center margin-top-10"><div class="layout-column display-block"><span><i class="flag" ng-class="\'flag-social-icon-\' + $ctrl.countryCode"></i></span> <span class="text-transform-uppercase social-color-base2">{{$ctrl.countryName}}</span></div></div><div class="layout-row full-width just-center margin-top-10"><div class="layout-column font-size-15 as-link">@{{$ctrl.trader.username}}</div></div><div class="layout-row full-width just-center margin-top-20"><div class="layout-column flex-row align-center display-block roboto-bold" ng-class="{ \'social-color-positive\':$ctrl.trader.gain > 0, \'social-color-negative\':$ctrl.trader.gain < 0}"><span class="font-size-25">{{$ctrl.trader.absGain | number:2}}</span> <span class="font-size-17">%</span></div></div></div></div><div class="layout-row leader-follow-stats pad-top-25 pad-bottom-25" ng-if="$ctrl.trader.isFollowed" ng-class="{\'followed\': $ctrl.trader.isFollowed}"><div class="layout-column width-33 align-center content-gap06"><div class="font-size-17">{{$ctrl.trader.followDeposit | currencyConvert:$ctrl.user.currency:\'USD\' | cryptoCurrency:\'USD\'}}</div><div class="font-size-13 social-color-base2">{{$ctrl.translation.invested}}</div></div><div class="layout-column width-33 align-center content-gap06"><div class="font-size-17">{{$ctrl.trader.followPnlPercents | number:2}}%</div><div class="font-size-13 social-color-base2">{{$ctrl.translation.pl_percent}}</div></div><div class="layout-column width-33 align-center content-gap06"><div class="font-size-17">{{$ctrl.trader.followBalance | currencyConvert:$ctrl.user.currency:\'USD\' | cryptoCurrency:\'USD\'}}</div><div class="font-size-13 social-color-base2">{{$ctrl.translation.current}}</div></div></div><div class="layout-row leader-info-stats pad-top-25"><div class="layout-column full-width content-gap35"><div class="layout-row"><div class="layout-column width-33 align-center content-gap06"><div class="font-size-17">{{$ctrl.trader.avgTradeLength | duration:\'about\'}}</div><div class="font-size-13 social-color-base2">{{$ctrl.translation.avgTradeTime}}</div></div><div class="layout-column width-33 align-center content-gap06"><div class="risk-indicator circled font-size-13" ng-class="$ctrl.trader.getRisk()">{{$ctrl.trader.riskScore}}</div><div class="font-size-13">{{$ctrl.translation.risk}}</div></div><div class="layout-column width-33 align-center content-gap06"><div class="font-size-17">{{$ctrl.trader.investedCapital | currency}}</div><div class="font-size-13 social-color-base2">{{$ctrl.translation.invCapital}}</div></div></div><div class="layout-row"><div class="layout-column width-33 align-center content-gap06"><div class="display-block"><span class="font-size-17">{{$ctrl.trader.profitability | number:2}}</span>%</div><div class="font-size-13 social-color-base2">{{$ctrl.translation.profitable}}</div></div><div class="layout-column width-33 align-center content-gap06"><div class="font-size-17">{{$ctrl.trader.tradesCount | number}}</div><div class="font-size-13 social-color-base2"># {{$ctrl.translation.trades}}</div></div><div class="layout-column width-33 align-center content-gap06"><div class="font-size-17">{{$ctrl.trader.profitFactor | number:2}}</div><div class="font-size-13 social-color-base2">{{$ctrl.translation.profitFactor}}</div></div></div><div class="layout-row font-size-11 just-center align-center social-color-muted"><span class="pad-right-05">{{$ctrl.translation.activeSince}}: {{$ctrl.trader.registrationDate | momentPipe:\'DD/MM/YYYY\'}}</span> | <span class="pad-left-05"><last-active date="$ctrl.trader.lastTradeDate" options="{icon:true}"></last-active></span></div></div></div></div>',
    bindings: {
        trader: '<'
    },
    controller: ["SocialUserService", "SocialLocaleService", "SocialFavoriteService", "SocialPortfolioService", "SocialUtils", "SocialConstants", "$ionicLoading", class LeaderInfoComponent {
        constructor(
            SocialUserService,
            SocialLocaleService,
            SocialFavoriteService,
            SocialPortfolioService,
            SocialUtils,
            SocialConstants,
            $ionicLoading
        ) {

            /**
             * @type {SocialUserService}
             */
            this.userService = SocialUserService;

            /**
             * @type {SocialFavoriteService}
             */
            this.favoriteService = SocialFavoriteService;

            /**
             * @type {SocialPortfolioService}
             */
            this.portfolioService = SocialPortfolioService;

            /**
             * @type {SocialUtils}
             */
            this.utils = SocialUtils;

            this.translation = SocialLocaleService.translation;

            this.countries = SocialConstants.countries;

            this.user = this.userService.get();

        }


        $onInit() {
            this.setCountry();
        }

        setCountry() {
            const country = this.countries
                .find((_country) => _country.code.toLowerCase() === this.trader.country.toLowerCase());
            this.countryCode = !!country && country.code.toLowerCase();
            this.countryName = !!country && country.country;
        }
    }]
})

appSocial.component('leaderPerformance', {
    template:'<div class="layout-column full-width content-gap20"><div class="layout-row margin-bottom-25 gain-history"><div class="layout-column full-width content-gap16"><div class="layout-row content-gap10 just-start align-base"><div class="layout-column display-block roboto-bold" ng-class="{ \'social-color-positive\':$ctrl.yearGain > 0, \'social-color-negative\':$ctrl.yearGain < 0 }"><span class="font-size-25">{{$ctrl.yearGain | number:2}}</span> <span class="font-size-17">%</span></div><div class="layout-column just-end social-color-base2">1 {{$ctrl.translation.year}}</div><div class="layout-column shrinkable align-end"><select class="select-social text-right height-auto social-color-base2" name="year" ng-model="$ctrl.year" ng-options="year.label for year in $ctrl.years" ng-change="$ctrl.update()"></select></div></div><div class="layout-row" style="height: 187px"><div class="layout-column full-width full-height" echarts chart-options="$ctrl.gainChartOptions"></div></div><div class="layout-row"><div class="layout-column full-width content-gap10"><div class="layout-row roboto-bold">Performance:</div><div class="layout-row just-start"><span class="pad-right-05">{{$ctrl.translation.highest}}: {{$ctrl.highestPerformance.date | momentPipe:\'MMMM\'}}, <span ng-class="{ \'social-color-positive\':$ctrl.highestPerformance.gain > 0, \'social-color-negative\':$ctrl.highestPerformance.gain < 0 }">{{$ctrl.highestPerformance.gain ? (($ctrl.highestPerformance.gain | number:2) + \'%\') : \'-\'}}</span></span> | <span class="pad-left-05">{{$ctrl.translation.lowest}}: {{$ctrl.lowestPerformance.date | momentPipe:\'MMMM\'}}, <span ng-class="{ \'social-color-positive\':$ctrl.lowestPerformance.gain > 0, \'social-color-negative\':$ctrl.lowestPerformance.gain < 0 }">{{$ctrl.lowestPerformance.gain ? (($ctrl.lowestPerformance.gain | number:2) + \'%\') : \'-\'}}</span></span></div></div></div></div></div><div class="layout-row pad-top-25 risk-history"><div class="layout-column full-width content-gap16"><div class="layout-row content-gap10 just-start align-center"><div class="layout-column font-size-20">{{$ctrl.translation.riskLevel}}</div><div class="layout-column just-end">1 {{$ctrl.translation.year}}</div><div class="layout-column"><i class="social-icon-information-outline font-size-20 social-info-icon" on-tap="$ctrl.utils.navigate(\'root.app.socialGlossary\', {section: \'risk\'})"></i></div></div><div class="layout-row" style="height: 187px"><div class="layout-column full-width full-height risk-bg" echarts chart-options="$ctrl.riskChartOptions"></div></div><div class="layout-row"><div class="layout-column full-width content-gap10"><div class="layout-row roboto-bold">{{$ctrl.translation.risk}}:</div><div class="layout-row just-start margin-bottom-20"><span class="pad-right-05">{{$ctrl.translation.highest}}: {{$ctrl.highestRisk.date | momentPipe:\'MMMM\'}}, <span ng-class="$ctrl.getRisk($ctrl.highestRisk.risk)">{{$ctrl.highestRisk.risk ? ($ctrl.highestRisk.risk | number:0) : \'-\'}}</span></span> | <span class="pad-left-05">{{$ctrl.translation.lowest}}: {{$ctrl.lowestRisk.date | momentPipe:\'MMMM\'}}, <span ng-class="$ctrl.getRisk($ctrl.lowestRisk.risk)">{{$ctrl.lowestRisk.risk ? ($ctrl.lowestRisk.risk | number:0) : \'-\'}}</span></span></div><div class="layout-row roboto-bold">{{$ctrl.translation.drawdown}}:</div><div class="layout-row just-start">{{$ctrl.trader.drawdown * 100 | number:2}}% <span class="pad-left-05 social-color-base2">{{$ctrl.translation.sinceTheBeginning}}</span></div></div></div></div></div></div>',
    bindings: {
        trader: '<'
    },
    controller: [
        'SocialUserService',
        'SocialLocaleService',
        'SocialUtils',
        'SocialTypes',
        'SocialAPIService',
        'SocialThemeService',
        'moment',
        class LeaderPerformanceComponent {
            constructor(
                SocialUserService,
                SocialLocaleService,
                SocialUtils,
                SocialTypes,
                SocialAPIService,
                SocialThemeService,
                moment
            ) {

                /**
                 * @type {SocialUserService}
                 */
                this.userService = SocialUserService;

                /**
                 * @type {SocialUtils}
                 */
                this.utils = SocialUtils;

                /**
                 * @type {SocialAPIService}
                 */
                this.api = SocialAPIService;

                /**
                 * @type {SocialThemeService}
                 */
                this.themeService = SocialThemeService;

                this.types = SocialTypes;

                this.moment = moment;

                this.translation = SocialLocaleService.translation;

                this.years = [
                    {
                        id: '2020',
                        label: '2020',
                    },
                    {
                        id: '2021',
                        label: '2021',
                    },
                    {
                        id: '2022',
                        label: '2022',
                    }
                ];
                this.year = this.years[this.years.length - 1];

                this.gainHistory = [];
                this.riskHistory = [];

                this.yearGain = 0;
                this.highestPerformance = null;
                this.lowestPerformance = null;
                this.highesRisk = null;
                this.lowestRisk = null;

                this.gainChartOptions = null;
                this.riskChartOptions = null;
            }

            $onInit() {
                this.update()
            }

            $onChanges(changes) {
                //console.log('trader changes', this.trader)
            }

            $onDestroy() {
            }

            getGainHistory() {
                const {HistoryGranularity} = this.types;

                const request = {
                    _url: '/' + this.trader.id,
                    from: this.moment(this.year.id).utc(true).startOf('year').unix(),
                    to: this.moment(this.year.id).utc(true).endOf('year').unix(),
                    granularity: HistoryGranularity.Monthly
                };

                return this.api.request.getGainHistory(request);
            }

            getRiskHistory() {
                const {HistoryGranularity} = this.types;

                const request = {
                    _url: '/' + this.trader.id,
                    from: this.moment(this.year.id).utc(true).startOf('year').unix(),
                    to: this.moment(this.year.id).utc(true).endOf('year').unix(),
                    granularity: HistoryGranularity.Monthly
                };

                return this.api.request.getRiskHistory(request);
            }

            update() {
                const defaultGain = {
                    gain: 0,
                    date: null,
                    trades_count: 0
                };
                const defaultRisk = {
                    risk: 0,
                    date: null,
                    trades_count: 0
                };

                Promise.all([
                    this.getGainHistory(),
                    this.getRiskHistory()
                ])
                    .then(([gainHistory, riskHistory]) => {

                        this.gainHistory = gainHistory.history
                            .map(item => {
                                return _.merge(item, {gain: item.gain * 100})
                            });

                        this.yearGain = this.gainHistory.reduce((acc, cur) => acc + cur.gain, 0);
                        this.highestPerformance = _.maxBy(this.gainHistory.filter(item => item.trades_count), 'gain') || defaultGain;
                        this.lowestPerformance = _.minBy(this.gainHistory.filter(item => item.trades_count), 'gain') || defaultGain;

                        this.riskHistory = riskHistory.history;
                        this.highestRisk = _.maxBy(this.riskHistory.filter(item => item.trades_count), 'risk') || defaultRisk;
                        this.lowestRisk = _.minBy(this.riskHistory.filter(item => item.trades_count), 'risk') || defaultRisk;

                        this.gainChartOptions = this.gainChart();
                        this.riskChartOptions = this.riskChart();
                    });
            }

            gainChart() {
                const labels = this.gainHistory.map(item => this.moment(item.date * 1000).format('MMM').toUpperCase());
                const series = this.gainHistory.map(item => item.gain.toFixed(1));

                const positiveColor = new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                    {offset: 0, color: this.themeService.getThemeColor('leader-performance', 'colorGainChartPositive0')},
                    {offset: 1, color: this.themeService.getThemeColor('leader-performance', 'colorGainChartPositive1')},
                ]);
                const negativeColor = new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                    {offset: 0, color: this.themeService.getThemeColor('leader-performance', 'colorGainChartNegative0')},
                    {offset: 1, color: this.themeService.getThemeColor('leader-performance', 'colorGainChartNegative1')},
                ]);
                const positiveBackground = new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                    {offset: 0, color: this.themeService.getThemeColor('leader-performance', 'backgroundGainChartPositive0')},
                    {offset: 0.1, color: this.themeService.getThemeColor('leader-performance', 'backgroundGainChartPositive0')},
                    {offset: 1, color: this.themeService.getThemeColor('leader-performance', 'backgroundGainChartPositive1')},
                ]);

                const negativeBackground = new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                    {offset: 0, color: this.themeService.getThemeColor('leader-performance', 'backgroundGainChartNegative0')},
                    {offset: 0.9, color: this.themeService.getThemeColor('leader-performance', 'backgroundGainChartNegative1')},
                    {offset: 1, color: this.themeService.getThemeColor('leader-performance', 'backgroundGainChartNegative1')},
                ]);

                const background = new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                    {offset: 0, color: this.themeService.getThemeColor('leader-performance', 'backgroundGainChart0')},
                    {offset: 1, color: this.themeService.getThemeColor('leader-performance', 'backgroundGainChart1')},
                ]);

                const maxItem = _.max(this.gainHistory.map(item => Math.abs(item.gain)));
                const positiveSeries = Array(this.gainHistory.length).fill(maxItem || 50);
                const negativeSeries = Array(this.gainHistory.length).fill(-maxItem || -50);

                return {
                    grid: {
                        top: '-10%',
                        left: '0%',
                        right: '0%',
                        bottom: '30%',
                    },
                    xAxis: {
                        show: true,
                        type: 'category',
                        position: 'bottom',
                        offset: 15,
                        containLabel: true,
                        data: labels,
                        axisLabel: {
                            interval: 0,
                            color: '#929598',
                            lineHeight: 16,
                            fontSize: 11,
                            formatter: (value, index) => {
                                return [
                                    value,
                                    series[index] === '0.00' ? '-' : series[index]
                                ].join('\n');
                            }
                        },
                        axisLine: {
                            lineStyle: {
                                color: '#cecece'
                            }
                        },
                        axisTick: {
                            show: false,
                        }
                    },
                    yAxis: {
                        show: false,
                        type: 'value'
                    },
                    series: [

                        {
                            data: positiveSeries,
                            type: 'bar',
                            barGap: '-100%',
                            itemStyle: {
                                color: positiveBackground
                            }
                        },
                        {
                            data: negativeSeries,
                            type: 'bar',
                            barGap: '-100%',
                            itemStyle: {
                                color: negativeBackground
                            }
                        },
                        {
                            data: series,
                            type: 'bar',
                            barGap: '-100%',
                            showBackground: false,
                            backgroundStyle: {
                                color: background
                            },
                            itemStyle: {
                                color: (item) => {
                                    return item.value > 0
                                        ? positiveColor
                                        : negativeColor;
                                }
                            }
                        },
                    ]
                };
            }

            riskChart() {
                const nullValue = (value) => !value ? null : value;

                const labels = this.riskHistory.map(item => this.moment(item.date * 1000).format('MMM').toUpperCase());
                const series = this.riskHistory
                    .map(item => item.risk)
                    .map(nullValue).map(item => item && item.toFixed(0));

                const seriesDelays = (series.reduce((accum, item, idx) => {
                    accum.count += !!item ? 1 : 0;
                    accum.items.push(accum.count);
                    return accum;
                }, {items: [], count: 0})).items;

                return {
                    grid: {
                        top: '10%',
                        left: '0%',
                        right: '0%',
                        bottom: '30%',
                    },
                    xAxis: {
                        show: true,
                        type: 'category',
                        position: 'bottom',
                        offset: 15,
                        data: labels,
                        axisLabel: {
                            color: '#929598',
                            lineHeight: 16,
                            fontSize: 10,
                            // margin: 8,
                            formatter: (value, index) => {
                                return [
                                    value,
                                    series[index] || '-'
                                ].join('\n');
                            }
                        },
                        axisLine: {
                            lineStyle: {
                                color: 'transparent'
                            }
                        },
                        axisTick: {
                            show: false,
                        }
                    },
                    yAxis: {
                        show: false,
                        type: 'value'
                    },
                    series: [
                        {
                            animationDuration: 1000,
                            animationDelay: (idx) => (seriesDelays[idx] * 200),
                            data: series,
                            type: 'line',
                            symbol: 'circle',
                            symbolSize: 15,
                            connectNulls: false,
                            lineStyle: {
                                color: this.themeService.getThemeColor('leader-performance', 'lineRiskChart'),
                                width: 1,
                                type: 'solid'
                            },
                            itemStyle: {
                                // borderWidth: 5, // this.viewStateService.state.theme.name === 'dark-monokai' ? 0 : 1,
                                // borderColor: '#ff0000',
                                color: (item) => {
                                    if (item.value <= 3) {
                                        return this.themeService.getThemeColor('leader-performance', 'colorRiskLow');
                                    }
                                    if (item.value <= 6) {
                                        return this.themeService.getThemeColor('leader-performance', 'colorRiskMiddle');
                                    }
                                    return this.themeService.getThemeColor('leader-performance', 'colorRiskHigh');
                                },
                                shadowBlur: 1,
                                shadowColor: 'rgba(0,0,0,0.3)',
                            },
                            label: {
                                show: true,
                                position: 'inside',
                                formatter: '{c}',
                                color: this.themeService.getThemeColor('leader-performance', 'colorLabel'),
                            }
                        }
                    ]
                };
            }

            getRisk(score) {
                return this.utils.getRisk(score);
            }
        }]
})

appSocial.component('leaderPortfolio', {
    template:'<div class="layout-column full-width content-gap30"><div class="layout-row just-space-between align-base"><div class="layout-column"><div class="layout-row content-gap10"><div class="layout-column font-size-20">{{$ctrl.translation.portfolio}}</div><div class="layout-column"><i class="social-icon-information-outline font-size-20 social-info-icon" on-tap="$ctrl.utils.navigate(\'root.app.socialGlossary\', {section: \'portfolio\'})"></i></div></div></div><div class="layout-column"><div class="layout-row switch"><div class="layout-column social-color-base2" on-tap="$ctrl.setView(\'grid\')" ng-class="{\'active\': $ctrl.widgetView===\'grid\'}"><i class="social-add-icon-list font-size-22"></i></div><div class="layout-column social-color-base2" on-tap="$ctrl.setView(\'chart\')" ng-class="{\'active\': $ctrl.widgetView===\'chart\'}"><i class="social-add-icon-bar-chart font-size-22"></i></div></div></div></div><div class="layout-row align-center tab-headers social-color-base2"><div class="layout-column semi-width text-center font-size-16 full-height just-center" ng-class="{\'active\': $ctrl.widgetMode===\'closed\'}" on-tap="$ctrl.setMode(\'closed\')">{{$ctrl.translation.closedTrades}}</div><div class="layout-column semi-width text-center font-size-16 full-height just-center" ng-class="{\'active\': $ctrl.widgetMode===\'open\'}" on-tap="$ctrl.setMode(\'open\')">{{$ctrl.translation.openTrades}}</div></div><div class="layout-row just-end content-gap10"><div class="layout-column" ng-if="$ctrl.widgetView===\'grid\'"><select class="select-social text-right height-auto social-color-base2" name="market" ng-model="$ctrl.market" ng-options="$ctrl.translation[item.label] for item in $ctrl.filterMarkets" ng-change="$ctrl.switchTrades()"></select></div><div class="layout-column" ng-if="$ctrl.widgetMode===\'closed\'"><select class="select-social text-right height-auto social-color-base2" name="range" ng-model="$ctrl.range" ng-options="$ctrl.translation[item.label] for item in $ctrl.filterRanges" ng-change="$ctrl.switchTrades()"></select></div></div><div class="layout-row trades-list"><div class="layout-column full-width"><percentage-bar class="layout-row" items="$ctrl.assetsPercentage" ng-if="$ctrl.widgetView===\'chart\'"></percentage-bar><trades-list class="layout-row" trades="$ctrl.trades" ng-if="$ctrl.widgetView===\'grid\'"></trades-list></div></div><div class="layout-row summary" ng-class="{\'delimiter pad-top-30\': $ctrl.widgetView===\'chart\'}"><div class="layout-column width-33 full-height content-gap06 align-center"><div class="layout-row align-base"><span class="font-size-17">{{$ctrl.summary.profitable | number:2}}</span>%</div><div class="layout-row social-color-base2">{{$ctrl.translation.profitable}}</div></div><div class="layout-column width-33 full-height content-gap06 align-center"><div class="layout-row"><span class="font-size-17">{{$ctrl.trades.length}}</span></div><div class="layout-row social-color-base2"># {{$ctrl.translation.trades}}</div></div><div class="layout-column width-33 full-height content-gap06 align-center"><div class="layout-row align-base" ng-class="{ \'social-color-positive\':$ctrl.summary.profit > 0, \'social-color-negative\':$ctrl.summary.profit < 0, }"><span class="font-size-17 roboto-bold">{{$ctrl.summary.profit | number:2}}</span>%</div><div class="layout-row social-color-base2">{{$ctrl.translation.pl_percent}}</div></div></div></div>',
    bindings: {
        trader: '<'
    },
    controller: [
        '$ionicLoading',
        'SocialUserService',
        'SocialLocaleService',
        'SocialUtils',
        'SocialTypes',
        'SocialAPIService',
        'SocialThemeService',
        'SocialConstants',
        'Trade',
        'moment',
        class LeaderPortfolioComponent {
            constructor(
                $ionicLoading,
                SocialUserService,
                SocialLocaleService,
                SocialUtils,
                SocialTypes,
                SocialAPIService,
                SocialThemeService,
                SocialConstants,
                Trade,
                moment
            ) {

                /**
                 * @type {SocialUserService}
                 */
                this.userService = SocialUserService;

                /**
                 * @type {SocialUtils}
                 */
                this.utils = SocialUtils;

                /**
                 * @type {SocialAPIService}
                 */
                this.api = SocialAPIService;

                /**
                 * @type {SocialThemeService}
                 */
                this.themeService = SocialThemeService;

                this.types = SocialTypes;

                this.moment = moment;

                this.translation = SocialLocaleService.translation;

                this.constants = SocialConstants;

                this.$ionicLoading = $ionicLoading;

                const {WidgetMode, WidgetView, FieldOperation, Op} = this.types;

                this.tradeFilters = {
                    'open': {
                        fields: [
                            {
                                name: 'close_time',
                                op: FieldOperation.Match,
                                value: 0,
                                next: Op.And
                            }
                        ],
                        order: [],
                        page: 0,
                        limit: 5000
                    },
                    'closed': {
                        fields: [
                            {
                                name: 'close_time',
                                op: FieldOperation.GreaterThan,
                                value: 0,
                                next: Op.And
                            }
                        ],
                        order: [],
                        page: 0,
                        limit: 5000
                    }
                };

                this.widgetMode = WidgetMode.Closed;
                this.widgetView = WidgetView.Chart;

                this.summary = {
                    from: null,
                    to: null,
                    profitable: 0,
                    profit: 0
                };

                this.trades = [];

                this.filterMarkets = _.concat([{id: 'all', label: 'all'}], SocialConstants.markets);
                // this.filterRanges = _.concat([{id: 'all', label: 'all'}], SocialConstants.dateRanges);
                this.filterRanges = SocialConstants.dateRanges;

                this.defaultRange = 2; // last month

                this.market = this.filterMarkets[0];
                this.range = this.filterRanges[this.defaultRange];

                this.assetsPercentage = this.createAssetsPercentage([]);

                // TODO find a way to import class
                this.tradeFactory = (data) => new Trade(data);
            }

            $onInit() {
                this.switchTrades();
            }

            $onChanges(changes) {
                //console.log('trader changes', this.trader)
            }

            $onDestroy() {
            }

            setMode(mode) {
                this.widgetMode = mode;
                this.switchTrades(this.widgetMode);
            }

            setView(view) {
                this.widgetView = view;
                if (view === 'chart') {
                    this.market = this.filterMarkets[0];
                    this.switchTrades(this.widgetMode)
                }
            }

            getTrades(mode) {
                const {FieldOperation, Op, Dir} = this.types;

                const tradesFilter = _.merge({}, this.tradeFilters[mode]);

                if (this.market && this.market.id !== 'all') {
                    const market = {
                        name: 'market',
                        op: FieldOperation.Match,
                        value: this.market.id,
                        next: Op.Or
                    };
                    tradesFilter.fields = _.concat(tradesFilter.fields, [market]);
                }

                tradesFilter.dateRange = this.range ? this.range.id : 'all';
                tradesFilter.order = [
                    {
                        name: 'open_time',
                        dir: Dir.Desc
                    }

                ];

                const query = this.utils.createQuery(tradesFilter);

                const request = _.merge({_url: '/' + this.trader.id}, query);

                return this.api.request.getTrades(request)
                    .then((response) => response.trades.map(item => this.tradeFactory(item)));
            }

            createAssetsPercentage(trades) {
                const markets = this.constants.markets.map(market => {
                    //find trades by markets
                    const tradesByMarket = _.filter(trades, {market: market.id});
                    const percentage = tradesByMarket.length * 100 / trades.length;
                    return {
                        name: market.id.toLowerCase(),
                        percentage: trades.length ? percentage : 0,
                    };
                });
                return _.orderBy(markets, ['percentage'], 'desc');
            }

            switchTrades() {
                const {WidgetMode} = this.types;

                //reset range for open trades mode
                if (this.widgetMode === WidgetMode.Open) {
                    this.range = this.filterRanges[this.defaultRange];
                }

                // this.status = WidgetStatus.Loading;
                // this.$ionicLoading.show();

                this.getTrades(this.widgetMode)
                    .then(trades => {
                        this.trades = trades;
                        this.assetsPercentage = this.createAssetsPercentage(this.trades);
                        // this.pieChartOptions = this.createChart(this.assetsPercentage);

                        // this.filterTradesForSelect();
                        this.updateSummary();

                        // this.status = this.trades.length ? WidgetStatus.Success : WidgetStatus.Empty;
                        // console.log(this.assetsPercentage)
                        // this.$ionicLoading.hide();
                    })
                    .catch(err => {
                        this.updateSummary();
                        // this.status = WidgetStatus.Fail;
                        console.warn(err);
                        // this.$ionicLoading.hide();
                        throw err;
                    });

            }

            updateSummary() {
                const {DateRange} = this.types;
                const [from, to] = this.utils.dateTagToRange(this.range ? (this.range.id) : DateRange.All);
                this.summary.from = from;
                this.summary.to = to;
                this.summary.profit = this.trades.reduce((acc, cur) => acc + cur.change, 0);
                this.summary.profitable = this.trades.length
                    ? this.trades.filter(trade => trade.profit > 0).length / this.trades.length * 100
                    : 0;
            }


        }]
})

appSocial.component('leaderStat', {
    template:'<div class="layout-column full-width content-gap17"><div class="layout-row margin-bottom-08 content-gap10 just-start align-center"><div class="layout-column font-size-20">{{$ctrl.translation.statistics}}</div><div class="layout-column"><i class="social-icon-information-outline font-size-20 social-info-icon" on-tap="$ctrl.utils.navigate(\'root.app.socialGlossary\', {section: \'stat\'})"></i></div></div><div class="layout-row"><div class="layout-column full-width content-gap05"><div class="layout-row content-gap10 just-start align-base"><div class="layout-column font-size-25 social-color-positive roboto-bold">{{$ctrl.currentInvestedCapital | currency:\'$\':0}}</div><div class="layout-column social-color-base2">{{$ctrl.translation.investedCapital}}</div></div><div class="layout-row line-chart" echarts chart-options="$ctrl.investedCapitalChartOptions"></div></div></div><div class="layout-row"><div class="layout-column full-width content-gap05"><div class="layout-row content-gap10 just-start align-base"><div class="layout-column font-size-25 copiers roboto-bold">{{$ctrl.currentCopiersNumber | number:0}}</div><div class="layout-column social-color-base2">{{$ctrl.translation.copiers}}</div></div><div class="layout-row line-chart" echarts chart-options="$ctrl.copiersChartOptions"></div></div></div><div class="layout-row"><div class="layout-column full-width content-gap05"><div class="layout-row content-gap10 just-start align-base"><div class="layout-column font-size-25 views roboto-bold">{{$ctrl.currentPopularity | number:0}}</div><div class="layout-column social-color-base2">{{$ctrl.translation.numberOfViews}}</div></div><div class="layout-row line-chart" echarts chart-options="$ctrl.viewsChartOptions"></div></div></div></div>',
    bindings: {
        trader: '<'
    },
    controller: [
        'SocialUserService',
        'SocialLocaleService',
        'SocialUtils',
        'SocialTypes',
        'SocialAPIService',
        'SocialThemeService',
        'moment',
        class LeaderStatComponent {
            constructor(
                SocialUserService,
                SocialLocaleService,
                SocialUtils,
                SocialTypes,
                SocialAPIService,
                SocialThemeService,
                moment
            ) {

                /**
                 * @type {SocialUserService}
                 */
                this.userService = SocialUserService;

                /**
                 * @type {SocialUtils}
                 */
                this.utils = SocialUtils;

                /**
                 * @type {SocialAPIService}
                 */
                this.api = SocialAPIService;

                /**
                 * @type {SocialThemeService}
                 */
                this.themeService = SocialThemeService;

                this.types = SocialTypes;

                this.moment = moment;

                this.translation = SocialLocaleService.translation;


                this.investedCapitalChartOptions = null;
                this.copiersChartOptions = null;
                this.viewsChartOptions = null;

                this.currentPopularity = 0;
                this.currentInvestedCapital = 0;
                this.currentCopiersNumber = 0;
            }

            $onInit() {
                this.update()
            }

            $onChanges(changes) {
                //console.log('trader changes', this.trader)
            }

            $onDestroy() {
            }

            getDailyData() {
                const request = {
                    _url: '/' + this.trader.id,
                    from: this.moment(Date.now()).utc(true).startOf('year').unix(),
                    to: this.moment().utc(true).unix(),
                };
                return this.api.request.getDailyData(request)
                    .then((response) => response.data);
            }

            update() {
                const {ChartType} = this.types;

                return Promise.all([
                    this.getDailyData()
                ])
                    .then(([dailyResponse]) => {
                        // Invested capital
                        const investedCapitalData = dailyResponse.map((item) => item.invested_capital);
                        this.investedCapitalChartOptions = this.createLineChart(
                            ChartType.InvestedCapital,
                            // labels
                            investedCapitalData.slice(Math.max(investedCapitalData.findIndex(item => item > 0) - 1, 0), investedCapitalData.length - 1)
                        );

                        this.currentInvestedCapital = dailyResponse[dailyResponse.length - 1].invested_capital;

                        // Copiers
                        const copiersData = dailyResponse.map((item) => item.followers_count);
                        this.copiersChartOptions = this.createLineChart(
                            ChartType.Copiers,
                            // labels
                            copiersData.slice(copiersData.findIndex(item => item > 0) - 1, copiersData.length - 1)
                        );
                        this.currentCopiersNumber = dailyResponse[dailyResponse.length - 1].followers_count;

                        this.areChartsVisible = !!investedCapitalData.find((item) => item) || !!copiersData.find((item) => item);

                        // Views
                        const popularityData = dailyResponse.map((item) => item.views);
                        this.viewsChartOptions = this.createLineChart(
                            ChartType.Views,
                            // labels
                            popularityData.slice(popularityData.findIndex(item => item > 0) - 1, popularityData.length - 1)
                        );
                        this.currentPopularity = dailyResponse.reduce((acc, cur) => acc + cur.views, 0);
                    })
            }

            createLineChart(type, series = []) {
                const {ChartType} = this.types;

                const gradient = {
                    from: '#cecece',
                    to: '#cecece'
                };
                let lineColor = 'gray';

                switch (type) {
                    case ChartType.InvestedCapital:
                        gradient.from = this.themeService.getThemeColor('leader-stats', 'gradientInvestedCapitalFrom');
                        gradient.to = this.themeService.getThemeColor('leader-stats', 'gradientInvestedCapitalTo');
                        lineColor = this.themeService.getThemeColor('leader-stats', 'colorInvestedCapitalLine');
                        break;
                    case ChartType.Copiers:
                        gradient.from = this.themeService.getThemeColor('leader-stats', 'gradientCopiersFrom');
                        gradient.to = this.themeService.getThemeColor('leader-stats', 'gradientCopiersTo');
                        lineColor = this.themeService.getThemeColor('leader-stats', 'colorCopiersLine');
                        break;
                    case ChartType.Views:
                        gradient.from = this.themeService.getThemeColor('leader-stats', 'gradientViewsFrom');
                        gradient.to = this.themeService.getThemeColor('leader-stats', 'gradientViewsTo');
                        lineColor = this.themeService.getThemeColor('leader-stats', 'colorViewsLine');
                        break;
                }

                const bgGradient = new echarts.graphic.LinearGradient(0, 0, 0, 1, [{
                    offset: 0,
                    color: gradient.from
                }, {
                    offset: 1,
                    color: gradient.to
                }]);

                return {
                    grid: {
                        top: '1%',
                        left: '1%',
                        right: '1%',
                        bottom: '1%',
                    },
                    xAxis: {
                        show: false,
                        type: 'category',
                        data: series
                    },
                    yAxis: {
                        show: false,
                        type: 'value'
                    },
                    // tooltip: {},
                    series: [
                        {
                            animationDuration: 300,
                            symbolSize: 0,
                            data: series,
                            type: 'line',
                            lineStyle: {
                                color: lineColor,
                                width: 2,
                                type: 'solid'
                            },
                            areaStyle: {
                                color: bgGradient
                            },
                            markPoint: {
                                symbol: 'circle',
                                symbolSize: 7,
                                data: [
                                    {name: '', xAxis: series.length - 1, yAxis: series[series.length - 1]}
                                ],
                                itemStyle: {
                                    color: lineColor
                                }
                            }
                        }
                    ]
                };

            }

        }]
})

appSocial.component('tradeExpanded', {
    template:'<div class="layout-column full-width"><div class="layout-row"><div class="layout-column width-33 font-size-12 content-gap10"><div class="layout-row social-color-base2">{{$ctrl.translation.open}}</div><div class="layout-row">{{$ctrl.trade.openTime | momentPipe:\'DD/MM/YYYY hh:mm\'}}</div><div class="layout-row font-size-17">{{$ctrl.trade.openPrice | number:$ctrl.trade.digits}}</div></div><div class="layout-column width-33 font-size-12 content-gap10"><div class="layout-row social-color-base2">{{$ctrl.translation.close}}</div><div class="layout-row">{{$ctrl.trade.closeTime > 0 ? ($ctrl.trade.closeTime | momentPipe:\'DD/MM/YYYY hh:mm\') : \'---\'}}</div><div class="layout-row font-size-17">{{$ctrl.trade.closePrice > 0 ? ($ctrl.trade.closePrice | number:$ctrl.trade.digits) : \'---\'}}</div></div><div class="layout-column width-33 font-size-12 content-gap10 just-space-between"><div class="layout-row just-start align-center social-color-base2"><i class="social-icon-file_download font-size-14 margin-right-05 social-color-negative"></i> SL: {{$ctrl.trade.stopLoss > 0 ? ($ctrl.trade.stopLoss | number:$ctrl.trade.digits) : \'---\'}}</div><div class="layout-row just-start align-center social-color-base2"><i class="social-icon-file_upload font-size-14 margin-right-05 social-color-positive"></i> TP: {{$ctrl.trade.takeProfit > 0 ? ($ctrl.trade.takeProfit | number:$ctrl.trade.digits) : \'---\'}}</div></div></div></div>',
    bindings: {
        trade: '<',
    },
    controller: [
        'SocialConstants',
        'SocialLocaleService',
        class TradeExpandedComponent {
            constructor(SocialConstants,
                        SocialLocaleService) {
                this.constants = SocialConstants;
                this.translation = SocialLocaleService.translation;
            }

            $onInit() {

            }

            $onChanges(changes) {

            }

            $onDestroy() {

            }

        }]
})

appSocial.component('tradedAssets', {
    template:'<div class="layout-column full-width content-gap25"><div class="layout-row display-block"><span class="font-size-20">{{$ctrl.translation.recentlyClosedAssets}}</span> <span class="margin-left-05"><i class="social-icon-information-outline font-size-20 social-info-icon" on-tap="$ctrl.utils.navigate(\'root.app.socialGlossary\', {section: \'assets\'})"></i></span></div><ion-scroll class="layout-row" direction="x" has-bouncing="false"><div class="layout-column scrollable-item content-gap10" ng-repeat="item in $ctrl.trades"><div class="layout-row semi-height"><div class="layout-column width-70 full-height"><div class="layout-row semi-height"><div class="layout-column width-35 flag" ng-if="!item.flagFallback"><i class="flag-icon flag-left" ng-class="item.flagLeft"></i> <i class="flag-icon flag-right" ng-class="item.flagRight"></i></div><div class="layout-column width-35 flag" ng-if="item.flagFallback"><i class="font-size-24 social-icon" ng-class="[\'social-icon-\'+item.market.toLowerCase(), item.market.toLowerCase()]"></i></div></div><div class="layout-row semi-height"><span class="font-size-20">{{item.symbol}}</span></div></div><div class="layout-column shrinkable full-height"><div class="layout-row semi-height just-end align-center"><i class="font-size-35" ng-class="{\'social-icon-trending_up\': item.avgProfit >= 0, \'social-icon-trending_down\':item.avgProfit < 0, \'social-color-positive\': item.avgProfit >= 0, \'social-color-negative\': item.avgProfit < 0 }"></i> <span class="font-size-12 social-color-base2">{{$ctrl.translation.profit}}</span></div><div class="layout-row semi-height just-end align-base" ng-class="{ \'social-color-positive\': item.avgProfit >= 0, \'social-color-negative\': item.avgProfit < 0 }"><span class="font-size-20">{{item.avgProfit | number:2}}</span>%</div></div></div><div class="layout-row semi-height"><div class="layout-column width-33 content-gap10"><div class="layout-row just-center align-base"><span class="font-size-17">{{item.countPercentage | number:2}}</span> <span class="font-size-11">%</span></div><div class="layout-row just-center align-base social-color-base2">{{item.count}} {{$ctrl.translation.trades}}</div></div><div class="layout-column width-33 content-gap10"><div class="layout-row just-center align-base arrow" ng-class="{ \'social-color-positive\': item.avgProfit >= 0, \'social-color-negative\': item.avgProfit < 0 }"><i class="social-icon-arrow-thick-up"></i> <span class="font-size-17">{{item.avgWinProfit | number:2}}</span> <span class="font-size-11">%</span></div><div class="layout-row just-center align-base social-color-base2">{{$ctrl.translation.avgProfit}}</div></div><div class="layout-column width-33 content-gap10"><div class="layout-row just-center align-base arrow" ng-class="{ \'social-color-positive\': item.avgLossProfit > 0, \'social-color-negative\': item.avgLossProfit <= 0 }"><i class="social-icon-arrow-thick-down"></i> <span class="font-size-17">{{item.avgLossProfit | number:2}}</span> <span class="font-size-11">%</span></div><div class="layout-row just-center align-base social-color-base2">{{$ctrl.translation.avgLoss}}</div></div></div></div></ion-scroll></div>',
    bindings: {
        trader: '<',
    },
    controller: [
        'SocialUtils',
        'SocialTypes',
        'SocialAPIService',
        'SocialConstants',
        'SocialLocaleService',
        'TradeAggregated',
        class TradedAssetsComponent {
            constructor(
                SocialUtils,
                SocialTypes,
                SocialAPIService,
                SocialConstants,
                SocialLocaleService,
                TradeAggregated
            ) {
                /**
                 * @type {SocialUtils}
                 */
                this.utils = SocialUtils;

                /**
                 * @type {SocialAPIService}
                 */
                this.api = SocialAPIService;

                this.constants = SocialConstants;

                this.translation = SocialLocaleService.translation;

                this.types = SocialTypes;

                this.tradedAssetFactory = (data) => new TradeAggregated(this.trader, data);

                this.trades = [];
            }

            $onInit() {
                this.getAssets();
            }

            $onChanges(changes) {

            }

            $onDestroy() {

            }

            getAssets() {
                const request = {
                    _url: '/' + this.trader.id,
                    open: false,
                    limit: 12
                }

                return this.api.request.getAggregatedTrades(request)
                    .then((response) => {
                        this.trades = response.trades
                            .filter(item => !(['Correction']).includes(item.symbol))
                            .map(item => this.tradedAssetFactory(item));
                    })
            }

        }]
})

appSocial.component('tradesList', {
    template:'<div class="layout-column full-width"><div class="layout-row align-center headers social-color-muted"><div class="layout-column width-30">{{$ctrl.translation.symbol}}</div><div class="layout-column text-center width-20">{{$ctrl.translation.direction}}</div><div class="layout-column text-center width-15">{{$ctrl.translation.volume}}</div><div class="layout-column text-center width-25">{{$ctrl.translation.change}}</div><div class="layout-column text-center width-10"></div></div><ion-scroll direction="y" class="scrollable" scrollbar-y="false" ng-style="{\'height\':$ctrl.items.length < 1 && $ctrl.items.length*48+\'px\'}"><div class="layout-row align-center scrollable-item" ng-repeat="item in $ctrl.items" ng-class="{\'item-height-open\':item.expanded}" ng-click="$ctrl.toggle(item)"><div class="layout-column full-width full-height"><div class="layout-row align-center full-height" ng-class="{\'expanded\':item.expanded}"><div class="layout-column width-30 just-center"><div class="layout-row align-center"><div class="layout-column width-35 flag" ng-if="!item.flagFallback"><i class="flag-icon flag-left" ng-class="item.flagLeft"></i> <i class="flag-icon flag-right" ng-class="item.flagRight"></i></div><div class="layout-column width-35 flag" ng-if="item.flagFallback"><i class="font-size-24 social-icon" ng-class="[\'social-icon-\'+item.market.toLowerCase(), item.market.toLowerCase()]"></i></div><div class="layout-column shrinkable">{{item.symbol}}</div></div></div><div class="layout-column text-transform-uppercase text-center width-20 display-block" ng-class="{ \'social-color-positive\': $ctrl.constants.actionsId[item.cmd] === \'buy\', \'social-color-negative\': $ctrl.constants.actionsId[item.cmd] === \'sell\', }"><span>{{$ctrl.constants.actionsId[item.cmd]}}</span> <i class="font-size-11 social-icon-arrow-up2" ng-if="$ctrl.constants.actionsId[item.cmd] === \'buy\'"></i> <i class="font-size-11 social-icon-arrow-down2" ng-if="$ctrl.constants.actionsId[item.cmd] === \'sell\'"></i></div><div class="layout-column text-center width-15">{{item.volume | number:2}}</div><div class="layout-column roboto-bold display-block text-center width-25" ng-class="{ \'social-color-positive\': item.change > 0, \'social-color-negative\': item.change < 0 }"><span class="font-size-13">{{item.change | number:2}}</span> <span class="font-size-11">%</span></div><div class="layout-column text-center width-10 social-color-base2"><i class="icon ion-chevron-right font-size-15" ng-if="!item.expanded"></i> <i class="icon ion-chevron-down font-size-15" ng-if="item.expanded"></i></div></div><trade-expanded trade="item" class="layout-row align-center expand" ng-if="item.expanded"></trade-expanded></div></div></ion-scroll></div>',
    bindings: {
        trades: '<'
    },
    controller: [
        'SocialConstants',
        'SocialLocaleService',
        class TradesListComponent {
            constructor(SocialConstants,
                        SocialLocaleService) {
                this.constants = SocialConstants;
                this.translation = SocialLocaleService.translation;

                this.allItems = [];
                this.items = [];
            }

            $onInit() {
                this.allItems = this.trades;
                // to show last 10 records only
                // this.items = this.allItems.splice(0, 10);
                this.items = this.allItems;
            }

            $onChanges(changes) {
                if (changes.trades && changes.trades.currentValue) {
                    this.allItems = this.trades;
                    // to show last 10 records only
                    // this.items = this.allItems.splice(0, 10);
                    this.items = this.allItems;
                }
            }

            $onDestroy() {
                this.items = null;
                this.allItems = null;
            }

            toggle(trade) {
                trade.expanded = !trade.expanded;
            }

        }]
})

appSocial.component('leaderCard', {
    template:'<div class="layout-row full-height compare-area just-center align-center"><span class="font-size-11 roboto-bold just-center align-center" ng-if="!$ctrl.compareService.isTraderComparing($ctrl.trader)">{{$ctrl.translation.swipeToCompare}}</span><div class="compared" ng-if="$ctrl.compareService.isTraderComparing($ctrl.trader)" on-tap="$ctrl.removeFromCompare()"><i class="social-icon-checkmark font-size-20"></i></div></div><div class="layout-row align-center full-height swipe" on-touch="$ctrl.startSwipe()" on-release="$ctrl.stopSwipe()" on-drag="$ctrl.onDrag($event)" ng-class="{ \'expanded\': $ctrl.trader.expanded, \'followed\': $ctrl.trader.isFollowed, \'swipeable\': $ctrl.isSwipe}" ng-style="{\'transform\': ($ctrl.mode==\'compare\' || !$ctrl.isSwipeable) ? \'\' : \'translate3d(\'+ $ctrl.swipeOffset+\'px, 0px, 0px)\'}" ng-click="$event.stopPropagation();$ctrl.toggleCard($ctrl.trader);"><div class="followed-indicator" ng-if="$ctrl.trader.isFollowed"></div><div class="layout-column full-height just-center"><avatar trader="$ctrl.trader" avatar-options="{showCountryFlag: true}" class="leader-card"></avatar></div><div class="layout-column full-height align-center width-60"><div class="layout-row full-height full-width align-center"><div class="layout-column full-width just-space-between content-gap06"><div class="layout-row full-width just-center align-center content-gap02" ng-class="{ \'social-color-positive\':$ctrl.trader.gain > 0, \'social-color-negative\':$ctrl.trader.gain < 0}"><div class="layout-column roboto-bold font-size-17">{{$ctrl.trader.gain | number:2}}</div><div class="layout-column font-size-11">%</div></div><div class="layout-row full-width just-center font-size-11">Gain</div></div><div class="layout-column width-40 just-space-between content-gap06 align-center risk-column"><div class="risk-indicator circled font-size-13" ng-class="$ctrl.trader.getRisk()">{{$ctrl.trader.riskScore}}</div><div class="just-center font-size-11">Risk</div></div><div class="layout-column width-55 just-space-between align-center content-gap09"><div class="font-size-17 just-center">{{$ctrl.trader.followersCount}}</div><div class="just-center font-size-11">Copiers</div></div></div></div><div class="layout-column full-height just-center width-30"><div class="layout-row content-gap10"><div class="layout-column shrinkable"><button class="button-social accent shadowless font-size-13" ng-if="$ctrl.mode!==\'compare\'" ng-class="{\'blue\':!$ctrl.trader.isFollowed,\'green\':$ctrl.trader.isFollowed}" ng-click="$event.stopPropagation();$ctrl.callAction($ctrl.trader);">{{$ctrl.trader.isFollowed ? $ctrl.translation.addFunds : $ctrl.translation.copy}}</button> <button class="button-social accent shadowless font-size-13" ng-if="$ctrl.mode===\'compare\'" ng-class="{\'blue\':!$ctrl.isComparing(),\'red\':$ctrl.isComparing()}" ng-click="$event.stopPropagation();$ctrl.callCompareAction();">{{$ctrl.isComparing() ? $ctrl.translation.detach : $ctrl.translation.compare}}</button></div><div class="layout-column width-15 just-center align-center toggle-arrow"><i class="icon ion-chevron-right font-size-15" ng-if="!$ctrl.trader.expanded"></i> <i class="icon ion-chevron-down font-size-15" ng-if="$ctrl.trader.expanded"></i></div></div></div></div><leader-card-expand class="layout-row align-center expand" trader="$ctrl.trader" ng-if="$ctrl.trader.expanded" on-tap="$ctrl.utils.navigate(\'root.app.socialLeader\',{id:$ctrl.trader.id})"></leader-card-expand>',
    bindings: {
        trader: '<',
        onSelect: '&',
        // possible values: '' - default, 'compare' - compare mode
        /**
         * @type {CardMode}
         */
        mode: '<'
    },
    controller: ["$state", "$scope", "$timeout", "SocialLocaleService", "SocialUtils", "SocialActionService", "SocialTypes", "LeadersCompareService", class LeaderCardComponent {
        constructor($state,
                    $scope,
                    $timeout,
                    SocialLocaleService,
                    SocialUtils,
                    SocialActionService,
                    SocialTypes,
                    LeadersCompareService) {

            this.translation = SocialLocaleService.translation;

            /**
             * @type {SocialUtils}
             */
            this.utils = SocialUtils;

            /**
             * @type {SocialActionService}
             */
            this.actionService = SocialActionService;

            /**
             * @type {SocialTypes}
             */
            this.types = SocialTypes;

            /**
             * @type {LeadersCompareService}
             */
            this.compareService = LeadersCompareService;

            this.isSwipe = false;
            this.swipeOffset = 0;
            this.buttonOffset = 0;
            this.swipeDirection = 'right';

            $scope.$on('leadersCompare.disableSelection', () => {
                this.compareService.remove(this.trader);
                // reset swipe position
                this.swipeOffset = 0;
                this.buttonOffset = 0;
            })

            this.$timeout = $timeout;
            this.isSwipeable = true;

            // $scope.$on('scroll.start', () => {
            //     this.isSwipeable = false;
            // });
            //
            // $scope.$on('scroll.stop', () => {
            //     this.isSwipeable = true;
            // });
        }

        $onInit() {
            if (this.isComparing()) {
                this.setCompared();
            }
            if (this.mode === 'compare') {
                this.isSwipe = false;
            }
        }

        $onChanges(changes) {
            //console.log('trader changes', this.trader)
        }

        $onDestroy() {
        }

        toggleCard(trader) {
            this.onSelect({trader})
            trader.expanded = !trader.expanded;
        }

        callAction(trader) {
            const {CopyAction} = this.types;
            if (trader.isFollowed) {
                return this.utils.navigate('root.app.socialFunds', {id: trader.id, action: CopyAction.AddFunds})
            }

            this.actionService.stateCheck({trader, action: CopyAction.StartCopy})
        }

        callCompareAction() {
            if (this.isComparing()) {
                this.compareService.remove(this.trader);
                return;
            }

            if (!this.compareService.isComparing) {
                this.compareService.enableSelection();
            }

            if (!this.compareService.limitReached) {
                this.compareService.add(this.trader);
            }
        }

        startSwipe() {
            if (this.mode === 'compare') {
                return;
            }

            this.isSwipe = true;
        }

        stopSwipe() {
            // skip action if we are started to swipe
            if (!this.isSwipe) {
                return;
            }

            // skip action if it's not permitted to swipe
            if (!this.isSwipeable) {
                return;
            }

            if (this.swipeOffset <= 70) {
                this.swipeOffset = 0;
                this.buttonOffset = 0;
            } else {
                this.swipeOffset = 73;
                this.buttonOffset = 73;
            }

            this.isSwipe = false;
            this.toggleCompare();
        }

        onDrag(e) {
            this.swipeOffset = this.buttonOffset + e.gesture.deltaX;
        }

        toggleCompare() {
            // open swipe -> add to compare
            if (this.swipeOffset > 0) {
                if (this.isComparing()) {
                    return;
                }

                if (this.compareService.limitReached) {
                    // reset swipe position
                    this.swipeOffset = 0;
                    this.buttonOffset = 0;
                    return;
                }

                if (!this.compareService.isComparing) {
                    this.compareService.enableSelection();
                }

                //add to compare
                this.compareService.add(this.trader);
            } else {
                if (!this.isComparing()) {
                    return;
                }

                // remove from compare
                this.compareService.remove(this.trader);

                if (!this.compareService.traders.length) {
                    this.compareService.disableSelection();
                }
            }
        }

        setCompared() {
            this.swipeOffset = 73;
            this.buttonOffset = 73;
        }

        isComparing() {
            return this.compareService.isTraderComparing(this.trader)
        }

        removeFromCompare() {
            this.compareService.remove(this.trader);
            // reset swipe position
            this.swipeOffset = 0;
            this.buttonOffset = 0;

            if (!this.compareService.traders.length) {
                this.compareService.disableSelection();
            }
        }

    }]
});

appSocial.component('leaderCardExpand', {
    template:'<div class="layout-column full-width full-height content-gap10 pad-bottom-10"><div class="layout-row semi-height"><div class="layout-column content-gap10"><div class="margin-top-10 social-color-accented display-flex align-center" on-tap="$ctrl.utils.navigate(\'root.app.socialLeader\',{id:$ctrl.trader.id})"><span class="font-size-17 margin-right-10">{{$ctrl.trader.fullname}}</span> <i class="social-add-icon-read-more font-size-22"></i></div><last-active date="$ctrl.trader.lastTradeDate" options="{icon:true}"></last-active></div></div><div class="layout-row semi-height"><div class="layout-column width-60"><div class="layout-row full-height content-gap16"><div class="layout-column width-50 full-height" echarts chart-options="$ctrl.investedCapitalChartOptions"></div><div class="layout-column width-50 just-center"><div class="font-size-17 margin-bottom-05" ng-class="{\'social-color-positive\': $ctrl.currentInvestedCapital > 0}">{{$ctrl.currentInvestedCapital | currency:\'$\':0}}</div><div class="font-size-13">{{$ctrl.translation.investedCapital}}</div></div></div></div><div class="layout-column width-40"><div class="layout-row full-height content-gap10"><div class="layout-column full-height width-50" echarts chart-options="$ctrl.profitabilityChartOptions"></div><div class="layout-column width-50 just-center"><div class="font-size-17 margin-bottom-05 social-color-accented">{{$ctrl.trader.profitability | number:2}} <span class="font-size-13">%</span></div><div class="font-size-13">{{$ctrl.translation.profitable}}</div></div></div></div></div></div>',
    bindings: {
        trader: '<'
    },
    controller: ["$state", "$scope", "SocialLocaleService", "SocialAPIService", "SocialUtils", "SocialThemeService", "moment", class LeaderCardExpandComponent {
        constructor($state,
                    $scope,
                    SocialLocaleService,
                    SocialAPIService,
                    SocialUtils,
                    SocialThemeService,
                    moment) {

            this.translation = SocialLocaleService.translation;

            this.utils = SocialUtils;
            this.moment = moment;

            /**
             * @type {SocialAPIService}
             */
            this.api = SocialAPIService;

            /**
             * @type {SocialThemeService}
             */
            this.themeService = SocialThemeService;


            this.currentInvestedCapital = 0;
            this.investedCapitalChartOptions = null;
            this.profitabilityChartOptions = null;
        }

        $onInit() {
            this.update()
            this.profitabilityChartOptions = this.createPieChart([]);
        }

        $onChanges(changes) {
            //console.log('trader changes', this.trader)
        }

        $onDestroy() {
        }

        toggleCard(trader) {
            trader.expanded = !trader.expanded;
        }

        getDailyData() {
            const request = {
                _url: '/' + this.trader.id,
                from: this.moment(Date.now()).utc(true).startOf('year').unix(),
                to: this.moment().utc(true).unix(),
            };
            return this.api.request.getDailyData(request)
                .then((response) => response.data);
        }

        getTradesByMarkets() {
            return this.api.request.getTradesByMarkets('/' + this.trader.id);
        }

        update() {
            return Promise.all([
                this.getDailyData()
            ])
                .then(([dailyResponse]) => {
                    const investedCapitalData = dailyResponse.map((item) => item.invested_capital);
                    this.investedCapitalChartOptions = this.createLineChart(
                        '',
                        // labels
                        investedCapitalData.slice(Math.max(investedCapitalData.findIndex(item => item > 0) - 1, 0), investedCapitalData.length - 1)
                    );

                    this.currentInvestedCapital = dailyResponse[dailyResponse.length - 1].invested_capital;
                })
        }

        createLineChart(type, series = []) {
            const gradient = {
                from: '#cecece',
                to: '#cecece'
            };
            let lineColor = 'gray';

            gradient.from = this.themeService.getThemeColor('leader-stats', 'gradientInvestedCapitalFrom');
            gradient.to = this.themeService.getThemeColor('leader-stats', 'gradientInvestedCapitalTo');
            lineColor = this.themeService.getThemeColor('leader-stats', 'colorInvestedCapitalLine');

            const bgGradient = new echarts.graphic.LinearGradient(0, 0, 0, 1, [{
                offset: 0,
                color: gradient.from
            }, {
                offset: 1,
                color: gradient.to
            }]);

            return {
                grid: {
                    top: '0%',
                    left: '0%',
                    right: '0%',
                    bottom: '8.5%',
                },
                xAxis: {
                    show: false,
                    type: 'category',
                    data: series
                },
                yAxis: {
                    show: false,
                    type: 'value'
                },
                // tooltip: {},
                series: [
                    {
                        animationDuration: 300,
                        symbolSize: 0,
                        data: series,
                        type: 'line',
                        lineStyle: {
                            color: lineColor,
                            width: 2,
                            type: 'solid'
                        },
                        areaStyle: {
                            color: bgGradient
                        },
                        /*markPoint: {
                            symbol: 'circle',
                            symbolSize: 7,
                            data: [
                                {name: '', xAxis: series.length - 1, yAxis: series[series.length - 1]}
                            ],
                            itemStyle: {
                                color: lineColor
                            }
                        }*/
                    }
                ]
            };

        }


        createPieChart() {
            const series = [
                {
                    name: 'a',
                    percentage: 100 - this.trader.profitability,
                    color: this.themeService.getThemeColor('common', 'theRed'),
                },
                {
                    name: 'b',
                    percentage: this.trader.profitability,
                    color: this.themeService.getThemeColor('common', 'theGreen'),
                },
            ]
                .map(item => ({
                    name: item.name,
                    value: item.percentage,
                    itemStyle: {
                        color: item.color,
                        borderWidth: 3,
                        borderColor: this.themeService.getThemeColor('app', 'background2')
                    }
                }));

            return {
                series: [
                    {
                        type: 'pie',
                        radius: ['90%', '65%'],
                        center: ['50%', '50%'],
                        label: {
                            show: false,
                        },
                        data: series,
                    }
                ]
            };
        }

    }]
});

appSocial.component('leadersFeed', {
    template:'<div class="layout-column full-width"><div class="layout-row full-width align-center item-height" ng-class="{\'item-height-open\':item.expanded}" ng-repeat="item in $ctrl.traders"><spinner ng-if="$ctrl.isLoading && $ctrl.page === 0"></spinner><leader-card ng-if="!$ctrl.isLoading || $ctrl.page > 0" trader="item" on-select="$ctrl.toggleTrader(trader)" mode="$ctrl.mode" class="layout-column full-width full-height"></leader-card></div><div class="layout-row full-width no-data" ng-if="!$ctrl.isLoading && !$ctrl.traders.length"><div class="layout-column full-width full-height"><div class="layout-row semi-height"><div class="layout-column full-width full-height just-end align-center"><span class="font-size-20 roboto-light">{{$ctrl.translation.noResults}}</span></div></div><div class="layout-row semi-height"><div class="layout-column full-width just-end align-center"><button class="button-social blue accent full-width" on-tap="$ctrl.resetSearch()">{{$ctrl.translation.discoverLeaders}}</button></div></div></div></div><ion-infinite-scroll ng-if="$ctrl.infiniteScroll && !$ctrl.noData" on-infinite="$ctrl.loadMore()" distance="1%"></ion-infinite-scroll></div>',
    bindings: {
        category: '<',
        limit: '<',
        infiniteScroll: '<',
        // possible values: '' - default, 'compare' - compare mode
        mode: '<'
    },
    controller: ["SocialTypes", "SocialFeedService", "SocialLocaleService", "SocialFavoriteService", "SocialPortfolioService", "SocialUserService", "LeadersSearchService", "SocialUtils", "$ionicLoading", "$rootScope", "$timeout", class LeadersFeedComponent {
        constructor(
            SocialTypes,
            SocialFeedService,
            SocialLocaleService,
            SocialFavoriteService,
            SocialPortfolioService,
            SocialUserService,
            LeadersSearchService,
            SocialUtils,
            $ionicLoading,
            $rootScope,
            $timeout) {

            /**
             * @type SocialFeedService
             */
            this.feedService = SocialFeedService;
            /**
             * @type {SocialFavoriteService}
             */
            this.favoriteService = SocialFavoriteService;
            /**
             * @type {SocialPortfolioService}
             */
            this.portfolioService = SocialPortfolioService;
            /**
             * @type {SocialUserService}
             */
            this.userService = SocialUserService;
            /**
             * @type {LeadersSearchService}
             */
            this.leadersSearchService = LeadersSearchService;

            this.$ionicLoading = $ionicLoading;

            this.utils = SocialUtils;

            this.translation = SocialLocaleService.translation;
            this.$rootScope = $rootScope;
            this.$timeout = $timeout;

            this.traders = [];

            const FilterTag = SocialTypes.FilterTag;
            const FieldOperation = SocialTypes.FieldOperation;
            const Dir = SocialTypes.Dir;
            const Op = SocialTypes.Op;

            this.feedFilters = {
                [FilterTag.MostCopied]: {
                    fields: [
                        {
                            name: 'followers_count',
                            op: FieldOperation.GreaterThan,
                            value: 0,
                            next: Op.And
                        },
                        {
                            name: 'gain',
                            op: FieldOperation.GreaterThan,
                            value: 0,
                            next: Op.And
                        }
                    ],
                    order: [
                        {
                            name: 'followers_count',
                            dir: Dir.Desc
                        }
                    ],
                    dateRange: 'thisTwoYears'
                },
                [FilterTag.EditorsChoice]: {
                    fields: [
                        {
                            name: 'gain',
                            op: FieldOperation.GreaterThan,
                            value: -10,
                            next: Op.And
                        },
                        // {
                        //     name: 'profit',
                        //     op: FieldOperation.GreaterThan,
                        //     value: 1000,
                        //     next: Op.And
                        // },
                        {
                            name: 'trades_count',
                            op: FieldOperation.GreaterThan,
                            value: 0,
                            next: Op.And
                        },
                    ],
                    order: [
                        {
                            name: 'gain',
                            dir: Dir.Desc
                        },
                        {
                            name: 'trades_count',
                            dir: Dir.Desc
                        },
                        {
                            name: 'profit',
                            dir: Dir.Desc
                        },
                    ],
                    dateRange: 'lastMonth'
                },
                [FilterTag.Profitable]: {
                    fields: [
                        {
                            name: 'profit',
                            op: FieldOperation.GreaterThan,
                            value: 0,
                            next: Op.And
                        },
                        {
                            name: 'gain',
                            op: FieldOperation.GreaterThan,
                            value: 0,
                            next: Op.And
                        }
                    ],
                    order: [
                        {
                            name: 'profit',
                            dir: Dir.Desc
                        }
                    ],
                    dateRange: 'thisTwoYears'
                },
                [FilterTag.Trending]: {
                    fields: [
                        {
                            name: 'gain',
                            op: FieldOperation.GreaterThan,
                            value: 0,
                            next: Op.And
                        }
                    ],
                    order: [],
                    dateRange: 'thisTwoYears'
                },
                [FilterTag.Top]: {
                    fields: [
                        {
                            name: 'gain',
                            op: FieldOperation.GreaterThan,
                            value: 0,
                            next: Op.And
                        },
                        {
                            name: 'invested_capital',
                            op: FieldOperation.GreaterThan,
                            value: 0,
                            next: Op.And
                        }
                    ],
                    order: [
                        {
                            name: 'invested_capital',
                            dir: Dir.Desc
                        }
                    ],
                    dateRange: 'lastMonth'
                },
                [FilterTag.Similar]: {
                    fields: [
                        {
                            name: 'gain',
                            op: FieldOperation.GreaterThan,
                            value: 0,
                            next: Op.And
                        }
                    ],
                    order: [
                        {
                            name: 'gain',
                            dir: Dir.Desc
                        },
                        {
                            name: 'trades_count',
                            dir: Dir.Desc
                        },
                        {
                            name: 'profit',
                            dir: Dir.Desc
                        },
                    ],
                    dateRange: 'thisTwoYears'
                },
                'custom-search': {
                    fields: [],
                    order: []
                }
            };

            this.orderFilters = {
                'desc': {
                    fields: null,
                    order: [
                        {
                            name: 'registration_date',
                            dir: Dir.Desc
                        }
                    ]
                },
                'asc': {
                    fields: null,
                    order: [
                        {
                            name: 'registration_date',
                            dir: Dir.Asc
                        }
                    ]
                }
            };

            this.isLoading = false;

            this.noData = true;

            this.page = 0;

            this.order = 'desc';
        }

        $onInit() {
            // reset search for predefined categories
            if (this.category && this.category.id !== 'custom-search') {
                this.leadersSearchService.reset();
            }

            this.updateFeed();
        }

        $onChanges(changes) {
            if (changes.category && changes.category.currentValue) {
                this.updateFeed();
            }
        }

        $onDestroy() {
            console.log('on destroy')
        }

        updateFeed(more = false) {
            console.log('[CATEGORY]', this.category);
            let searchFields = {
                fields: [],
                order: [],
            };

            // TODO - fill search fields from search service
            if (this.category && this.category.id === 'custom-search') {
                searchFields = this.leadersSearchService.createFields();
                this.order = this.leadersSearchService.order;
            }

            searchFields.limit = Number(this.limit);
            searchFields.page = Number(this.page);

            const feedFields = this.feedFilters[this.category.id];
            const orderFields = this.orderFilters[this.order];

            console.warn('SEARCH FIELDS:', _.cloneDeep(searchFields));
            console.warn('FEED FIELDS:', _.cloneDeep(feedFields));
            console.warn('ORDER FIELDS:', this.order, _.cloneDeep(orderFields));

            if (feedFields) {
                searchFields.fields = _.concat(searchFields.fields, feedFields.fields);
                searchFields.order = _.concat(searchFields.order, feedFields.order, orderFields.order);
                if (feedFields.dateRange) {
                    searchFields.dateRange = feedFields.dateRange;
                }
            } else {
                searchFields.order = _.concat(searchFields.order, orderFields.order);
            }
            // }

            console.warn('COMBINED SEARCH FIELDS:::', this.category, _.cloneDeep(searchFields));

            // for the first loading only! - prefill traders with fake values to show loaders
            if (this.page === 0) {
                this.traders = Array(searchFields.limit).fill(null).map((item, index) => index);
            }

            this.isLoading = true;

            return this.feedService.get(searchFields)
                .then(traders => {

                    this.noData = !traders.length

                    if (this.noData) {
                        this.$rootScope.$broadcast('scroll.infiniteScrollComplete');
                        this.isLoading = false;

                        //first load - remove prefilled traders
                        if (!more) {
                            this.traders = [];
                        }
                        return;
                    }

                    if (more) {
                        this.traders = _.concat(this.traders, traders);
                    } else {
                        this.traders = traders;
                    }

                    //set favorite
                    this.setFavorites(this.traders);

                    //set followed
                    this.setFollowed(this.traders);

                    this.isLoading = false;
                })
                .catch(error => {
                    console.warn('got error', error);
                    this.isLoading = false;
                })
        }

        toggleTrader(trader) {
            // collapse all other traders
            this.traders
                .filter(item => item.id !== trader.id)
                .forEach(item => item.expanded = false);
        }

        loadMore() {
            this.page++;
            return this.updateFeed(true)
                .then(() => {
                    this.$rootScope.$broadcast('scroll.infiniteScrollComplete');
                });
        }

        resetSearch() {
            this.leadersSearchService.reset();
            this.utils.navigate('root.app.social', {category: 'all', nonce: Date.now()}, true);
        }

        /**
         * @param {Trader[]} traders
         */
        setFavorites(traders) {
            traders.forEach(trader => trader && (trader.isFavorite = this.favoriteService.isFavorite(trader.id)));
        }

        /**
         * @param {Trader[]} traders
         */
        setFollowed(traders) {
            traders.forEach(trader => trader && this.portfolioService.initLeader(trader));
        }
    }]
});

appSocial.component('leadersSearch', {
    template:'<ion-modal-view><ion-header-bar class="layout-row align-center"><div class="layout-column width-70"><span class="font-size-17 roboto-bold">Filter</span></div><div class="layout-column"><i class="social-icon-clear font-size-17" on-tap="$ctrl.close()"></i></div></ion-header-bar><ion-content scroll="true" overflow-scroll="true"><div class="layout-column full-width content-gap30 margin-top-16"><div class="layout-row just-center roboto-bold">{{$ctrl.translation.sortBy}}</div><div class="layout-row content-gap10"><div class="layout-column semi-width"><button class="button-social decent gray shadowless wide" ng-class="{\'active\':$ctrl.order===\'desc\'}" on-tap="$ctrl.setOrder(\'desc\')">{{$ctrl.translation.newestFirst}}</button></div><div class="layout-column semi-width"><button class="button-social decent gray shadowless wide" ng-class="{\'active\':$ctrl.order===\'asc\'}" on-tap="$ctrl.setOrder(\'asc\')">{{$ctrl.translation.oldestFirst}}</button></div></div><div class="layout-row just-center roboto-bold">{{$ctrl.translation.filterBy}}</div><div class="layout-row"><div class="layout-column full-width content-gap08"><div class="layout-row">{{$ctrl.translation.location}}</div><div class="layout-row"><custom-select class="layout-column full-width" ng-model="$ctrl.searchForm.country" items="$ctrl.countries" placeholder="All countries" wrap-class="\'countries-select\'" config="$ctrl.countriesSelectConfig"><script type="text/ng-template" id="content"><div class="layout-row just-start content-gap10"> <div class="layout-column trade-country"> <i class="flag-social-icon-{{ctx.code.toLowerCase()}}"></i> </div> <div class="layout-column"> {{ctx.country}} </div> </div></script><script type="text/ng-template" id="selected"><div class="layout-row just-start content-gap10"> <div class="layout-column"> <input type="checkbox" checked class="checkbox-social"> </div> <div class="layout-column trade-country"> <i class="flag-social-icon-{{ctx.code.toLowerCase()}}"></i> </div> <div class="layout-column"> {{ctx.country}} </div> </div></script><script type="text/ng-template" id="model-multi"><div class="layout-row just-start content-gap10"> <div class="layout-column trade-country"> <i class="flag-social-icon-{{ctx.code.toLowerCase()}}"></i> </div> <div class="layout-column"> {{ctx.country}} </div> </div></script></custom-select></div></div></div><div class="layout-row"><div class="layout-column full-width content-gap08"><div class="layout-row">{{$ctrl.translation.markets}}</div><div class="layout-row"><custom-select class="layout-column full-width" ng-model="$ctrl.searchForm.market" items="$ctrl.markets" placeholder="All Markets" wrap-class="\'markets-select\'" config="$ctrl.marketsSelectConfig"><script type="text/ng-template" id="selected"><div class="layout-row just-start content-gap10"> <div class="layout-column"> <input type="checkbox" checked class="checkbox-social"> </div> <div class="layout-column"> {{ctx.label}} </div> </div></script></custom-select></div></div></div><div class="layout-row"><div class="layout-column full-width content-gap08"><div class="layout-row">{{$ctrl.translation.minimalGain}} %</div><div class="layout-row"><div class="layout-column full-width"><input type="number" class="full-width input-social" name="minGain" ng-model="$ctrl.searchForm.minGain"></div></div></div></div><div class="layout-row"><div class="layout-column full-width content-gap08"><div class="layout-row">{{$ctrl.translation.duringThe}}</div><div class="layout-row"><custom-select class="layout-column full-width" ng-model="$ctrl.searchForm.dateRange" items="$ctrl.dateRanges" placeholder="All" config="$ctrl.defaultSelectConfig"></custom-select></div></div></div><div class="layout-row"><div class="layout-column full-width content-gap08"><div class="layout-row">{{$ctrl.translation.risk}}</div><div class="layout-row"><custom-select class="layout-column full-width" ng-model="$ctrl.searchForm.risk" items="$ctrl.risks" placeholder="All" config="$ctrl.defaultSelectConfig"></custom-select></div></div></div><div class="layout-row"><div class="layout-column full-width content-gap08"><div class="layout-row">{{$ctrl.translation.tradesCount}}</div><div class="layout-row"><custom-select class="layout-column full-width" ng-model="$ctrl.searchForm.trade" items="$ctrl.trades" placeholder="All" config="$ctrl.defaultSelectConfig"></custom-select></div></div></div><div class="layout-row margin-bottom-50"><div class="layout-column full-width content-gap08"><div class="layout-row">{{$ctrl.translation.avgTradeSize}}</div><div class="layout-row"><custom-select class="layout-column full-width" ng-model="$ctrl.searchForm.tradeSize" items="$ctrl.tradeSizes" placeholder="All" config="$ctrl.defaultSelectConfig"></custom-select></div></div></div></div></ion-content><ion-footer-bar class="social-footer"><div class="layout-column full-width full-height pad-left-15 pad-right-15 margin-bottom-24"><div class="layout-row full-height content-gap10"><div class="layout-column semi-width"><button class="button-social decent gray shadowless wide" on-tap="$ctrl.resetSearch()">{{$ctrl.translation.clearAll}}</button></div><div class="layout-column semi-width"><button class="button-social accent blue shadowless wide" on-tap="$ctrl.applySearch()">{{$ctrl.translation.apply}}</button></div></div></div></ion-footer-bar></ion-modal-view>',
    bindings: {
        onClose: '&',
        onApply: '&'
    },
    controller: ["SocialLocaleService", "LeadersSearchService", "SocialConstants", "SocialUtils", "$timeout", class LeadersSearchComponent {
        constructor(
            SocialLocaleService,
            LeadersSearchService,
            SocialConstants,
            SocialUtils,
            $timeout) {

            this.translation = SocialLocaleService.translation;
            this.$timeout = $timeout;
            /**
             * @type {LeadersSearchService}
             */
            this.searchService = LeadersSearchService;

            /**
             * @type {SocialUtils}
             */
            this.utils = SocialUtils;

            // TODO - check if we need cloneDeep here
            this.countries = _.cloneDeep(SocialConstants.countries);
            this.markets = SocialLocaleService.translateLabels(_.cloneDeep(SocialConstants.markets));
            this.dateRanges = SocialLocaleService.translateLabels(_.cloneDeep(SocialConstants.dateRanges));
            this.trades = _.cloneDeep(SocialConstants.trades);
            this.tradeSizes = _.cloneDeep(SocialConstants.tradeSizes);
            this.risks = SocialLocaleService.translateLabels(_.cloneDeep(SocialConstants.risks));

            this.searchForm = _.cloneDeep(this.searchService.search);

            this.countriesSelectConfig = {
                multiselect: true,
                id: 'code',
                label: 'country',
                showSearch: true,
                splitSelected: true,
                maxMultiSelected: 2,
                showReset: true,
            }

            this.marketsSelectConfig = {
                multiselect: true,
                id: 'id',
                label: 'label',
                showSearch: false,
                splitSelected: true,
                maxMultiSelected: 3,
                showReset: true,
            }

            this.defaultSelectConfig = {
                multiselect: false,
                id: 'id',
                label: 'label',
                showSearch: false,
                splitSelected: false,
                showReset: true,
            }

            this.order = this.searchService.order || 'desc'
        }

        setOrder(order) {
            this.order = order;
        }

        resetSearch() {
            this.searchService.reset();
            this.searchForm = _.cloneDeep(this.searchService.search);
        }

        applySearch() {
            this.searchService.search = _.cloneDeep(this.searchForm);
            this.searchService.order = this.order;
            this.searchService.updateSearch();

            // update search
            this.utils.navigate('root.app.social', {category: 'custom-search', nonce: Date.now()}, true);

            this.onClose();
        }

        close() {
            //reset non-applied search
            this.searchForm = _.cloneDeep(this.searchService.search);
            this.onClose();
        }
    }]
});

appSocial.component('favoritesCard', {
    template:'<div class="layout-column full-width"><div class="layout-row align-center full-height"><div class="layout-column width-20" on-tap="$ctrl.navigate()"><avatar trader="$ctrl.trader" avatar-options="{showCountryFlag: true}" class="leader-card"></avatar></div><div class="layout-column width-20 align-center" ng-class="{ \'social-color-positive\':$ctrl.trader.gain > 0, \'social-color-negative\':$ctrl.trader.gain < 0 }" on-tap="$ctrl.navigate()">{{$ctrl.trader.gain | number:2}}%</div><div class="layout-column width-15 align-center" on-tap="$ctrl.navigate()"><div class="layout-row risk-indicator circled" ng-class="$ctrl.trader.getRisk()">{{$ctrl.trader.riskScore}}</div></div><div class="layout-column width-20 align-center" on-tap="$ctrl.navigate()">{{$ctrl.trader.investedCapital | currency:\'$\':0}}</div><div class="layout-column width-20 align-center" on-tap="$ctrl.navigate()">{{$ctrl.trader.followersCount}}</div><div class="layout-column width-5" context-menu><i class="icon ion-android-more-vertical align-self font-17"></i><ul class="layout-column dropdown-menu"><li on-tap="$ctrl.deleteFavorite()" class="layout-column just-center">{{$ctrl.translation.removeFromFavorites}}</li><li on-tap="$ctrl.copy()" ng-if="!$ctrl.trader.isFollowed" class="layout-column just-center">{{$ctrl.translation.copy}}</li><li on-tap="$ctrl.callAction($ctrl.action.AddFunds)" ng-if="$ctrl.trader.isFollowed" class="layout-column just-center">{{$ctrl.translation.addFunds}}</li><li on-tap="$ctrl.callAction($ctrl.action.RemoveFunds)" ng-if="$ctrl.trader.isFollowed" class="layout-column just-center">{{$ctrl.translation.removeFunds}}</li><li on-tap="$ctrl.callAction($ctrl.action.SetStopLoss)" ng-if="$ctrl.trader.isFollowed" class="layout-column just-center">{{$ctrl.translation.setStopLoss}}</li><li on-tap="$ctrl.callAction($ctrl.action.Resume)" ng-if="$ctrl.trader.isFollowed && !$ctrl.trader.followState" class="layout-column just-center">{{$ctrl.translation.resumeCopy}}</li><li on-tap="$ctrl.callAction($ctrl.action.Pause)" ng-if="$ctrl.trader.isFollowed && $ctrl.trader.followState" class="layout-column just-center">{{$ctrl.translation.pauseCopy}}</li><li on-tap="$ctrl.callAction($ctrl.action.StopCopy)" ng-if="$ctrl.trader.isFollowed" class="layout-column just-center">{{$ctrl.translation.stopCopy}}</li></ul></div></div></div>',
    bindings: {
        trader: '<',
        lastTraderId: '<'
    },
    controller: ["$state", "$scope", "SocialLocaleService", "SocialUtils", "SocialActionService", "SocialTypes", "SocialUserService", "SocialFavoriteService", class FavoritesCardComponent {
        constructor($state,
                    $scope,
                    SocialLocaleService,
                    SocialUtils,
                    SocialActionService,
                    SocialTypes,
                    SocialUserService,
                    SocialFavoriteService) {

            this.translation = SocialLocaleService.translation;

            /**
             * @type {SocialUser}
             */
            this.user = SocialUserService.get()

            /**
             * @type {SocialUtils}
             */
            this.utils = SocialUtils;

            /**
             * @type {SocialActionService}
             */
            this.actionService = SocialActionService;

            /**
             * @type {SocialFavoriteService}
             */
            this.favoriteService = SocialFavoriteService;

            /**
             * @type {SocialTypes}
             */
            this.types = SocialTypes;

            this.action = this.types.CopyAction;
        }

        $onInit() {
        }

        $onChanges(changes) {
        }

        $onDestroy() {
        }

        navigate() {
            this.utils.navigate('root.app.socialLeader', {id: this.trader.id});
        }

        deleteFavorite() {
            this.favoriteService.deleteFavorite(this.trader);
        }

        /**
         * @param {CopyAction} action
         */
        callAction(action) {
            return this.actionService.callAction(action, this.trader);
        }

        copy() {
            const {CopyAction} = this.types;
            this.actionService.stateCheck({trader: this.trader, action: CopyAction.StartCopy})
        }
    }]
});

appSocial.component('favoritesList', {
    template:'<div class="layout-column full-width"><div class="layout-row full-width align-center title item-height social-color-base2"><div class="layout-column width-20"></div><div class="layout-column width-20 align-center">{{$ctrl.translation.gain}}</div><div class="layout-column width-15 align-center">{{$ctrl.translation.risk}}</div><div class="layout-column width-20 align-center">{{$ctrl.translation.invCapital}}</div><div class="layout-column width-20 align-center">{{$ctrl.translation.copiers}}</div><div class="layout-column width-5 align-center"></div></div><favorites-card class="layout-row full-width item-height" ng-repeat="item in $ctrl.traders" last-trader-id="$ctrl.lastTraderId" trader="item"></favorites-card></div>',
    bindings: {},
    controller: ["$scope", "SocialTypes", "SocialLocaleService", "SocialFavoriteService", "SocialUserService", "SocialUtils", class FavoritesListComponent {
        constructor(
            $scope,
            SocialTypes,
            SocialLocaleService,
            SocialFavoriteService,
            SocialUserService,
            SocialUtils) {

            /**
             * @type {SocialFavoriteService}
             */
            this.favoriteService = SocialFavoriteService;
            /**
             * @type {SocialUserService}
             */
            this.userService = SocialUserService;

            this.utils = SocialUtils;

            this.translation = SocialLocaleService.translation;

            this.traders = [];

            this.watchFavorites = $scope.$on('SocialFavoriteService.change', () => {
                this.traders = this.favoriteService.traders;
            })
        }

        $onInit() {
            this.traders = this.favoriteService.traders;
            console.log('favorites:', this.traders);
        }

        $onChanges(changes) {

        }

        $onDestroy() {
            this.watchFavorites && this.watchFavorites();
        }

    }]
});

appSocial.component('portfolioCard', {
    template:'<div class="layout-column full-width"><div class="layout-row align-center full-height" ng-class="{\'last-trader\': $ctrl.isLastTrader}"><div class="last-trader-indicator" ng-if="$ctrl.isLastTrader"></div><div class="layout-column width-25" on-tap="$ctrl.navigate()"><div class="layout-row"><div class="layout-column"><avatar trader="$ctrl.trader" avatar-options="{showCountryFlag: true}" class="leader-card"></avatar></div><div class="layout-column shrinkable align-center" on-tap="$event.stopPropagation();" ng-if="$ctrl.trader.followStopped"><div class="layout-row stop-loss-inline full-height align-center" context-menu context-menu-config="$ctrl.contextMenuConfig"><div class="layout-column circle"></div><div class="dropdown-menu stop-loss font-size-11">{{$ctrl.translation.stopLossReached}}</div></div></div></div></div><div class="layout-column width-25" on-tap="$ctrl.navigate()">{{$ctrl.trader.followDeposit | currencyConvert:$ctrl.user.currency:\'USD\' | cryptoCurrency:\'USD\'}}</div><div class="layout-column width-25" on-tap="$ctrl.navigate()">{{$ctrl.trader.followBalance | currencyConvert:$ctrl.user.currency:\'USD\' | cryptoCurrency:\'USD\'}}</div><div class="layout-column width-20 roboto-bold" on-tap="$ctrl.navigate()" ng-class="{ \'social-color-positive\': $ctrl.trader.followPnlPercents >= 0, \'social-color-negative\': $ctrl.trader.followPnlPercents < 0 }">{{$ctrl.trader.followPnlPercents | number:2}}%</div><div class="layout-column width-5" context-menu><i class="icon ion-android-more-vertical align-self font-17"></i><ul class="layout-column dropdown-menu"><li on-tap="$ctrl.callAction($ctrl.action.AddFunds)" class="layout-column just-center">{{$ctrl.translation.addFunds}}</li><li on-tap="$ctrl.callAction($ctrl.action.RemoveFunds)" class="layout-column just-center">{{$ctrl.translation.removeFunds}}</li><li on-tap="$ctrl.callAction($ctrl.action.SetStopLoss)" class="layout-column just-center">{{$ctrl.translation.setStopLoss}}</li><li on-tap="$ctrl.callAction($ctrl.action.Resume)" ng-if="!$ctrl.trader.followState" class="layout-column just-center">{{$ctrl.translation.resumeCopy}}</li><li on-tap="$ctrl.callAction($ctrl.action.Pause)" ng-if="$ctrl.trader.followState" class="layout-column just-center">{{$ctrl.translation.pauseCopy}}</li><li on-tap="$ctrl.callAction($ctrl.action.StopCopy)" class="layout-column just-center">{{$ctrl.translation.stopCopy}}</li></ul></div></div></div>',
    bindings: {
        trader: '<',
        lastTraderId: '<'
    },
    controller: ["$state", "$scope", "SocialLocaleService", "SocialUtils", "SocialActionService", "SocialTypes", "SocialUserService", class PortfolioCardComponent {
        constructor($state,
                    $scope,
                    SocialLocaleService,
                    SocialUtils,
                    SocialActionService,
                    SocialTypes,
                    SocialUserService) {

            this.translation = SocialLocaleService.translation;

            /**
             * @type {SocialUser}
             */
            this.user = SocialUserService.get()

            /**
             * @type {SocialUtils}
             */
            this.utils = SocialUtils;

            /**
             * @type {SocialActionService}
             */
            this.actionService = SocialActionService;

            /**
             * @type {SocialTypes}
             */
            this.types = SocialTypes;

            this.action = this.types.CopyAction;

            this.isLastTrader = false;

            this.$scope = $scope;

            this.contextMenuConfig = {
                top: (menu) => {
                    return 'auto';
                },
                right: (menu) => {
                    return 'auto';
                },
                left: (menu) => {
                    return (menu.portal.offset().left + 15) + 'px';
                },
            }
        }

        $onInit() {
            this.isLastTrader = this.lastTraderId.length && this.trader.id === this.lastTraderId;
        }

        $onChanges(changes) {
        }

        $onDestroy() {
        }

        navigate() {
            this.utils.navigate('root.app.socialLeader', {id: this.trader.id});
        }

        /**
         * @param {CopyAction} action
         */
        callAction(action) {
            return this.actionService.callAction(action, this.trader);
        }
    }]
});

appSocial.component('portfolioList', {
    template:'<div class="layout-column full-width"><div class="layout-row full-width align-center summary roboto-bold"><div class="layout-column width-25">{{$ctrl.translation.summary}}</div><div class="layout-column width-25 font-size-15">{{$ctrl.summary.initial | currencyConvert:$ctrl.user.currency:\'USD\' | cryptoCurrency:\'USD\'}}</div><div class="layout-column width-25 font-size-15">{{$ctrl.summary.current | currencyConvert:$ctrl.user.currency:\'USD\' | cryptoCurrency:\'USD\'}}</div><div class="layout-column shrinkable font-size-15" ng-class="{ \'social-color-positive\': $ctrl.summary.pnl >= 0, \'social-color-negative\': $ctrl.summary.pnl < 0 }">{{$ctrl.summary.pnl | number:2}}%</div></div><div class="layout-row full-width align-center title item-height social-color-base2"><div class="layout-column width-25"></div><div class="layout-column width-25">{{$ctrl.translation.invested}}</div><div class="layout-column width-25">{{$ctrl.translation.current}}</div><div class="layout-column width-25">{{$ctrl.translation.pl_percent}}</div></div><portfolio-card class="layout-row full-width item-height" ng-repeat="item in $ctrl.traders" last-trader-id="$ctrl.lastTraderId" trader="item"></portfolio-card></div>',
    bindings: {
    },
    controller: ["$state", "SocialTypes", "SocialLocaleService", "SocialFavoriteService", "SocialPortfolioService", "SocialUserService", "SocialUtils", class PortfolioListComponent {
        constructor(
            $state,
            SocialTypes,
            SocialLocaleService,
            SocialFavoriteService,
            SocialPortfolioService,
            SocialUserService,
            SocialUtils) {

            /**
             * @type {SocialFavoriteService}
             */
            this.favoriteService = SocialFavoriteService;
            /**
             * @type {SocialPortfolioService}
             */
            this.portfolioService = SocialPortfolioService;
            /**
             * @type {SocialUserService}
             */
            this.userService = SocialUserService;

            this.utils = SocialUtils;

            this.translation = SocialLocaleService.translation;

            this.summary = {
                initial: 0,
                current: 0,
                pnl: 0
            };

            this.traders = this.portfolioService.getAll();
            this.lastTraderId = $state.params.id;

            this.user = this.userService.get();
        }

        $onInit() {
            this.updateSummary();
        }

        $onChanges(changes) {

        }

        $onDestroy() {
            console.log('on destroy')
        }

        updateSummary() {
            this.summary = {
                initial: this.traders.reduce((acc, cur) => acc + cur.followDeposit, 0),
                current: this.traders.reduce((acc, cur) => acc + cur.followBalance, 0),
                pnl: this.traders.reduce((acc, cur) => acc + cur.followPnlPercents, 0)
            };
        }

        setFavorites(traders) {
            traders.forEach(trader => trader && (trader.isFavorite = this.favoriteService.isFavorite(trader.id)));
        }

    }]
});

//# sourceMappingURL=app-social.min.js.map
